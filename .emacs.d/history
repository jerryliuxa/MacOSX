;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(minibuffer-history-search-history grep-history calc-extended-command-history evil-ex-history coding-system-history command-history minibuffer-history file-name-history ido-buffer-history Man-topic-history ido-file-history))
(setq grep-history '("grep -nH -e ee"))
(setq evil-ex-history '(#("x" 0 1 (ex-index 1))))
(setq coding-system-history '("utf-8"))
(setq command-history '((find-file "/Users/liupei/Downloads/tsunami.template") (list-packages nil) (find-file "/Users/liupei/11111.txt") (kill-buffer "*Compile-Log*") (find-file "/Users/liupei/Downloads/mysql-error-running.log.10") (kill-buffer "new.sql") (find-file "/Users/liupei/Downloads/new.sql") (find-file "/Users/liupei/11111.txt") (write-file "/Users/liupei/mysql.sql") (find-file "/Users/liupei/22222.txt") (find-file "/Users/liupei/Downloads/Screen Shot 2016-08-09 at 6.45.27 PM.png") (find-file "/Users/liupei/Downloads/CheungSSH-master/conf/CentOS-Base.repo") (find-file "/Users/liupei/Downloads/rds-combined-ca-bundle.pem") (find-file "/Users/liupei/Downloads/original_config.yml") (find-file "/Users/liupei/Downloads/edited_config.yml") (find-file "/Users/liupei/src/mariadb-10.1.14/sql/sql_lex.cc") (goto-line 1825 nil) (find-file "/Users/liupei/src/mariadb-10.1.14/sql/rpl_gtid.cc") (goto-line 1802 nil) (goto-line 3124 nil) (find-file #("/Users/liupei/src/mariadb-10.1.14/sql/sql_repl.cc" 1 6 (face flx-highlight-face) 14 18 (face flx-highlight-face) 34 38 (face flx-highlight-face))) (find-file #("/Users/liupei/src/mysql-5.7.13/sql/sql_insert.cc" 14 18 (face flx-highlight-face))) (find-file "/Users/liupei/11111.txt") (find-file "/Users/liupei/Downloads/11111.txt") (find-file "/Users/liupei/11111.txt") (kill-buffer "postgresql.log.2016-02-29-02") (find-file "/Users/liupei/Downloads/postgresql.log.2016-02-29-02") (find-file "/Users/liupei/src/genca.sh") (find-file "/Users/liupei/11111.txt") (find-file "/Users/liupei/src/ghost.c") (find-file "/Users/liupei/src/glibc_bug.c") (find-file "/Users/liupei/11111.txt") (kill-buffer "01.rar") (find-file "/sudo:root@localhost:/Users/liupei/Downloads/01.rar") (kill-buffer "galaxy.py (ansible-2.0.0.2-py2.7.egg)") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/dist/ansible-2.0.0.2-py2.7.egg") (find-file "/Users/liupei/src/pipe_mthread.py") (kill-buffer "CEACAA005OGKDG(8).dat") (find-file "/Users/liupei/Downloads/CEACAA005OGKDG(8).dat") (find-file "/Users/liupei/Downloads/11111.txt") (find-file "/Users/liupei/11111.txt") (kill-buffer "*grep*") (grep "grep -nH -e ee") (find-file "/Users/liupei/test.py") (kill-buffer "autopair-autoloads.el") (find-file "/Users/liupei/.emacs.d/lisp/autopair/autopair-autoloads.el") (kill-buffer "ido.last") (find-file "/Users/liupei/.emacs.d/ido.last") (kill-buffer "company-statistics-cache.el") (find-file "/Users/liupei/.emacs.d/company-statistics-cache.el") (list-packages nil) (find-file "/Users/liupei/.emacs.d/lisp/init-elpa.el") (list-packages nil) (list-packages nil) (jedi:install-server) (find-file "/Users/liupei/.emacs.d/lisp/init-elpa.el") (find-file "/Users/liupei/.emacs.d/init.el") (find-file "/Users/liupei/.emacs.d/lisp/init-exec-path.el") (exec-path-from-shell-initialize) (list-packages nil) (package-install 'anaconda-mode) (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/bin/ansible") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/lib/ansible/galaxy/api.py") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/lib/ansible/constants.py") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/upgrade_to_ps3.ps1") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/ConfigureRemotingForAnsible.ps1") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/uptime.py") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/playbooks/README.md") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/hosts") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/examples/ansible.cfg") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/setup.py") (find-file "/Users/liupei/src/ansible-stable-2.0.0.1/CHANGELOG.md") (indent-region (region-beginning) (region-end) nil) (temp-buffer-resize-mode 'toggle) (term "/bin/false") (ediff-buffers "autopair-autoloads.el" "init-company.el") (kill-buffer "connect.py") (auto-compile-mode 'toggle) (kill-buffer "auto-compile.el") (find-file "/Users/liupei/.emacs.d/elpa/auto-compile-20151107.1408/auto-compile.el") (find-file "/Users/liupei/.emacs.d/lisp/init-company.el") (find-file "/Users/liupei/.emacs.d/lisp/init-python-mode.el") (kill-buffer "el-face.org") (find-file "/Users/liupei/Downloads/el-face.org") (find-file "/Users/liupei/src/jumpserver/connect.py") (indent-region (region-beginning) (region-end) nil) (indent-region (region-beginning) (region-end) nil) (find-file "/Users/liupei/.emacs.d/lisp/autopair/autopair-autoloads.el") (find-file "/Users/liupei/11111.txt") (kill-buffer "autopair-autoloads.el") (find-file "/Users/liupei/.emacs.d/lisp/autopair/autopair-autoloads.el") (kill-buffer "init-utils.el") (find-file "/Users/liupei/.emacs.d/lisp/init-utils.el") (package-install 'autopair) (package-install 'highlight-parentheses) (find-file "/Users/liupei/.emacs.d/lisp/init-utils.el") (find-file "/Users/liupei/.emacs.d/init.el") (find-file "/Users/liupei/src/jumpserver/connect.py") (find-file "/Users/liupei/Downloads/opti.sql") (kill-buffer "22222.txt") (find-file "/Users/liupei/Downloads/22222.txt") (find-file "/Users/liupei/Downloads/11111.txt") (find-file "/Users/liupei/src/test.py") (kill-buffer "benchmark.rb") (find-file "/sudo:root@localhost:/usr/lib/ruby/2.0.0/benchmark.rb") (find-file "/sudo:root@localhost:/usr/lib/ruby/2.0.0/base64.rb") (find-file "/sudo:root@localhost:/usr/lib/ruby/2.0.0/English.rb") (find-file "/usr/lib/python2.7/sysconfig.py") (kill-buffer "init-term-mode.el") (find-file "/Users/liupei/.emacs.d/lisp/init-term-mode.el") (find-file "/Users/liupei/11111.txt") (find-file "/Users/liupei/.emacs.d/init.el") (find-file "/Users/liupei/11111.txt") (find-file "/Users/liupei/src/ssh.py") (set-buffer-file-coding-system 'utf-8 nil) (find-file "/Users/liupei/src/test.pl") (set-fill-column 70) (set-fill-column 15) (kill-buffer "*Help*") (kill-buffer "*info*") (describe-key "" 1 nil) (kill-buffer ".viminfo") (find-file "/Users/liupei/.viminfo") (kill-buffer "ios_base_startup-config.txt") (find-file "/Users/liupei/GNS3/configs/ios_base_startup-config.txt") (find-file "/Users/liupei/Downloads/.tmux.conf") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/models.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/FileTransfer.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/admin.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/urls.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/settings.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/mysite/manage.py") (find-file "/Users/liupei/Downloads/CheungSSH-master/conf/CentOS-Base.repo") (find-file "/Users/liupei/src/botdr4g0n/common/secureUI.py") (find-file "/Users/liupei/.CFUserTextEncoding") (find-file "/Users/liupei/.emacs.keyfreq") (find-file "/Users/liupei/src/botdr4g0n/common/ConsoleUI.py") (find-file "/Users/liupei/src/botdr4g0n/README.md") (kill-buffer "*Calendar*") (find-file "/Users/liupei/src/test.py") (manual-entry "basic") (find-file "/Users/liupei/src/guitest.py") (find-file "/usr/lib/python2.7/Bastion.py") (find-file #("/usr/lib/python2.7/BaseHTTPServer.py" 1 5 (\.\.\. nil) 5 9 (\.\.\. nil)))))
(setq minibuffer-history '("list-packages" "1825" "1802" "3124" "class(parent): ..." "jedi:install-server" "exec-path-from-shell-initialize" "el-get-install" "anaconda-mode" "package-install" "indent-region" "temp-buffer-resize-mode" "/bin/false" "term" "auto-compile-mode" "autopair" "highlight-parentheses" "70" "15" "describe-key"))
(setq file-name-history '("/Users/liupei/Downloads/tsunami.template" "~/.emacs.d/init.el" "~/Downloads/map(2).osm" "/Users/liupei/11111.txt" "~/Downloads/new.sql" "~/Downloads/apposs-center-master/Vagrantfile" "/Users/liupei/Downloads/mysql-error-running.log.10" "/Users/liupei/Downloads/new.sql" "/Users/liupei/mysql.sql" "/Users/liupei/22222.txt" "/Users/liupei/Downloads/Screen Shot 2016-08-09 at 6.45.27 PM.png" "/Users/liupei/Downloads/CheungSSH-master/conf/CentOS-Base.repo" "~/Downloads/data-integration/set-pentaho-env.sh" "/Users/liupei/Downloads/rds-combined-ca-bundle.pem" "/Users/liupei/Downloads/original_config.yml" "/Users/liupei/Downloads/edited_config.yml" "/Users/liupei/src/mariadb-10.1.14/sql/sql_lex.cc" "/Users/liupei/src/mariadb-10.1.14/sql/rpl_gtid.cc" #("/Users/liupei/src/mariadb-10.1.14/sql/sql_repl.cc" 1 6 (face flx-highlight-face) 14 18 (face flx-highlight-face) 34 38 (face flx-highlight-face)) #("/Users/liupei/src/mysql-5.7.13/sql/sql_insert.cc" 14 18 (face flx-highlight-face)) "/Users/liupei/Downloads/11111.txt" "/Users/liupei/Downloads/postgresql.log.2016-02-29-02" "/Users/liupei/src/genca.sh" "/Users/liupei/src/ghost.c" "/Users/liupei/src/glibc_bug.c" "/sudo:root@localhost:/Users/liupei/Downloads/01.rar" "/sudo:root@localhost:/Users/liupei/src/ansible-stable-2.0.0.1/dist/ansible-2.0.0.2-py2.7.egg" "/Users/liupei/src/ansible-stable-2.0.0.1/dist/ansible-2.0.0.2-py2.7.egg" "/Users/liupei/src/pipe_mthread.py" "/Users/liupei/Downloads/CEACAA005OGKDG(8).dat" "/Users/liupei/test.py" "/Users/liupei/.emacs.d/lisp/autopair/autopair-autoloads.el" "/Users/liupei/.emacs.d/ido.last" "/Users/liupei/.emacs.d/company-statistics-cache.el" "~/.emacs.d/elpa/flymake-python-pyflakes-0.9/flymake-python-pyflakes-autoloads.el" "/Users/liupei/.emacs.d/lisp/init-elpa.el" "~/.emacs.d/elpa/ac-anaconda-0.1.0/ac-anaconda-autoloads.el" "~/.emacs.d/elpa/company-anaconda-0.1.0/company-anaconda-autoloads.el" "~/.emacs.d/elpa/anaconda-mode-0.1.1/anaconda-mode-autoloads.el" "~/.emacs.d/elpa/pythonic-20150730.216/pythonic-autoloads.el" "~/.emacs.d/elpa/f-0.17.3/f-autoloads.el" "~/.emacs.d/elpa/company-ansible-0.1.1/company-ansible-autoloads.el" "~/.emacs.d/elpa/company-jedi-0.4/company-jedi-autoloads.el" "~/.emacs.d/elpa/company-web-0.9/company-web-autoloads.el" "~/.emacs.d/elpa/web-completion-data-0.1/web-completion-data-autoloads.el" "/Users/liupei/.emacs.d/init.el" "/Users/liupei/.emacs.d/lisp/init-exec-path.el" "~/.emacs.d/elpa/jedi-0.2.7/jedi-autoloads.el" "~/.emacs.d/elpa/auto-complete-1.5.0/auto-complete-autoloads.el" "~/.emacs.d/elpa/jedi-core-0.2.7/jedi-core-autoloads.el" "~/.emacs.d/elpa/epc-0.1.0/epc-autoloads.el" "~/.emacs.d/elpa/concurrent-0.4.0/concurrent-autoloads.el" "~/.emacs.d/elpa/ctable-0.1.2/ctable-autoloads.el" "~/.emacs.d/elpa/python-environment-0.0.2/python-environment-autoloads.el" "~/.emacs.d/elpa/deferred-0.4.0/deferred-autoloads.el" "/Users/liupei/src/ansible-stable-2.0.0.1/bin/ansible" "/Users/liupei/src/ansible-stable-2.0.0.1/lib/ansible/galaxy/api.py" "/Users/liupei/src/ansible-stable-2.0.0.1/lib/ansible/constants.py" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/upgrade_to_ps3.ps1" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/ConfigureRemotingForAnsible.ps1" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/scripts/uptime.py" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/playbooks/README.md" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/hosts" "/Users/liupei/src/ansible-stable-2.0.0.1/examples/ansible.cfg" "~/Downloads/data-integration/spoon.sh" "/Users/liupei/src/ansible-stable-2.0.0.1/setup.py" "/Users/liupei/src/ansible-stable-2.0.0.1/CHANGELOG.md" "/Users/liupei/.emacs.d/elpa/auto-compile-20151107.1408/auto-compile.el" "/Users/liupei/.emacs.d/lisp/init-company.el" "/Users/liupei/.emacs.d/lisp/init-python-mode.el" "/Users/liupei/Downloads/el-face.org" "/Users/liupei/src/jumpserver/connect.py" "/Users/liupei/.emacs.d/lisp/init-utils.el" "~/.emacs.d/elpa/autopair-0.6.1/autopair-autoloads.el" "~/.emacs.d/elpa/highlight-parentheses-1.1.0/highlight-parentheses-autoloads.el" "/Users/liupei/Downloads/opti.sql" "/Users/liupei/Downloads/22222.txt" "~/.ShadowsocksX/gfwlist.js" "/Users/liupei/src/test.py" "/sudo:root@localhost:/usr/lib/ruby/2.0.0/benchmark.rb" "/sudo:root@localhost:/usr/lib/ruby/2.0.0/base64.rb" "/sudo:root@localhost:/usr/lib/ruby/2.0.0/English.rb" "/sudo:root@localhost:/usr/lib/python2.7/sysconfig.py" "/usr/lib/python2.7/sysconfig.py" "/Users/liupei/.emacs.d/lisp/init-term-mode.el" "~/GNS3/projects/lab2/project-files/dynamips/configs/i1_private-config.cfg" "~/GNS3/projects/lab2/project-files/dynamips/configs/i1_startup-config.cfg" "/Users/liupei/src/ssh.py" "/Users/liupei/src/test.pl" "/Users/liupei/.viminfo" "/Users/liupei/GNS3/configs/ios_base_startup-config.txt" "/Users/liupei/Downloads/.tmux.conf" "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/models.py" "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/FileTransfer.py" "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/cheungssh/admin.py" "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/urls.py" "/Users/liupei/Downloads/CheungSSH-master/mysite/mysite/settings.py" "/Users/liupei/Downloads/CheungSSH-master/mysite/manage.py" "/Users/liupei/src/botdr4g0n/common/secureUI.py" "/Users/liupei/.CFUserTextEncoding" "/Users/liupei/.emacs.keyfreq" "/Users/liupei/src/botdr4g0n/common/ConsoleUI.py" "/Users/liupei/src/botdr4g0n/README.md" "/Users/liupei/src/guitest.py" "/usr/lib/python2.7/Bastion.py" #("/usr/lib/python2.7/BaseHTTPServer.py" 1 5 (face flx-highlight-face) 5 9 (face flx-highlight-face))))
(setq ido-buffer-history '("*Compile-Log*" "new.sql" "postgresql.log.2016-02-29-02" "01.rar" "galaxy.py (ansible-2.0.0.2-py2.7.egg)" "CEACAA005OGKDG(8).dat" "*grep*" "autopair-autoloads.el" "ido.last" "company-statistics-cache.el" "init-company.el" "connect.py" "auto-compile.el" "el-face.org" "init-utils.el" "22222.txt" "benchmark.rb" "init-term-mode.el" "*Help*" "*info*" ".viminfo" "ios_base_startup-config.txt" "*Calendar*"))
(setq Man-topic-history '("basic"))
(setq ido-file-history '("tsunami.template" "11111.txt" "mysql-error-running.log.10" "new.sql" "mysql.sql" "22222.txt" "Screen Shot 2016-08-09 at 6.45.27 PM.png" "CentOS-Base.repo" "rds-combined-ca-bundle.pem" "original_config.yml" "edited_config.yml" "sql_lex.cc" "rpl_gtid.cc" "sql_repl.cc" "sql_insert.cc" "postgresql.log.2016-02-29-02" "genca.sh" "ghost.c" "glibc_bug.c" "01.rar" "ansible-2.0.0.2-py2.7.egg" "pipe_mthread.py" "CEACAA005OGKDG(8).dat" "test.py" "autopair-autoloads.el" "ido.last" "company-statistics-cache.el" "init-elpa.el" "init.el" "init-exec-path.el" "ansible" "api.py" "constants.py" "upgrade_to_ps3.ps1" "ConfigureRemotingForAnsible.ps1" "uptime.py" "README.md" "hosts" "ansible.cfg" "setup.py" "CHANGELOG.md" "auto-compile.el" "init-company.el" "init-python-mode.el" "el-face.org" "connect.py" "init-utils.el" "opti.sql" "benchmark.rb" "base64.rb" "English.rb" "sysconfig.py" "init-term-mode.el" "ssh.py" "test.pl" ".viminfo" "ios_base_startup-config.txt" ".tmux.conf" "models.py" nil "FileTransfer.py" "admin.py" "urls.py" "settings.py" "manage.py" "secureUI.py" ".CFUserTextEncoding" ".emacs.keyfreq" "ConsoleUI.py" "guitest.py" "Bastion.py" "BaseHTTPServer.py"))
(setq search-ring '("tag" "gtid"))
(setq regexp-search-ring '("flymake" "exec-path-from-shell" "jedi"))
(setq kill-ring '("Tsunami UDP" "Tsunami UDP" "http://www.redtube.com/730694" "国家新闻出版广电总局下发《关于加强网络视听节目直播服务管理有关问题的通知》，通知重申广电总局的有关规定，即直播平台必须持有《信息网络传播视听节目许可证》(以下简称《许可证》)，未取得许可证的机构和个人不能从事直播业务。广电总局相关规定对直播行业是否意味着“寒冬”来临？未来网络直播平台将何去何从？《通知》称，开展网络视听节目直播服务应具有相应资质。未持有《信息网络传播视听节目许可证》的机构和个人，均不得通过互联网开展相关活动、事件的视音频直播服务，也不得利用网络直播平台(直播间)开办新闻、综艺、体育、访谈、评论等各类视听节目，不得开办视听节目直播频道。《通知》还规定，未经批准，任何机构和个人不得在互联网上使用“电视台”“广播电台”“电台”“TV”等广播电视专有名称开展业务。这意味着，目前几家主要直播网站，包括熊猫TV、战旗TV等都将面临违规风险。\"" "Can't create thread to handle request (errno= 11)" "1058149274" "sql/mysqld.cc" "ALTER TABLE table_name ENGINE=InnoDB; " "SELECT TABLE_SCHEMA, TABLE_NAME, 
       round(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) As \"Approximate size (MB)\" 
FROM information_schema.TABLES
WHERE TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema'); " "" "https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem" #("
      switch(*++str) {
      case 'n':
        *to++='\\n';
        break;
      case 't':
        *to++= '\\t';
        break;
      case 'r':
        *to++ = '\\r';
        break;
      case 'b':
        *to++ = '\\b';
        break;
      case '0':
        *to++= 0;                      // Ascii null
        break;
      case 'Z':                        // ^Z must be escaped on Win32
        *to++='\\032';
        break;
      case '_':
      case '%':
        *to++= '\\\\';                   // remember prefix for wildcard
        /* Fall through */
      default:
        *to++= *str;
        break;
      }
    }
    else if (*str == sep)
      *to++= *str++;                // Two ' or \"
    else
      *to++ = *str;
  }
  *to= 0;
  return to - start;
}


size_t
Lex_input_stream::unescape(CHARSET_INFO *cs, char *to,
                           const char *str, const char *end,
                           int sep)
{
  return my_unescape(cs, to, str, end, sep, m_thd->backslash_escapes());
}


/*
  Return an unescaped text literal without quotes
  Fix sometimes to do only one scan of the string
*/

bool Lex_input_stream::get_text(LEX_STRING *dst, uint sep,
                                int pre_skip, int post_skip)
{
  reg1 uchar c;
  uint found_escape=0;
  CHARSET_INFO *cs= m_thd->charset();

  tok_bitmap= 0;
  while (! eof())
  {
    c= yyGet();
    tok_bitmap|= c;
#ifdef USE_MB
    {
      int l;
      if (use_mb(cs) &&
          (l = my_ismbchar(cs,
                           get_ptr() -1,
                           get_end_of_query()))) {
        skip_binary(l-1);
        continue;
      }
    }
#endif
    if (c == '\\\\' &&
        !(m_thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES))
    {					// Escaped character
      found_escape=1;
      if (eof())
	return true;
      yySkip();
    }
    else if (c == sep)
    {
      if (c == yyGet())                 // Check if two separators in a row
      {
        found_escape=1;                 // duplicate. Remember for delete
	continue;
      }
      else
        yyUnget();

      /* Found end. Unescape and return string */
      const char *str, *end;

      str= get_tok_start();
      end= get_ptr();
      /* Extract the text from the token */
      str += pre_skip;
      end -= post_skip;
      DBUG_ASSERT(end >= str);

      if (!(dst->str= (char*) m_thd->alloc((uint) (end - str) + 1)))
      {
        dst->str= (char*) \"\";        // Sql_alloc has set error flag
        dst->length= 0;
        return true;
      }

      m_cpp_text_start= get_cpp_tok_start() + pre_skip;
      m_cpp_text_end= get_cpp_ptr() - post_skip;

      if (!found_escape)
      {
        memcpy(dst->str, str, dst->length= (end - str));
        dst->str[dst->length]= 0;
      }
      else
      {
        dst->length= unescape(cs, dst->str, str, end, sep);
      }
      return false;
    }
  }
  return true;                         // unexpected end of query
}


/*
** Calc type of integer; long integer, longlong integer or real.
** Returns smallest type that match the string.
** When using unsigned long long values the result is converted to a real
** because else they will be unexpected sign changes because all calculation
** is done with longlong or double.
*/

static const char *long_str=\"2147483647\";
static const uint long_len=10;
static const char *signed_long_str=\"-2147483648\";
static const char *longlong_str=\"9223372036854775807\";
static const uint longlong_len=19;
static const char *signed_longlong_str=\"-9223372036854775808\";
static const uint signed_longlong_len=19;
static const char *unsigned_longlong_str=\"18446744073709551615\";
static const uint unsigned_longlong_len=20;

static inline uint int_token(const char *str,uint length)
{
  if (length < long_len)			// quick normal case
    return NUM;
  bool neg=0;

  if (*str == '+')				// Remove sign and pre-zeros
  {
    str++; length--;
  }
  else if (*str == '-')
  {
    str++; length--;
    neg=1;
  }
  while (*str == '0' && length)
  {
    str++; length --;
  }
  if (length < long_len)
    return NUM;

  uint smaller,bigger;
  const char *cmp;
  if (neg)
  {
    if (length == long_len)
    {
      cmp= signed_long_str+1;
      smaller=NUM;				// If <= signed_long_str
      bigger=LONG_NUM;				// If >= signed_long_str
    }
    else if (length < signed_longlong_len)
      return LONG_NUM;
    else if (length > signed_longlong_len)
      return DECIMAL_NUM;
    else
    {
      cmp=signed_longlong_str+1;
      smaller=LONG_NUM;				// If <= signed_longlong_str
      bigger=DECIMAL_NUM;
    }
  }
  else
  {
    if (length == long_len)
    {
      cmp= long_str;
      smaller=NUM;
      bigger=LONG_NUM;
    }
    else if (length < longlong_len)
      return LONG_NUM;
    else if (length > longlong_len)
    {
      if (length > unsigned_longlong_len)
        return DECIMAL_NUM;
      cmp=unsigned_longlong_str;
      smaller=ULONGLONG_NUM;
      bigger=DECIMAL_NUM;
    }
    else
    {
      cmp=longlong_str;
      smaller=LONG_NUM;
      bigger= ULONGLONG_NUM;
    }
  }
  while (*cmp && *cmp++ == *str++) ;
  return ((uchar) str[-1] <= (uchar) cmp[-1]) ? smaller : bigger;
}


/**
  Given a stream that is advanced to the first contained character in 
  an open comment, consume the comment.  Optionally, if we are allowed, 
  recurse so that we understand comments within this current comment.

  At this level, we do not support version-condition comments.  We might 
  have been called with having just passed one in the stream, though.  In 
  that case, we probably want to tolerate mundane comments inside.  Thus,
  the case for recursion.

  @retval  Whether EOF reached before comment is closed.
*/
bool consume_comment(Lex_input_stream *lip, int remaining_recursions_permitted)
{
  reg1 uchar c;
  while (! lip->eof())
  {
    c= lip->yyGet();

    if (remaining_recursions_permitted > 0)
    {
      if ((c == '/') && (lip->yyPeek() == '*'))
      {
        lip->yySkip(); /* Eat asterisk */
        consume_comment(lip, remaining_recursions_permitted-1);
        continue;
      }
    }

    if (c == '*')
    {
      if (lip->yyPeek() == '/')
      {
        lip->yySkip(); /* Eat slash */
        return FALSE;
      }
    }

    if (c == '\\n')
      lip->yylineno++;
  }

  return TRUE;
}


/*
  MYSQLlex remember the following states from the following MYSQLlex()

  @param yylval         [out]  semantic value of the token being parsed (yylval)
  @param thd            THD

  - MY_LEX_EOQ			Found end of query
  - MY_LEX_OPERATOR_OR_IDENT	Last state was an ident, text or number
				(which can't be followed by a signed number)
*/

int MYSQLlex(YYSTYPE *yylval, THD *thd)
{
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;
  int token;

  if (lip->lookahead_token >= 0)
  {
    /*
      The next token was already parsed in advance,
      return it.
    */
    token= lip->lookahead_token;
    lip->lookahead_token= -1;
    *yylval= *(lip->lookahead_yylval);
    lip->lookahead_yylval= NULL;
    lip->add_digest_token(token, yylval);
    return token;
  }

  token= lex_one_token(yylval, thd);

  switch(token) {
  case WITH:
    /*
      Parsing 'WITH' 'ROLLUP' or 'WITH' 'CUBE' requires 2 look ups,
      which makes the grammar LALR(2).
      Replace by a single 'WITH_ROLLUP' or 'WITH_CUBE' token,
      to transform the grammar into a LALR(1) grammar,
      which sql_yacc.yy can process.
    */
    token= lex_one_token(yylval, thd);
    switch(token) {
    case CUBE_SYM:
      lip->add_digest_token(WITH_CUBE_SYM, yylval);
      return WITH_CUBE_SYM;
    case ROLLUP_SYM:
      lip->add_digest_token(WITH_ROLLUP_SYM, yylval);
      return WITH_ROLLUP_SYM;
    default:
      /*
        Save the token following 'WITH'
      */
      lip->lookahead_yylval= lip->yylval;
      lip->yylval= NULL;
      lip->lookahead_token= token;
      lip->add_digest_token(WITH, yylval);
      return WITH;
    }
    break;
  default:
    break;
  }

  lip->add_digest_token(token, yylval);
  return token;
}

static int lex_one_token(YYSTYPE *yylval, THD *thd)
{
  reg1	uchar UNINIT_VAR(c);
  bool comment_closed;
  int	tokval, result_state;
  uint length;
  enum my_lex_states state;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;
  LEX *lex= thd->lex;
  CHARSET_INFO *const cs= thd->charset();
  const uchar *const state_map= cs->state_map;
  const uchar *const ident_map= cs->ident_map;

  lip->yylval=yylval;			// The global state

  lip->start_token();
  state=lip->next_state;
  lip->next_state=MY_LEX_OPERATOR_OR_IDENT;
  for (;;)
  {
    switch (state) {
    case MY_LEX_OPERATOR_OR_IDENT:	// Next is operator or keyword
    case MY_LEX_START:			// Start of token
      // Skip starting whitespace
      while(state_map[c= lip->yyPeek()] == MY_LEX_SKIP)
      {
	if (c == '\\n')
	  lip->yylineno++;

        lip->yySkip();
      }

      /* Start of real token */
      lip->restart_token();
      c= lip->yyGet();
      state= (enum my_lex_states) state_map[c];
      break;
    case MY_LEX_ESCAPE:
      if (lip->yyGet() == 'N')
      {					// Allow \\N as shortcut for NULL
	yylval->lex_str.str=(char*) \"\\\\N\";
	yylval->lex_str.length=2;
	return NULL_SYM;
      }
      /* Fall through */
    case MY_LEX_CHAR:			// Unknown or single char token
    case MY_LEX_SKIP:			// This should not happen
      if (c != ')')
	lip->next_state= MY_LEX_START;	// Allow signed numbers
      return((int) c);

    case MY_LEX_MINUS_OR_COMMENT:
      if (lip->yyPeek() == '-' &&
          (my_isspace(cs,lip->yyPeekn(1)) ||
           my_iscntrl(cs,lip->yyPeekn(1))))
      {
        state=MY_LEX_COMMENT;
        break;
      }
      lip->next_state= MY_LEX_START;	// Allow signed numbers
      return((int) c);

    case MY_LEX_PLACEHOLDER:
      /*
        Check for a placeholder: it should not precede a possible identifier
        because of binlogging: when a placeholder is replaced with
        its value in a query for the binlog, the query must stay
        grammatically correct.
      */
      lip->next_state= MY_LEX_START;	// Allow signed numbers
      if (lip->stmt_prepare_mode && !ident_map[(uchar) lip->yyPeek()])
        return(PARAM_MARKER);
      return((int) c);

    case MY_LEX_COMMA:
      lip->next_state= MY_LEX_START;	// Allow signed numbers
      /*
        Warning:
        This is a work around, to make the \"remember_name\" rule in
        sql/sql_yacc.yy work properly.
        The problem is that, when parsing \"select expr1, expr2\",
        the code generated by bison executes the *pre* action
        remember_name (see select_item) *before* actually parsing the
        first token of expr2.
      */
      lip->restart_token();
      return((int) c);

    case MY_LEX_IDENT_OR_NCHAR:
    {
      uint sep;
      if (lip->yyPeek() != '\\'')
      {
	state= MY_LEX_IDENT;
	break;
      }
      /* Found N'string' */
      lip->yySkip();                         // Skip '
      if (lip->get_text(&yylval->lex_str, (sep= lip->yyGetLast()), 2, 1))
      {
	state= MY_LEX_CHAR;             // Read char by char
	break;
      }

      lip->body_utf8_append(lip->m_cpp_text_start);
      lip->body_utf8_append_escape(thd, &yylval->lex_str,
                                   national_charset_info,
                                   lip->m_cpp_text_end, sep);

      lex->text_string_is_7bit= (lip->tok_bitmap & 0x80) ? 0 : 1;
      return(NCHAR_STRING);
    }
    case MY_LEX_IDENT_OR_HEX:
      if (lip->yyPeek() == '\\'')
      {					// Found x'hex-number'
	state= MY_LEX_HEX_NUMBER;
	break;
      }
    case MY_LEX_IDENT_OR_BIN:
      if (lip->yyPeek() == '\\'')
      {                                 // Found b'bin-number'
        state= MY_LEX_BIN_NUMBER;
        break;
      }
    case MY_LEX_IDENT:
      const char *start;
#if defined(USE_MB) && defined(USE_MB_IDENT)
      if (use_mb(cs))
      {
	result_state= IDENT_QUOTED;
        if (my_mbcharlen(cs, lip->yyGetLast()) > 1)
        {
          int l = my_ismbchar(cs,
                              lip->get_ptr() -1,
                              lip->get_end_of_query());
          if (l == 0) {
            state = MY_LEX_CHAR;
            continue;
          }
          lip->skip_binary(l - 1);
        }
        while (ident_map[c=lip->yyGet()])
        {
          if (my_mbcharlen(cs, c) > 1)
          {
            int l;
            if ((l = my_ismbchar(cs,
                                 lip->get_ptr() -1,
                                 lip->get_end_of_query())) == 0)
              break;
            lip->skip_binary(l-1);
          }
        }
      }
      else
#endif
      {
        for (result_state= c;
             ident_map[(uchar) (c= lip->yyGet())];
             result_state|= c)
          ;
        /* If there were non-ASCII characters, mark that we must convert */
        result_state= result_state & 0x80 ? IDENT_QUOTED : IDENT;
      }
      length= lip->yyLength();
      start= lip->get_ptr();
      if (lip->ignore_space)
      {
        /*
          If we find a space then this can't be an identifier. We notice this
          below by checking start != lex->ptr.
        */
        for (; state_map[(uchar) c] == MY_LEX_SKIP ; c= lip->yyGet())
          ;
      }
      if (start == lip->get_ptr() && c == '.' &&
          ident_map[(uchar) lip->yyPeek()])
	lip->next_state=MY_LEX_IDENT_SEP;
      else
      {					// '(' must follow directly if function
        lip->yyUnget();
	if ((tokval = find_keyword(lip, length, c == '(')))
	{
	  lip->next_state= MY_LEX_START;	// Allow signed numbers
	  return(tokval);		// Was keyword
	}
        lip->yySkip();                  // next state does a unget
      }
      yylval->lex_str=get_token(lip, 0, length);

      /*
         Note: \"SELECT _bla AS 'alias'\"
         _bla should be considered as a IDENT if charset haven't been found.
         So we don't use MYF(MY_WME) with get_charset_by_csname to avoid
         producing an error.
      */

      if (yylval->lex_str.str[0] == '_')
      {
        CHARSET_INFO *cs= get_charset_by_csname(yylval->lex_str.str + 1,
                                                MY_CS_PRIMARY, MYF(0));
        if (cs)
        {
          yylval->charset= cs;
          lip->m_underscore_cs= cs;

          lip->body_utf8_append(lip->m_cpp_text_start,
                                lip->get_cpp_tok_start() + length);
          return(UNDERSCORE_CHARSET);
        }
      }

      lip->body_utf8_append(lip->m_cpp_text_start);

      lip->body_utf8_append_ident(thd, &yylval->lex_str, lip->m_cpp_text_end);

      return(result_state);			// IDENT or IDENT_QUOTED

    case MY_LEX_IDENT_SEP:                  // Found ident and now '.'
      yylval->lex_str.str= (char*) lip->get_ptr();
      yylval->lex_str.length= 1;
      c= lip->yyGet();                          // should be '.'
      lip->next_state= MY_LEX_IDENT_START;      // Next is ident (not keyword)
      if (!ident_map[(uchar) lip->yyPeek()])    // Probably ` or \"
	lip->next_state= MY_LEX_START;
      return((int) c);

    case MY_LEX_NUMBER_IDENT:		// number or ident which num-start
      if (lip->yyGetLast() == '0')
      {
        c= lip->yyGet();
        if (c == 'x')
        {
          while (my_isxdigit(cs,(c = lip->yyGet()))) ;
          if ((lip->yyLength() >= 3) && !ident_map[c])
          {
            /* skip '0x' */
            yylval->lex_str=get_token(lip, 2, lip->yyLength()-2);
            return (HEX_NUM);
          }
          lip->yyUnget();
          state= MY_LEX_IDENT_START;
          break;
        }
        else if (c == 'b')
        {
          while ((c= lip->yyGet()) == '0' || c == '1')
            ;
          if ((lip->yyLength() >= 3) && !ident_map[c])
          {
            /* Skip '0b' */
            yylval->lex_str= get_token(lip, 2, lip->yyLength()-2);
            return (BIN_NUM);
          }
          lip->yyUnget();
          state= MY_LEX_IDENT_START;
          break;
        }
        lip->yyUnget();
      }

      while (my_isdigit(cs, (c = lip->yyGet()))) ;
      if (!ident_map[c])
      {					// Can't be identifier
	state=MY_LEX_INT_OR_REAL;
	break;
      }
      if (c == 'e' || c == 'E')
      {
	// The following test is written this way to allow numbers of type 1e1
        if (my_isdigit(cs,lip->yyPeek()) ||
            (c=(lip->yyGet())) == '+' || c == '-')
	{				// Allow 1E+10
          if (my_isdigit(cs,lip->yyPeek()))     // Number must have digit after sign
	  {
            lip->yySkip();
            while (my_isdigit(cs,lip->yyGet())) ;
            yylval->lex_str=get_token(lip, 0, lip->yyLength());
	    return(FLOAT_NUM);
	  }
	}
        lip->yyUnget();
      }
      // fall through
    case MY_LEX_IDENT_START:			// We come here after '.'
      result_state= IDENT;
#if defined(USE_MB) && defined(USE_MB_IDENT)
      if (use_mb(cs))
      {
	result_state= IDENT_QUOTED;
        while (ident_map[c=lip->yyGet()])
        {
          if (my_mbcharlen(cs, c) > 1)
          {
            int l;
            if ((l = my_ismbchar(cs,
                                 lip->get_ptr() -1,
                                 lip->get_end_of_query())) == 0)
              break;
            lip->skip_binary(l-1);
          }
        }
      }
      else
#endif
      {
        for (result_state=0; ident_map[c= lip->yyGet()]; result_state|= c)
          ;
        /* If there were non-ASCII characters, mark that we must convert */
        result_state= result_state & 0x80 ? IDENT_QUOTED : IDENT;
      }
      if (c == '.' && ident_map[(uchar) lip->yyPeek()])
	lip->next_state=MY_LEX_IDENT_SEP;// Next is '.'

      yylval->lex_str= get_token(lip, 0, lip->yyLength());

      lip->body_utf8_append(lip->m_cpp_text_start);

      lip->body_utf8_append_ident(thd, &yylval->lex_str, lip->m_cpp_text_end);

      return(result_state);

    case MY_LEX_USER_VARIABLE_DELIMITER:	// Found quote char
    {
      uint double_quotes= 0;
      char quote_char= c;                       // Used char
      while ((c=lip->yyGet()))
      {
	int var_length;
	if ((var_length= my_mbcharlen(cs, c)) == 1)
	{
	  if (c == quote_char)
	  {
            if (lip->yyPeek() != quote_char)
	      break;
            c=lip->yyGet();
	    double_quotes++;
	    continue;
	  }
	}
#ifdef USE_MB
        else if (use_mb(cs))
        {
          if ((var_length= my_ismbchar(cs, lip->get_ptr() - 1,
                                       lip->get_end_of_query())))
            lip->skip_binary(var_length-1);
        }
#endif
      }
      if (double_quotes)
	yylval->lex_str=get_quoted_token(lip, 1,
                                         lip->yyLength() - double_quotes -1,
					 quote_char);
      else
        yylval->lex_str=get_token(lip, 1, lip->yyLength() -1);
      if (c == quote_char)
        lip->yySkip();                  // Skip end `
      lip->next_state= MY_LEX_START;

      lip->body_utf8_append(lip->m_cpp_text_start);

      lip->body_utf8_append_ident(thd, &yylval->lex_str, lip->m_cpp_text_end);

      return(IDENT_QUOTED);
    }
    case MY_LEX_INT_OR_REAL:		// Complete int or incomplete real
      if (c != '.')
      {					// Found complete integer number.
        yylval->lex_str=get_token(lip, 0, lip->yyLength());
	return int_token(yylval->lex_str.str, (uint) yylval->lex_str.length);
      }
      // fall through
    case MY_LEX_REAL:			// Incomplete real number
      while (my_isdigit(cs,c = lip->yyGet())) ;

      if (c == 'e' || c == 'E')
      {
        c = lip->yyGet();
	if (c == '-' || c == '+')
          c = lip->yyGet();                     // Skip sign
	if (!my_isdigit(cs,c))
	{				// No digit after sign
	  state= MY_LEX_CHAR;
	  break;
	}
        while (my_isdigit(cs,lip->yyGet())) ;
        yylval->lex_str=get_token(lip, 0, lip->yyLength());
	return(FLOAT_NUM);
      }
      yylval->lex_str=get_token(lip, 0, lip->yyLength());
      return(DECIMAL_NUM);

    case MY_LEX_HEX_NUMBER:		// Found x'hexstring'
      lip->yySkip();                    // Accept opening '
      while (my_isxdigit(cs, (c= lip->yyGet()))) ;
      if (c != '\\'')
        return(ABORT_SYM);              // Illegal hex constant
      lip->yySkip();                    // Accept closing '
      length= lip->yyLength();          // Length of hexnum+3
      if ((length % 2) == 0)
        return(ABORT_SYM);              // odd number of hex digits
      yylval->lex_str=get_token(lip,
                                2,          // skip x'
                                length-3);  // don't count x' and last '
      return HEX_STRING;

    case MY_LEX_BIN_NUMBER:           // Found b'bin-string'
      lip->yySkip();                  // Accept opening '
      while ((c= lip->yyGet()) == '0' || c == '1')
        ;
      if (c != '\\'')
        return(ABORT_SYM);            // Illegal hex constant
      lip->yySkip();                  // Accept closing '
      length= lip->yyLength();        // Length of bin-num + 3
      yylval->lex_str= get_token(lip,
                                 2,         // skip b'
                                 length-3); // don't count b' and last '
      return (BIN_NUM);

    case MY_LEX_CMP_OP:			// Incomplete comparison operator
      if (state_map[(uchar) lip->yyPeek()] == MY_LEX_CMP_OP ||
          state_map[(uchar) lip->yyPeek()] == MY_LEX_LONG_CMP_OP)
        lip->yySkip();
      if ((tokval = find_keyword(lip, lip->yyLength() + 1, 0)))
      {
	lip->next_state= MY_LEX_START;	// Allow signed numbers
	return(tokval);
      }
      state = MY_LEX_CHAR;		// Something fishy found
      break;

    case MY_LEX_LONG_CMP_OP:		// Incomplete comparison operator
      if (state_map[(uchar) lip->yyPeek()] == MY_LEX_CMP_OP ||
          state_map[(uchar) lip->yyPeek()] == MY_LEX_LONG_CMP_OP)
      {
        lip->yySkip();
        if (state_map[(uchar) lip->yyPeek()] == MY_LEX_CMP_OP)
          lip->yySkip();
      }
      if ((tokval = find_keyword(lip, lip->yyLength() + 1, 0)))
      {
	lip->next_state= MY_LEX_START;	// Found long op
	return(tokval);
      }
      state = MY_LEX_CHAR;		// Something fishy found
      break;

    case MY_LEX_BOOL:
      if (c != lip->yyPeek())
      {
	state=MY_LEX_CHAR;
	break;
      }
      lip->yySkip();
      tokval = find_keyword(lip,2,0);	// Is a bool operator
      lip->next_state= MY_LEX_START;	// Allow signed numbers
      return(tokval);

    case MY_LEX_STRING_OR_DELIMITER:
      if (thd->variables.sql_mode & MODE_ANSI_QUOTES)
      {
	state= MY_LEX_USER_VARIABLE_DELIMITER;
	break;
      }
      /* \" used for strings */
    case MY_LEX_STRING:			// Incomplete text string
    {
      uint sep;
      if (lip->get_text(&yylval->lex_str, (sep= lip->yyGetLast()), 1, 1))
      {
	state= MY_LEX_CHAR;		// Read char by char
	break;
      }
      CHARSET_INFO *strcs= lip->m_underscore_cs ? lip->m_underscore_cs : cs;
      lip->body_utf8_append(lip->m_cpp_text_start);

      lip->body_utf8_append_escape(thd, &yylval->lex_str, strcs,
                                   lip->m_cpp_text_end, sep);
      lip->m_underscore_cs= NULL;

      lex->text_string_is_7bit= (lip->tok_bitmap & 0x80) ? 0 : 1;
      return(TEXT_STRING);
    }
    case MY_LEX_COMMENT:			//  Comment
      lex->select_lex.options|= OPTION_FOUND_COMMENT;
      while ((c = lip->yyGet()) != '\\n' && c) ;
      lip->yyUnget();                   // Safety against eof
      state = MY_LEX_START;		// Try again
      break;
    case MY_LEX_LONG_COMMENT:		/* Long C comment? */
      if (lip->yyPeek() != '*')
      {
	state=MY_LEX_CHAR;		// Probable division
	break;
      }
      lex->select_lex.options|= OPTION_FOUND_COMMENT;
      /* Reject '/' '*', since we might need to turn off the echo */
      lip->yyUnget();

      lip->save_in_comment_state();

      if (lip->yyPeekn(2) == '!' ||
          (lip->yyPeekn(2) == 'M' && lip->yyPeekn(3) == '!'))
      {
        bool maria_comment_syntax= lip->yyPeekn(2) == 'M';
        lip->in_comment= DISCARD_COMMENT;
        /* Accept '/' '*' '!', but do not keep this marker. */
        lip->set_echo(FALSE);
        lip->yySkipn(maria_comment_syntax ? 4 : 3);

        /*
          The special comment format is very strict:
          '/' '*' '!', followed by an optional 'M' and exactly
          1-2 digits (major), 2 digits (minor), then 2 digits (dot).
          32302  -> 3.23.02
          50032  -> 5.0.32
          50114  -> 5.1.14
          100000 -> 10.0.0
        */
        if (  my_isdigit(cs, lip->yyPeekn(0))
           && my_isdigit(cs, lip->yyPeekn(1))
           && my_isdigit(cs, lip->yyPeekn(2))
           && my_isdigit(cs, lip->yyPeekn(3))
           && my_isdigit(cs, lip->yyPeekn(4))
           )
        {
          ulong version;
          uint length= 5;
          char *end_ptr= (char*) lip->get_ptr()+length;
          int error;
          if (my_isdigit(cs, lip->yyPeekn(5)))
          {
            end_ptr++;                          // 6 digit number
            length++;
          }

          version= (ulong) my_strtoll10(lip->get_ptr(), &end_ptr, &error);

          /*
            MySQL-5.7 has new features and might have new SQL syntax that
            MariaDB-10.0 does not understand. Ignore all versioned comments
            with MySQL versions in the range 50700-999999, but
            do not ignore MariaDB specific comments for the same versions.
          */ 
          if (version <= MYSQL_VERSION_ID &&
              (version < 50700 || version > 99999 || maria_comment_syntax))
          {
            /* Accept 'M' 'm' 'm' 'd' 'd' */
            lip->yySkipn(length);
            /* Expand the content of the special comment as real code */
            lip->set_echo(TRUE);
            state=MY_LEX_START;
            break;  /* Do not treat contents as a comment.  */
          }
          else
          {
#ifdef WITH_WSREP
	    if (WSREP(thd) && version == 99997 && thd->wsrep_exec_mode == LOCAL_STATE)
	    {
	      WSREP_DEBUG(\"consistency check: %s\", thd->query());
	      thd->wsrep_consistency_check= CONSISTENCY_CHECK_DECLARED;
	      lip->yySkipn(5);
	      lip->set_echo(TRUE);
	      state=MY_LEX_START;
	      break;  /* Do not treat contents as a comment.  */
	    }
#endif /* WITH_WSREP */
            /*
              Patch and skip the conditional comment to avoid it
              being propagated infinitely (eg. to a slave).
            */
            char *pcom= lip->yyUnput(' ');
            comment_closed= ! consume_comment(lip, 1);
            if (! comment_closed)
            {
              *pcom= '!';
            }
            /* version allowed to have one level of comment inside. */
          }
        }
        else
        {
          /* Not a version comment. */
          state=MY_LEX_START;
          lip->set_echo(TRUE);
          break;
        }
      }
      else
      {
        lip->in_comment= PRESERVE_COMMENT;
        lip->yySkip();                  // Accept /
        lip->yySkip();                  // Accept *
        comment_closed= ! consume_comment(lip, 0);
        /* regular comments can have zero comments inside. */
      }
      /*
        Discard:
        - regular '/' '*' comments,
        - special comments '/' '*' '!' for a future version,
        by scanning until we find a closing '*' '/' marker.

        Nesting regular comments isn't allowed.  The first 
        '*' '/' returns the parser to the previous state.

        /#!VERSI oned containing /# regular #/ is allowed #/

		Inside one versioned comment, another versioned comment
		is treated as a regular discardable comment.  It gets
		no special parsing.
      */

      /* Unbalanced comments with a missing '*' '/' are a syntax error */
      if (! comment_closed)
        return (ABORT_SYM);
      state = MY_LEX_START;             // Try again
      lip->restore_in_comment_state();
      break;
    case MY_LEX_END_LONG_COMMENT:
      if ((lip->in_comment != NO_COMMENT) && lip->yyPeek() == '/')
      {
        /* Reject '*' '/' */
        lip->yyUnget();
        /* Accept '*' '/', with the proper echo */
        lip->set_echo(lip->in_comment == PRESERVE_COMMENT);
        lip->yySkipn(2);
        /* And start recording the tokens again */
        lip->set_echo(TRUE);
        lip->in_comment=NO_COMMENT;
        state=MY_LEX_START;
      }
      else
	state=MY_LEX_CHAR;		// Return '*'
      break;
    case MY_LEX_SET_VAR:		// Check if ':='
      if (lip->yyPeek() != '=')
      {
	state=MY_LEX_CHAR;		// Return ':'
	break;
      }
      lip->yySkip();
      return (SET_VAR);
    case MY_LEX_SEMICOLON:			// optional line terminator
      state= MY_LEX_CHAR;               // Return ';'
      break;
    case MY_LEX_EOL:
      if (lip->eof())
      {
        lip->yyUnget();                 // Reject the last '\\0'
        lip->set_echo(FALSE);
        lip->yySkip();
        lip->set_echo(TRUE);
        /* Unbalanced comments with a missing '*' '/' are a syntax error */
        if (lip->in_comment != NO_COMMENT)
          return (ABORT_SYM);
        lip->next_state=MY_LEX_END;     // Mark for next loop
        return(END_OF_INPUT);
      }
      state=MY_LEX_CHAR;
      break;
    case MY_LEX_END:
      lip->next_state=MY_LEX_END;
      return(0);			// We found end of input last time

      /* Actually real shouldn't start with . but allow them anyhow */
    case MY_LEX_REAL_OR_POINT:
      if (my_isdigit(cs,lip->yyPeek()))
	state = MY_LEX_REAL;		// Real
      else
      {
	state= MY_LEX_IDENT_SEP;	// return '.'
        lip->yyUnget();                 // Put back '.'
      }
      break;
    case MY_LEX_USER_END:		// end '@' of user@hostname
      switch (state_map[(uchar) lip->yyPeek()]) {
      case MY_LEX_STRING:
      case MY_LEX_USER_VARIABLE_DELIMITER:
      case MY_LEX_STRING_OR_DELIMITER:
	break;
      case MY_LEX_USER_END:
	lip->next_state=MY_LEX_SYSTEM_VAR;
	break;
      default:
	lip->next_state=MY_LEX_HOSTNAME;
	break;
      }
      yylval->lex_str.str=(char*) lip->get_ptr();
      yylval->lex_str.length=1;
      return((int) '@');
    case MY_LEX_HOSTNAME:		// end '@' of user@hostname
      for (c=lip->yyGet() ;
	   my_isalnum(cs,c) || c == '.' || c == '_' ||  c == '$';
           c= lip->yyGet()) ;
      yylval->lex_str=get_token(lip, 0, lip->yyLength());
      return(LEX_HOSTNAME);
    case MY_LEX_SYSTEM_VAR:
      yylval->lex_str.str=(char*) lip->get_ptr();
      yylval->lex_str.length=1;
      lip->yySkip();                                    // Skip '@'
      lip->next_state= (state_map[(uchar) lip->yyPeek()] ==
			MY_LEX_USER_VARIABLE_DELIMITER ?
			MY_LEX_OPERATOR_OR_IDENT :
			MY_LEX_IDENT_OR_KEYWORD);
      return((int) '@');
    case MY_LEX_IDENT_OR_KEYWORD:
      /*
	We come here when we have found two '@' in a row.
	We should now be able to handle:
	[(global | local | session) .]variable_name
      */

      for (result_state= 0; ident_map[c= lip->yyGet()]; result_state|= c)
        ;
      /* If there were non-ASCII characters, mark that we must convert */
      result_state= result_state & 0x80 ? IDENT_QUOTED : IDENT;

      if (c == '.')
	lip->next_state=MY_LEX_IDENT_SEP;
      length= lip->yyLength();
      if (length == 0)
        return(ABORT_SYM);              // Names must be nonempty.
      if ((tokval= find_keyword(lip, length,0)))
      {
        lip->yyUnget();                         // Put back 'c'
	return(tokval);				// Was keyword
      }
      yylval->lex_str=get_token(lip, 0, length);

      lip->body_utf8_append(lip->m_cpp_text_start);

      lip->body_utf8_append_ident(thd, &yylval->lex_str, lip->m_cpp_text_end);

      return(result_state);
    }
  }
}


void trim_whitespace(CHARSET_INFO *cs, LEX_STRING *str)
{
  /*
    TODO:
    This code assumes that there are no multi-bytes characters
    that can be considered white-space.
  */

  while ((str->length > 0) && (my_isspace(cs, str->str[0])))
  {
    str->length --;
    str->str ++;
  }

  /*
    FIXME:
    Also, parsing backward is not safe with multi bytes characters
  */
  while ((str->length > 0) && (my_isspace(cs, str->str[str->length-1])))
  {
    str->length --;
  }
}


/*
  st_select_lex structures initialisations
*/

void st_select_lex_node::init_query()
{
  options= 0;
  sql_cache= SQL_CACHE_UNSPECIFIED;
  linkage= UNSPECIFIED_TYPE;
  no_table_names_allowed= 0;
  uncacheable= 0;
}

void st_select_lex_node::init_select()
{
}

void st_select_lex_unit::init_query()
{
  st_select_lex_node::init_query();
  linkage= GLOBAL_OPTIONS_TYPE;
  select_limit_cnt= HA_POS_ERROR;
  offset_limit_cnt= 0;
  union_distinct= 0;
  prepared= optimized= executed= 0;
  item= 0;
  union_result= 0;
  table= 0;
  fake_select_lex= 0;
  saved_fake_select_lex= 0;
  cleaned= 0;
  item_list.empty();
  describe= 0;
  found_rows_for_union= 0;
  insert_table_with_stored_vcol= 0;
  derived= 0;
}

void st_select_lex::init_query()
{
  st_select_lex_node::init_query();
  table_list.empty();
  top_join_list.empty();
  join_list= &top_join_list;
  embedding= 0;
  leaf_tables_prep.empty();
  leaf_tables.empty();
  item_list.empty();
  join= 0;
  having= prep_having= where= prep_where= 0;
  olap= UNSPECIFIED_OLAP_TYPE;
  having_fix_field= 0;
  context.select_lex= this;
  context.init();
  /*
    Add the name resolution context of the current (sub)query to the
    stack of contexts for the whole query.
    TODO:
    push_context may return an error if there is no memory for a new
    element in the stack, however this method has no return value,
    thus push_context should be moved to a place where query
    initialization is checked for failure.
  */
  parent_lex->push_context(&context, parent_lex->thd->mem_root);
  cond_count= between_count= with_wild= 0;
  max_equal_elems= 0;
  ref_pointer_array= 0;
  ref_pointer_array_size= 0;
  select_n_where_fields= 0;
  select_n_reserved= 0;
  select_n_having_items= 0;
  n_sum_items= 0;
  n_child_sum_items= 0;
  subquery_in_having= explicit_limit= 0;
  is_item_list_lookup= 0;
  first_execution= 1;
  first_natural_join_processing= 1;
  first_cond_optimization= 1;
  parsing_place= NO_MATTER;
  exclude_from_table_unique_test= no_wrap_view_item= FALSE;
  nest_level= 0;
  link_next= 0;
  prep_leaf_list_state= UNINIT;
  have_merged_subqueries= FALSE;
  bzero((char*) expr_cache_may_be_used, sizeof(expr_cache_may_be_used));
  m_non_agg_field_used= false;
  m_agg_func_used= false;
}

void st_select_lex::init_select()
{
  st_select_lex_node::init_select();
  sj_nests.empty();
  sj_subselects.empty();
  group_list.empty();
  if (group_list_ptrs)
    group_list_ptrs->clear();
  type= db= 0;
  having= 0;
  table_join_options= 0;
  in_sum_expr= with_wild= 0;
  options= 0;
  sql_cache= SQL_CACHE_UNSPECIFIED;
  interval_list.empty();
  ftfunc_list_alloc.empty();
  inner_sum_func_list= 0;
  ftfunc_list= &ftfunc_list_alloc;
  linkage= UNSPECIFIED_TYPE;
  order_list.elements= 0;
  order_list.first= 0;
  order_list.next= &order_list.first;
  /* Set limit and offset to default values */
  select_limit= 0;      /* denotes the default limit = HA_POS_ERROR */
  offset_limit= 0;      /* denotes the default offset = 0 */
  with_sum_func= 0;
  is_correlated= 0;
  cur_pos_in_select_list= UNDEF_POS;
  cond_value= having_value= Item::COND_UNDEF;
  inner_refs_list.empty();
  insert_tables= 0;
  merged_into= 0;
  m_non_agg_field_used= false;
  m_agg_func_used= false;
  name_visibility_map= 0;
  join= 0;
}

/*
  st_select_lex structures linking
*/

/* include on level down */
void st_select_lex_node::include_down(st_select_lex_node *upper)
{
  if ((next= upper->slave))
    next->prev= &next;
  prev= &upper->slave;
  upper->slave= this;
  master= upper;
  slave= 0;
}


void st_select_lex_node::add_slave(st_select_lex_node *slave_arg)
{
  for (; slave; slave= slave->next)
    if (slave == slave_arg)
      return;

  if (slave)
  {
    st_select_lex_node *slave_arg_slave= slave_arg->slave;
    /* Insert in the front of list of slaves if any. */
    slave_arg->include_neighbour(slave);
    /* include_neighbour() sets slave_arg->slave=0, restore it. */
    slave_arg->slave= slave_arg_slave;
    /* Count on include_neighbour() setting the master. */
    DBUG_ASSERT(slave_arg->master == this);
  }
  else
  {
    slave= slave_arg;
    slave_arg->master= this;
  }
}


/*
  include on level down (but do not link)

  SYNOPSYS
    st_select_lex_node::include_standalone()
    upper - reference on node underr which this node should be included
    ref - references on reference on this node
*/
void st_select_lex_node::include_standalone(st_select_lex_node *upper,
					    st_select_lex_node **ref)
{
  next= 0;
  prev= ref;
  master= upper;
  slave= 0;
}

/* include neighbour (on same level) */
void st_select_lex_node::include_neighbour(st_select_lex_node *before)
{
  if ((next= before->next))
    next->prev= &next;
  prev= &before->next;
  before->next= this;
  master= before->master;
  slave= 0;
}

/* including in global SELECT_LEX list */
void st_select_lex_node::include_global(st_select_lex_node **plink)
{
  if ((link_next= *plink))
    link_next->link_prev= &link_next;
  link_prev= plink;
  *plink= this;
}

//excluding from global list (internal function)
void st_select_lex_node::fast_exclude()
{
  if (link_prev)
  {
    if ((*link_prev= link_next))
      link_next->link_prev= link_prev;
  }
  // Remove slave structure
  for (; slave; slave= slave->next)
    slave->fast_exclude();
  
}


/*
  Exclude a node from the tree lex structure, but leave it in the global
  list of nodes.
*/

void st_select_lex_node::exclude_from_tree()
{
  if ((*prev= next))
    next->prev= prev;
}


/*
  Exclude select_lex structure (except first (first select can't be
  deleted, because it is most upper select))
*/
void st_select_lex_node::exclude()
{
  /* exclude from global list */
  fast_exclude();
  /* exclude from other structures */
  exclude_from_tree();
  /* 
     We do not need following statements, because prev pointer of first 
     list element point to master->slave
     if (master->slave == this)
       master->slave= next;
  */
}


/*
  Exclude level of current unit from tree of SELECTs

  SYNOPSYS
    st_select_lex_unit::exclude_level()

  NOTE: units which belong to current will be brought up on level of
  currernt unit 
*/
void st_select_lex_unit::exclude_level()
{
  SELECT_LEX_UNIT *units= 0, **units_last= &units;
  for (SELECT_LEX *sl= first_select(); sl; sl= sl->next_select())
  {
    // unlink current level from global SELECTs list
    if (sl->link_prev && (*sl->link_prev= sl->link_next))
      sl->link_next->link_prev= sl->link_prev;

    // bring up underlay levels
    SELECT_LEX_UNIT **last= 0;
    for (SELECT_LEX_UNIT *u= sl->first_inner_unit(); u; u= u->next_unit())
    {
      u->master= master;
      last= (SELECT_LEX_UNIT**)&(u->next);
    }
    if (last)
    {
      (*units_last)= sl->first_inner_unit();
      units_last= last;
    }
  }
  if (units)
  {
    // include brought up levels in place of current
    (*prev)= units;
    (*units_last)= (SELECT_LEX_UNIT*)next;
    if (next)
      next->prev= (SELECT_LEX_NODE**)units_last;
    units->prev= prev;
  }
  else
  {
    // exclude currect unit from list of nodes
    (*prev)= next;
    if (next)
      next->prev= prev;
  }
}


/*
  Exclude subtree of current unit from tree of SELECTs

  SYNOPSYS
    st_select_lex_unit::exclude_tree()
*/
void st_select_lex_unit::exclude_tree()
{
  for (SELECT_LEX *sl= first_select(); sl; sl= sl->next_select())
  {
    // unlink current level from global SELECTs list
    if (sl->link_prev && (*sl->link_prev= sl->link_next))
      sl->link_next->link_prev= sl->link_prev;

    // unlink underlay levels
    for (SELECT_LEX_UNIT *u= sl->first_inner_unit(); u; u= u->next_unit())
    {
      u->exclude_level();
    }
  }
  // exclude currect unit from list of nodes
  (*prev)= next;
  if (next)
    next->prev= prev;
}


/*
  st_select_lex_node::mark_as_dependent mark all st_select_lex struct from 
  this to 'last' as dependent

  SYNOPSIS
    last - pointer to last st_select_lex struct, before which all 
           st_select_lex have to be marked as dependent

  NOTE
    'last' should be reachable from this st_select_lex_node
*/

bool st_select_lex::mark_as_dependent(THD *thd, st_select_lex *last,
                                      Item *dependency)
{

  DBUG_ASSERT(this != last);

  /*
    Mark all selects from resolved to 1 before select where was
    found table as depended (of select where was found table)
  */
  SELECT_LEX *s= this;
  do
  {
    if (!(s->uncacheable & UNCACHEABLE_DEPENDENT_GENERATED))
    {
      // Select is dependent of outer select
      s->uncacheable= (s->uncacheable & ~UNCACHEABLE_UNITED) |
                       UNCACHEABLE_DEPENDENT_GENERATED;
      SELECT_LEX_UNIT *munit= s->master_unit();
      munit->uncacheable= (munit->uncacheable & ~UNCACHEABLE_UNITED) |
                       UNCACHEABLE_DEPENDENT_GENERATED;
      for (SELECT_LEX *sl= munit->first_select(); sl ; sl= sl->next_select())
      {
        if (sl != s &&
            !(sl->uncacheable & (UNCACHEABLE_DEPENDENT_GENERATED |
                                 UNCACHEABLE_UNITED)))
          sl->uncacheable|= UNCACHEABLE_UNITED;
      }
    }

    Item_subselect *subquery_expr= s->master_unit()->item;
    if (subquery_expr && subquery_expr->mark_as_dependent(thd, last, 
                                                          dependency))
      return TRUE;
  } while ((s= s->outer_select()) != last && s != 0);
  is_correlated= TRUE;
  this->master_unit()->item->is_correlated= TRUE;
  return FALSE;
}

bool st_select_lex_node::set_braces(bool value)      { return 1; }
bool st_select_lex_node::inc_in_sum_expr()           { return 1; }
uint st_select_lex_node::get_in_sum_expr()           { return 0; }
TABLE_LIST* st_select_lex_node::get_table_list()     { return 0; }
List<Item>* st_select_lex_node::get_item_list()      { return 0; }
TABLE_LIST *st_select_lex_node::add_table_to_list(THD *thd, Table_ident *table,
						  LEX_STRING *alias,
						  ulong table_join_options,
						  thr_lock_type flags,
                                                  enum_mdl_type mdl_type,
						  List<Index_hint> *hints,
                                                  List<String> *partition_names,
                                                  LEX_STRING *option)
{
  return 0;
}
ulong st_select_lex_node::get_table_join_options()
{
  return 0;
}

/*
  prohibit using LIMIT clause
*/
bool st_select_lex::test_limit()
{
  if (select_limit != 0)
  {
    my_error(ER_NOT_SUPPORTED_YET, MYF(0),
             \"LIMIT & IN/ALL/ANY/SOME subquery\");
    return(1);
  }
  return(0);
}



st_select_lex* st_select_lex_unit::outer_select()
{
  return (st_select_lex*) master;
}


ha_rows st_select_lex::get_offset()
{
  ulonglong val= 0;

  if (offset_limit)
  {
    // see comment for st_select_lex::get_limit()
    bool fix_fields_successful= true;
    if (!offset_limit->fixed)
    {
      fix_fields_successful= !offset_limit->fix_fields(master_unit()->thd,
                                                       NULL);

      DBUG_ASSERT(fix_fields_successful);
    }
    val= fix_fields_successful ? offset_limit->val_uint() : HA_POS_ERROR;
  }

  return (ha_rows)val;
}


ha_rows st_select_lex::get_limit()
{
  ulonglong val= HA_POS_ERROR;

  if (select_limit)
  {
    /*
      fix_fields() has not been called for select_limit. That's due to the
      historical reasons -- this item could be only of type Item_int, and
      Item_int does not require fix_fields(). Thus, fix_fields() was never
      called for select_limit.

      Some time ago, Item_splocal was also allowed for LIMIT / OFFSET clauses.
      However, the fix_fields() behavior was not updated, which led to a crash
      in some cases.

      There is no single place where to call fix_fields() for LIMIT / OFFSET
      items during the fix-fields-phase. Thus, for the sake of readability,
      it was decided to do it here, on the evaluation phase (which is a
      violation of design, but we chose the lesser of two evils).

      We can call fix_fields() here, because select_limit can be of two
      types only: Item_int and Item_splocal. Item_int::fix_fields() is trivial,
      and Item_splocal::fix_fields() (or rather Item_sp_variable::fix_fields())
      has the following properties:
        1) it does not affect other items;
        2) it does not fail.

      Nevertheless DBUG_ASSERT was added to catch future changes in
      fix_fields() implementation. Also added runtime check against a result
      of fix_fields() in order to handle error condition in non-debug build.
    */
    bool fix_fields_successful= true;
    if (!select_limit->fixed)
    {
      fix_fields_successful= !select_limit->fix_fields(master_unit()->thd,
                                                       NULL);

      DBUG_ASSERT(fix_fields_successful);
    }
    val= fix_fields_successful ? select_limit->val_uint() : HA_POS_ERROR;
  }

  return (ha_rows)val;
}


bool st_select_lex::add_order_to_list(THD *thd, Item *item, bool asc)
{
  return add_to_list(thd, order_list, item, asc);
}


bool st_select_lex::add_gorder_to_list(THD *thd, Item *item, bool asc)
{
  return add_to_list(thd, gorder_list, item, asc);
}


bool st_select_lex::add_item_to_list(THD *thd, Item *item)
{
  DBUG_ENTER(\"st_select_lex::add_item_to_list\");
  DBUG_PRINT(\"info\", (\"Item: 0x%lx\", (long) item));
  DBUG_RETURN(item_list.push_back(item, thd->mem_root));
}


bool st_select_lex::add_group_to_list(THD *thd, Item *item, bool asc)
{
  return add_to_list(thd, group_list, item, asc);
}


bool st_select_lex::add_ftfunc_to_list(THD *thd, Item_func_match *func)
{
  return !func || ftfunc_list->push_back(func, thd->mem_root); // end of memory?
}


st_select_lex* st_select_lex::outer_select()
{
  return (st_select_lex*) master->get_master();
}


bool st_select_lex::set_braces(bool value)
{
  braces= value;
  return 0; 
}


bool st_select_lex::inc_in_sum_expr()
{
  in_sum_expr++;
  return 0;
}


uint st_select_lex::get_in_sum_expr()
{
  return in_sum_expr;
}


TABLE_LIST* st_select_lex::get_table_list()
{
  return table_list.first;
}

List<Item>* st_select_lex::get_item_list()
{
  return &item_list;
}

ulong st_select_lex::get_table_join_options()
{
  return table_join_options;
}


bool st_select_lex::setup_ref_array(THD *thd, uint order_group_num)
{
  // find_order_in_list() may need some extra space, so multiply by two.
  order_group_num*= 2;

  /*
    We have to create array in prepared statement memory if it is a
    prepared statement
  */
  Query_arena *arena= thd->stmt_arena;
  const uint n_elems= (n_sum_items +
                       n_child_sum_items +
                       item_list.elements +
                       select_n_reserved +
                       select_n_having_items +
                       select_n_where_fields +
                       order_group_num) * 5;
  if (ref_pointer_array != NULL)
  {
    /*
      We need to take 'n_sum_items' into account when allocating the array,
      and this may actually increase during the optimization phase due to
      MIN/MAX rewrite in Item_in_subselect::single_value_transformer.
      In the usual case we can reuse the array from the prepare phase.
      If we need a bigger array, we must allocate a new one.
    */
    if (ref_pointer_array_size >= n_elems)
    {
      DBUG_PRINT(\"info\", (\"reusing old ref_array\"));
      return false;
    }
  }
  ref_pointer_array= static_cast<Item**>(arena->alloc(sizeof(Item*) * n_elems));
  if (ref_pointer_array != NULL)
    ref_pointer_array_size= n_elems;

  return ref_pointer_array == NULL;
}


void st_select_lex_unit::print(String *str, enum_query_type query_type)
{
  bool union_all= !union_distinct;
  for (SELECT_LEX *sl= first_select(); sl; sl= sl->next_select())
  {
    if (sl != first_select())
    {
      str->append(STRING_WITH_LEN(\" union \"));
      if (union_all)
	str->append(STRING_WITH_LEN(\"all \"));
      else if (union_distinct == sl)
        union_all= TRUE;
    }
    if (sl->braces)
      str->append('(');
    sl->print(thd, str, query_type);
    if (sl->braces)
      str->append(')');
  }
  if (fake_select_lex)
  {
    if (fake_select_lex->order_list.elements)
    {
      str->append(STRING_WITH_LEN(\" order by \"));
      fake_select_lex->print_order(str,
        fake_select_lex->order_list.first,
        query_type);
    }
    fake_select_lex->print_limit(thd, str, query_type);
  }
  else if (saved_fake_select_lex)
    saved_fake_select_lex->print_limit(thd, str, query_type);
}


void st_select_lex::print_order(String *str,
                                ORDER *order,
                                enum_query_type query_type)
{
  for (; order; order= order->next)
  {
    if (order->counter_used)
    {
      char buffer[20];
      size_t length= my_snprintf(buffer, 20, \"%d\", order->counter);
      str->append(buffer, (uint) length);
    }
    else
    {
      /* replace numeric reference with equivalent for ORDER constant */
      if (order->item[0]->type() == Item::INT_ITEM &&
          order->item[0]->basic_const_item())
      {
        /* make it expression instead of integer constant */
        str->append(STRING_WITH_LEN(\"''\"));
      }
      else
        (*order->item)->print(str, query_type);
    }
    if (!order->asc)
      str->append(STRING_WITH_LEN(\" desc\"));
    if (order->next)
      str->append(',');
  }
}
 

void st_select_lex::print_limit(THD *thd,
                                String *str,
                                enum_query_type query_type)
{
  SELECT_LEX_UNIT *unit= master_unit();
  Item_subselect *item= unit->item;

  if (item && unit->global_parameters() == this)
  {
    Item_subselect::subs_type subs_type= item->substype();
    if (subs_type == Item_subselect::EXISTS_SUBS ||
        subs_type == Item_subselect::IN_SUBS ||
        subs_type == Item_subselect::ALL_SUBS)
    {
      return;
    }
  }
  if (explicit_limit)
  {
    str->append(STRING_WITH_LEN(\" limit \"));
    if (offset_limit)
    {
      offset_limit->print(str, query_type);
      str->append(',');
    }
    select_limit->print(str, query_type);
  }
}


/**
  @brief Restore the LEX and THD in case of a parse error.

  This is a clean up call that is invoked by the Bison generated
  parser before returning an error from MYSQLparse. If your
  semantic actions manipulate with the global thread state (which
  is a very bad practice and should not normally be employed) and
  need a clean-up in case of error, and you can not use %destructor
  rule in the grammar file itself, this function should be used
  to implement the clean up.
*/

void LEX::cleanup_lex_after_parse_error(THD *thd)
{
  /*
    Delete sphead for the side effect of restoring of the original
    LEX state, thd->lex, thd->mem_root and thd->free_list if they
    were replaced when parsing stored procedure statements.  We
    will never use sphead object after a parse error, so it's okay
    to delete it only for the sake of the side effect.
    TODO: make this functionality explicit in sp_head class.
    Sic: we must nullify the member of the main lex, not the
    current one that will be thrown away
  */
  if (thd->lex->sphead)
  {
    thd->lex->sphead->restore_thd_mem_root(thd);
    delete thd->lex->sphead;
    thd->lex->sphead= NULL;
  }
}

/*
  Initialize (or reset) Query_tables_list object.

  SYNOPSIS
    reset_query_tables_list()
      init  TRUE  - we should perform full initialization of object with
                    allocating needed memory
            FALSE - object is already initialized so we should only reset
                    its state so it can be used for parsing/processing
                    of new statement

  DESCRIPTION
    This method initializes Query_tables_list so it can be used as part
    of LEX object for parsing/processing of statement. One can also use
    this method to reset state of already initialized Query_tables_list
    so it can be used for processing of new statement.
*/

void Query_tables_list::reset_query_tables_list(bool init)
{
  sql_command= SQLCOM_END;
  if (!init && query_tables)
  {
    TABLE_LIST *table= query_tables;
    for (;;)
    {
      delete table->view;
      if (query_tables_last == &table->next_global ||
          !(table= table->next_global))
        break;
    }
  }
  query_tables= 0;
  query_tables_last= &query_tables;
  query_tables_own_last= 0;
  if (init)
  {
    /*
      We delay real initialization of hash (and therefore related
      memory allocation) until first insertion into this hash.
    */
    my_hash_clear(&sroutines);
  }
  else if (sroutines.records)
  {
    /* Non-zero sroutines.records means that hash was initialized. */
    my_hash_reset(&sroutines);
  }
  sroutines_list.empty();
  sroutines_list_own_last= sroutines_list.next;
  sroutines_list_own_elements= 0;
  binlog_stmt_flags= 0;
  stmt_accessed_table_flag= 0;
}


/*
  Destroy Query_tables_list object with freeing all resources used by it.

  SYNOPSIS
    destroy_query_tables_list()
*/

void Query_tables_list::destroy_query_tables_list()
{
  my_hash_free(&sroutines);
}


/*
  Initialize LEX object.

  SYNOPSIS
    LEX::LEX()

  NOTE
    LEX object initialized with this constructor can be used as part of
    THD object for which one can safely call open_tables(), lock_tables()
    and close_thread_tables() functions. But it is not yet ready for
    statement parsing. On should use lex_start() function to prepare LEX
    for this.
*/

LEX::LEX()
  : explain(NULL),
    result(0), arena_for_set_stmt(0), mem_root_for_set_stmt(0),
    option_type(OPT_DEFAULT), context_analysis_only(0), sphead(0),
    is_lex_started(0), limit_rows_examined_cnt(ULONGLONG_MAX)
{

  init_dynamic_array2(&plugins, sizeof(plugin_ref), plugins_static_buffer,
                      INITIAL_LEX_PLUGIN_LIST_SIZE,
                      INITIAL_LEX_PLUGIN_LIST_SIZE, 0);
  reset_query_tables_list(TRUE);
  mi.init();
}


/*
  Check whether the merging algorithm can be used on this VIEW

  SYNOPSIS
    LEX::can_be_merged()

  DESCRIPTION
    We can apply merge algorithm if it is single SELECT view  with
    subqueries only in WHERE clause (we do not count SELECTs of underlying
    views, and second level subqueries) and we have not grpouping, ordering,
    HAVING clause, aggregate functions, DISTINCT clause, LIMIT clause and
    several underlying tables.

  RETURN
    FALSE - only temporary table algorithm can be used
    TRUE  - merge algorithm can be used
*/

bool LEX::can_be_merged()
{
  // TODO: do not forget implement case when select_lex.table_list.elements==0

  /* find non VIEW subqueries/unions */
  bool selects_allow_merge= (select_lex.next_select() == 0 &&
                             !(select_lex.uncacheable &
                               UNCACHEABLE_RAND));
  if (selects_allow_merge)
  {
    for (SELECT_LEX_UNIT *tmp_unit= select_lex.first_inner_unit();
         tmp_unit;
         tmp_unit= tmp_unit->next_unit())
    {
      if (tmp_unit->first_select()->parent_lex == this &&
          (tmp_unit->item == 0 ||
           (tmp_unit->item->place() != IN_WHERE &&
            tmp_unit->item->place() != IN_ON &&
            tmp_unit->item->place() != SELECT_LIST)))
      {
        selects_allow_merge= 0;
        break;
      }
    }
  }

  return (selects_allow_merge &&
	  select_lex.group_list.elements == 0 &&
	  select_lex.having == 0 &&
          select_lex.with_sum_func == 0 &&
	  select_lex.table_list.elements >= 1 &&
	  !(select_lex.options & SELECT_DISTINCT) &&
          select_lex.select_limit == 0);
}


/*
  check if command can use VIEW with MERGE algorithm (for top VIEWs)

  SYNOPSIS
    LEX::can_use_merged()

  DESCRIPTION
    Only listed here commands can use merge algorithm in top level
    SELECT_LEX (for subqueries will be used merge algorithm if
    LEX::can_not_use_merged() is not TRUE).

  RETURN
    FALSE - command can't use merged VIEWs
    TRUE  - VIEWs with MERGE algorithms can be used
*/

bool LEX::can_use_merged()
{
  switch (sql_command)
  {
  case SQLCOM_SELECT:
  case SQLCOM_CREATE_TABLE:
  case SQLCOM_UPDATE:
  case SQLCOM_UPDATE_MULTI:
  case SQLCOM_DELETE:
  case SQLCOM_DELETE_MULTI:
  case SQLCOM_INSERT:
  case SQLCOM_INSERT_SELECT:
  case SQLCOM_REPLACE:
  case SQLCOM_REPLACE_SELECT:
  case SQLCOM_LOAD:
    return TRUE;
  default:
    return FALSE;
  }
}

/*
  Check if command can't use merged views in any part of command

  SYNOPSIS
    LEX::can_not_use_merged()

  DESCRIPTION
    Temporary table algorithm will be used on all SELECT levels for queries
    listed here (see also LEX::can_use_merged()).

  RETURN
    FALSE - command can't use merged VIEWs
    TRUE  - VIEWs with MERGE algorithms can be used
*/

bool LEX::can_not_use_merged()
{
  switch (sql_command)
  {
  case SQLCOM_CREATE_VIEW:
  case SQLCOM_SHOW_CREATE:
  /*
    SQLCOM_SHOW_FIELDS is necessary to make 
    information schema tables working correctly with views.
    see get_schema_tables_result function
  */
  case SQLCOM_SHOW_FIELDS:
    return TRUE;
  default:
    return FALSE;
  }
}

/*
  Detect that we need only table structure of derived table/view

  SYNOPSIS
    only_view_structure()

  RETURN
    TRUE yes, we need only structure
    FALSE no, we need data
*/

bool LEX::only_view_structure()
{
  switch (sql_command) {
  case SQLCOM_SHOW_CREATE:
  case SQLCOM_SHOW_TABLES:
  case SQLCOM_SHOW_FIELDS:
  case SQLCOM_REVOKE_ALL:
  case SQLCOM_REVOKE:
  case SQLCOM_GRANT:
  case SQLCOM_CREATE_VIEW:
    return TRUE;
  default:
    return FALSE;
  }
}


/*
  Should Items_ident be printed correctly

  SYNOPSIS
    need_correct_ident()

  RETURN
    TRUE yes, we need only structure
    FALSE no, we need data
*/


bool LEX::need_correct_ident()
{
  switch(sql_command)
  {
  case SQLCOM_SHOW_CREATE:
  case SQLCOM_SHOW_TABLES:
  case SQLCOM_CREATE_VIEW:
    return TRUE;
  default:
    return FALSE;
  }
}

/*
  Get effective type of CHECK OPTION for given view

  SYNOPSIS
    get_effective_with_check()
    view    given view

  NOTE
    It have not sense to set CHECK OPTION for SELECT satement or subqueries,
    so we do not.

  RETURN
    VIEW_CHECK_NONE      no need CHECK OPTION
    VIEW_CHECK_LOCAL     CHECK OPTION LOCAL
    VIEW_CHECK_CASCADED  CHECK OPTION CASCADED
*/

uint8 LEX::get_effective_with_check(TABLE_LIST *view)
{
  if (view->select_lex->master_unit() == &unit &&
      which_check_option_applicable())
    return (uint8)view->with_check;
  return VIEW_CHECK_NONE;
}


/**
  This method should be called only during parsing.
  It is aware of compound statements (stored routine bodies)
  and will initialize the destination with the default
  database of the stored routine, rather than the default
  database of the connection it is parsed in.
  E.g. if one has no current database selected, or current database 
  set to 'bar' and then issues:

  CREATE PROCEDURE foo.p1() BEGIN SELECT * FROM t1 END//

  t1 is meant to refer to foo.t1, not to bar.t1.

  This method is needed to support this rule.

  @return TRUE in case of error (parsing should be aborted, FALSE in
  case of success
*/

bool
LEX::copy_db_to(char **p_db, size_t *p_db_length) const
{
  if (sphead && sphead->m_name.str)
  {
    DBUG_ASSERT(sphead->m_db.str && sphead->m_db.length);
    /*
      It is safe to assign the string by-pointer, both sphead and
      its statements reside in the same memory root.
    */
    *p_db= sphead->m_db.str;
    if (p_db_length)
      *p_db_length= sphead->m_db.length;
    return FALSE;
  }
  return thd->copy_db_to(p_db, p_db_length);
}

/**" 0 7 (fontified t) 7 13 (face font-lock-keyword-face fontified t) 13 30 (fontified t) 30 34 (face font-lock-keyword-face fontified t) 34 35 (fontified t) 35 38 (face font-lock-string-face fontified t) 38 39 (c-type c-decl-end fontified t) 39 54 (fontified t) 54 58 (face font-lock-string-face fontified t) 58 68 (fontified t) 68 73 (face font-lock-keyword-face fontified t) 73 81 (fontified t) 81 85 (face font-lock-keyword-face fontified t) 85 86 (fontified t) 86 89 (face font-lock-string-face fontified t) 89 90 (c-type c-decl-end fontified t) 90 106 (fontified t) 106 110 (face font-lock-string-face fontified t) 110 120 (fontified t) 120 125 (face font-lock-keyword-face fontified t) 125 133 (fontified t) 133 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 141 (face font-lock-string-face fontified t) 141 142 (c-type c-decl-end fontified t) 142 159 (fontified t) 159 163 (face font-lock-string-face fontified t) 163 173 (fontified t) 173 178 (face font-lock-keyword-face fontified t) 178 186 (fontified t) 186 190 (face font-lock-keyword-face fontified t) 190 191 (fontified t) 191 194 (face font-lock-string-face fontified t) 194 195 (c-type c-decl-end fontified t) 195 212 (fontified t) 212 216 (face font-lock-string-face fontified t) 216 226 (fontified t) 226 231 (face font-lock-keyword-face fontified t) 231 239 (fontified t) 239 243 (face font-lock-keyword-face fontified t) 243 244 (fontified t) 244 247 (face font-lock-string-face fontified t) 247 248 (c-type c-decl-end fontified t) 248 288 (fontified t) 288 291 (face font-lock-comment-delimiter-face fontified t) 291 302 (face font-lock-comment-face fontified t) 302 310 (fontified t) 310 315 (face font-lock-keyword-face fontified t) 315 323 (fontified t) 323 327 (face font-lock-keyword-face fontified t) 327 328 (fontified t) 328 331 (face font-lock-string-face fontified t) 331 332 (c-type c-decl-end fontified t) 332 356 (c-is-sws t c-in-sws t fontified t) 356 357 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 357 359 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 359 387 (c-in-sws t face font-lock-comment-face fontified t) 387 388 (c-is-sws t fontified t) 388 401 (fontified t) 401 407 (face font-lock-string-face fontified t) 407 409 (fontified t) 409 417 (fontified t) 417 422 (face font-lock-keyword-face fontified t) 422 430 (fontified t) 430 434 (face font-lock-keyword-face fontified t) 434 435 (fontified t) 435 438 (face font-lock-string-face fontified t) 438 439 (c-type c-decl-end fontified t) 439 446 (fontified t) 446 450 (face font-lock-keyword-face fontified t) 450 451 (fontified t) 451 454 (face font-lock-string-face fontified t) 454 455 (c-type c-decl-end fontified t) 455 471 (fontified t) 471 475 (face font-lock-string-face fontified t) 475 495 (fontified t) 495 498 (face font-lock-comment-delimiter-face fontified t) 498 527 (face font-lock-comment-face fontified t) 527 535 (fontified t) 535 538 (face font-lock-comment-delimiter-face fontified t) 538 553 (face font-lock-comment-face fontified t) 553 560 (fontified t) 560 567 (face font-lock-keyword-face fontified t) 567 568 (c-type c-decl-end fontified t) 568 598 (fontified t) 598 603 (face font-lock-keyword-face fontified t) 603 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 628 (fontified t) 628 630 (face font-lock-keyword-face fontified t) 630 681 (fontified t) 681 684 (face font-lock-comment-delimiter-face fontified t) 684 695 (face font-lock-comment-face fontified t) 695 699 (fontified t) 699 703 (face font-lock-keyword-face fontified t) 703 740 (fontified t) 740 746 (face font-lock-keyword-face fontified t) 746 763 (fontified t) 763 768 (face font-lock-type-face fontified t) 768 769 (face font-lock-type-face c-type c-decl-id-start fontified t) 769 770 (fontified t) 770 786 (face font-lock-constant-face fontified t) 786 788 (fontified t) 788 796 (face font-lock-function-name-face fontified t) 796 797 (c-type c-decl-arg-start fontified t) 797 809 (face font-lock-type-face fontified t) 809 811 (fontified t) 811 813 (face font-lock-variable-name-face fontified t) 813 814 (c-type c-decl-arg-start fontified t) 814 815 (fontified t) 815 819 (face font-lock-type-face fontified t) 819 821 (fontified t) 821 823 (face font-lock-variable-name-face fontified t) 823 824 (c-type c-decl-arg-start fontified t) 824 852 (fontified t) 852 857 (face font-lock-keyword-face fontified t) 857 858 (fontified t) 858 862 (face font-lock-type-face fontified t) 862 864 (fontified t) 864 867 (face font-lock-variable-name-face fontified t) 867 868 (c-type c-decl-arg-start fontified t) 868 869 (fontified t) 869 874 (face font-lock-keyword-face fontified t) 874 875 (fontified t) 875 879 (face font-lock-type-face fontified t) 879 881 (fontified t) 881 884 (face font-lock-variable-name-face fontified t) 884 885 (c-type c-decl-arg-start fontified t) 885 913 (fontified t) 913 916 (face font-lock-type-face fontified t) 916 917 (fontified t) 917 920 (face font-lock-variable-name-face fontified t) 920 922 (fontified t) 922 926 (fontified t) 926 932 (face font-lock-keyword-face fontified t) 932 1001 (fontified t) 1001 1002 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1002 1003 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1003 1106 (face font-lock-comment-face fontified t c-in-sws t) 1106 1108 (fontified t c-in-sws t) 1108 1109 (face font-lock-type-face fontified t c-is-sws t) 1109 1111 (face font-lock-type-face fontified t) 1111 1112 (face font-lock-type-face c-type c-decl-id-start fontified t) 1112 1113 (fontified t) 1113 1129 (face font-lock-constant-face fontified t) 1129 1131 (fontified t) 1131 1139 (face font-lock-function-name-face fontified t) 1139 1140 (c-type c-decl-arg-start fontified t) 1140 1150 (face font-lock-type-face fontified t) 1150 1152 (fontified t) 1152 1155 (face font-lock-variable-name-face fontified t) 1155 1156 (c-type c-decl-arg-start fontified t) 1156 1157 (fontified t) 1157 1161 (face font-lock-type-face fontified t) 1161 1162 (fontified t) 1162 1165 (face font-lock-variable-name-face fontified t) 1165 1166 (c-type c-decl-arg-start fontified t) 1166 1199 (fontified t) 1199 1202 (face font-lock-type-face fontified t) 1202 1203 (fontified t) 1203 1211 (face font-lock-variable-name-face fontified t) 1211 1212 (c-type c-decl-arg-start fontified t) 1212 1213 (fontified t) 1213 1216 (face font-lock-type-face fontified t) 1216 1217 (fontified t) 1217 1226 (face font-lock-variable-name-face fontified t) 1226 1237 (fontified t) 1237 1241 (face font-lock-type-face fontified t) 1241 1242 (face font-lock-type-face c-type c-decl-id-start fontified t) 1242 1243 (fontified t) 1243 1244 (face font-lock-variable-name-face fontified t) 1244 1248 (fontified t) 1248 1251 (face font-lock-type-face fontified t) 1251 1252 (face font-lock-type-face c-type c-decl-id-start fontified t) 1252 1253 (fontified t) 1253 1265 (face font-lock-variable-name-face fontified t) 1265 1271 (fontified t) 1271 1282 (face font-lock-type-face fontified t) 1282 1283 (face font-lock-type-face c-type c-decl-id-start fontified t) 1283 1285 (fontified t) 1285 1287 (face font-lock-variable-name-face fontified t) 1287 1327 (fontified t) 1327 1332 (face font-lock-keyword-face fontified t) 1332 1334 (fontified t) 1334 1335 (face font-lock-negation-char-face fontified t) 1335 1383 (fontified t) 1383 1384 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1384 1389 (face font-lock-preprocessor-face fontified t c-in-sws t) 1389 1397 (fontified t c-in-sws t) 1397 1401 (fontified t c-is-sws t c-in-sws t) 1401 1402 (fontified t c-is-sws t) 1402 1409 (fontified t) 1409 1411 (face font-lock-type-face fontified t) 1411 1412 (face font-lock-type-face c-type c-decl-id-start fontified t) 1412 1413 (fontified t) 1413 1414 (face font-lock-variable-name-face fontified t) 1414 1422 (fontified t) 1422 1424 (face font-lock-keyword-face fontified t) 1424 1440 (fontified t) 1440 1597 (fontified t) 1597 1605 (face font-lock-keyword-face fontified t) 1605 1621 (fontified t) 1621 1622 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1622 1627 (face font-lock-preprocessor-face fontified t c-in-sws t) 1627 1628 (fontified t c-in-sws t) 1628 1632 (fontified t c-is-sws t c-in-sws t) 1632 1633 (face font-lock-keyword-face fontified t c-is-sws t) 1633 1634 (face font-lock-keyword-face fontified t) 1634 1641 (fontified t) 1641 1645 (face font-lock-string-face fontified t) 1645 1657 (fontified t) 1657 1658 (face font-lock-negation-char-face fontified t) 1658 1720 (fontified t) 1720 1725 (fontified t c-is-sws t c-in-sws t) 1725 1726 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1726 1728 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1728 1746 (face font-lock-comment-face fontified t c-in-sws t) 1746 1752 (fontified t c-in-sws t c-is-sws t) 1752 1753 (fontified t c-is-sws t) 1753 1774 (fontified t) 1774 1776 (face font-lock-keyword-face fontified t) 1776 1786 (fontified t) 1786 1792 (face font-lock-keyword-face fontified t) 1792 1793 (fontified t) 1793 1797 (face font-lock-constant-face fontified t) 1797 1825 (fontified t) 1825 1829 (face font-lock-keyword-face fontified t) 1829 1830 (fontified t) 1830 1832 (face font-lock-keyword-face fontified t) 1832 1856 (fontified t) 1856 1858 (face font-lock-keyword-face fontified t) 1858 1873 (fontified t) 1873 1890 (fontified t c-is-sws t c-in-sws t) 1890 1891 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1891 1893 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1893 1926 (face font-lock-comment-face fontified t c-in-sws t) 1926 1932 (fontified t c-in-sws t c-is-sws t) 1932 1933 (fontified t c-is-sws t) 1933 1957 (fontified t) 1957 1974 (c-is-sws t c-in-sws t fontified t) 1974 1975 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1975 1977 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1977 2008 (c-in-sws t face font-lock-comment-face fontified t) 2008 2009 (c-is-sws t fontified t) 2009 2017 (face font-lock-keyword-face fontified t) 2017 2033 (fontified t) 2033 2037 (face font-lock-keyword-face fontified t) 2037 2058 (fontified t) 2058 2064 (fontified t c-is-sws t c-in-sws t) 2064 2065 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 2065 2067 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2067 2107 (face font-lock-comment-face fontified t c-in-sws t) 2107 2108 (fontified t c-in-sws t) 2108 2114 (fontified t c-in-sws t c-is-sws t) 2114 2115 (face font-lock-keyword-face fontified t c-is-sws t) 2115 2119 (face font-lock-keyword-face fontified t) 2119 2120 (fontified t) 2120 2123 (face font-lock-type-face fontified t) 2123 2124 (face font-lock-type-face c-type c-decl-id-start fontified t) 2124 2126 (fontified t) 2126 2129 (face font-lock-variable-name-face fontified t) 2129 2130 (c-type c-decl-id-start fontified t) 2130 2132 (fontified t) 2132 2135 (face font-lock-variable-name-face fontified t) 2135 2188 (fontified t) 2188 2194 (fontified t c-is-sws t c-in-sws t) 2194 2195 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 2195 2197 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2197 2231 (face font-lock-comment-face fontified t c-in-sws t) 2231 2232 (fontified t c-in-sws t) 2232 2238 (fontified t c-in-sws t c-is-sws t) 2238 2239 (fontified t c-is-sws t) 2239 2317 (fontified t) 2317 2319 (face font-lock-keyword-face fontified t) 2319 2321 (fontified t) 2321 2322 (face font-lock-negation-char-face fontified t) 2322 2334 (fontified t) 2334 2338 (face font-lock-type-face fontified t) 2338 2355 (fontified t) 2355 2359 (face font-lock-type-face fontified t) 2359 2407 (fontified t) 2407 2411 (face font-lock-type-face fontified t) 2411 2414 (fontified t) 2414 2416 (face font-lock-string-face fontified t) 2416 2417 (fontified t) 2417 2425 (fontified t c-is-sws t c-in-sws t) 2425 2426 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 2426 2428 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2428 2457 (face font-lock-comment-face fontified t c-in-sws t) 2457 2465 (fontified t c-in-sws t c-is-sws t) 2465 2466 (fontified t c-is-sws t) 2466 2489 (fontified t) 2489 2495 (face font-lock-keyword-face fontified t) 2495 2496 (fontified t) 2496 2500 (face font-lock-constant-face fontified t) 2500 2510 (fontified t) 2510 2623 (fontified t) 2623 2625 (face font-lock-keyword-face fontified t) 2625 2627 (fontified t) 2627 2628 (face font-lock-negation-char-face fontified t) 2628 2755 (fontified t) 2755 2759 (face font-lock-keyword-face fontified t) 2759 2842 (fontified t) 2842 2848 (face font-lock-keyword-face fontified t) 2848 2849 (fontified t) 2849 2854 (face font-lock-constant-face fontified t) 2854 2868 (fontified t) 2868 2874 (face font-lock-keyword-face fontified t) 2874 2875 (fontified t) 2875 2879 (face font-lock-constant-face fontified t) 2879 2905 (fontified t) 2905 2908 (face font-lock-comment-delimiter-face fontified t) 2908 2932 (face font-lock-comment-face fontified t) 2932 2936 (fontified t) 2936 2937 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 2937 2938 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2938 3052 (face font-lock-comment-face fontified t c-in-sws t) 3052 3241 (face font-lock-comment-face fontified t c-in-sws t) 3241 3243 (fontified t c-in-sws t) 3243 3244 (face font-lock-keyword-face fontified t c-is-sws t) 3244 3249 (face font-lock-keyword-face fontified t) 3249 3250 (fontified t) 3250 3255 (face font-lock-keyword-face fontified t) 3255 3256 (fontified t) 3256 3259 (face font-lock-type-face fontified t) 3259 3260 (face font-lock-type-face c-type c-decl-id-start fontified t) 3260 3262 (fontified t) 3262 3270 (face font-lock-variable-name-face fontified t) 3270 3271 (fontified t) 3271 3283 (face font-lock-string-face fontified t) 3283 3285 (fontified t) 3285 3291 (face font-lock-keyword-face fontified t) 3291 3292 (fontified t) 3292 3297 (face font-lock-keyword-face fontified t) 3297 3298 (fontified t) 3298 3301 (face font-lock-type-face fontified t) 3301 3302 (face font-lock-type-face c-type c-decl-id-start fontified t) 3302 3303 (fontified t) 3303 3311 (face font-lock-variable-name-face fontified t) 3311 3316 (fontified t) 3316 3322 (face font-lock-keyword-face fontified t) 3322 3323 (fontified t) 3323 3328 (face font-lock-keyword-face fontified t) 3328 3329 (fontified t) 3329 3332 (face font-lock-type-face fontified t) 3332 3333 (face font-lock-type-face c-type c-decl-id-start fontified t) 3333 3335 (fontified t) 3335 3350 (face font-lock-variable-name-face fontified t) 3350 3351 (fontified t) 3351 3364 (face font-lock-string-face fontified t) 3364 3366 (fontified t) 3366 3372 (face font-lock-keyword-face fontified t) 3372 3373 (fontified t) 3373 3378 (face font-lock-keyword-face fontified t) 3378 3379 (fontified t) 3379 3382 (face font-lock-type-face fontified t) 3382 3383 (face font-lock-type-face c-type c-decl-id-start fontified t) 3383 3385 (fontified t) 3385 3397 (face font-lock-variable-name-face fontified t) 3397 3398 (fontified t) 3398 3419 (face font-lock-string-face fontified t) 3419 3421 (fontified t) 3421 3427 (face font-lock-keyword-face fontified t) 3427 3428 (fontified t) 3428 3433 (face font-lock-keyword-face fontified t) 3433 3434 (fontified t) 3434 3437 (face font-lock-type-face fontified t) 3437 3438 (face font-lock-type-face c-type c-decl-id-start fontified t) 3438 3439 (fontified t) 3439 3451 (face font-lock-variable-name-face fontified t) 3451 3456 (fontified t) 3456 3462 (face font-lock-keyword-face fontified t) 3462 3463 (fontified t) 3463 3468 (face font-lock-keyword-face fontified t) 3468 3469 (fontified t) 3469 3472 (face font-lock-type-face fontified t) 3472 3473 (face font-lock-type-face c-type c-decl-id-start fontified t) 3473 3475 (fontified t) 3475 3494 (face font-lock-variable-name-face fontified t) 3494 3495 (fontified t) 3495 3517 (face font-lock-string-face fontified t) 3517 3519 (fontified t) 3519 3525 (face font-lock-keyword-face fontified t) 3525 3526 (fontified t) 3526 3531 (face font-lock-keyword-face fontified t) 3531 3532 (fontified t) 3532 3535 (face font-lock-type-face fontified t) 3535 3536 (face font-lock-type-face c-type c-decl-id-start fontified t) 3536 3537 (fontified t) 3537 3556 (face font-lock-variable-name-face fontified t) 3556 3561 (fontified t) 3561 3567 (face font-lock-keyword-face fontified t) 3567 3568 (fontified t) 3568 3573 (face font-lock-keyword-face fontified t) 3573 3574 (fontified t) 3574 3577 (face font-lock-type-face fontified t) 3577 3578 (face font-lock-type-face c-type c-decl-id-start fontified t) 3578 3580 (fontified t) 3580 3601 (face font-lock-variable-name-face fontified t) 3601 3602 (fontified t) 3602 3624 (face font-lock-string-face fontified t) 3624 3626 (fontified t) 3626 3632 (face font-lock-keyword-face fontified t) 3632 3633 (fontified t) 3633 3638 (face font-lock-keyword-face fontified t) 3638 3639 (fontified t) 3639 3642 (face font-lock-type-face fontified t) 3642 3643 (face font-lock-type-face c-type c-decl-id-start fontified t) 3643 3644 (fontified t) 3644 3665 (face font-lock-variable-name-face fontified t) 3665 3671 (fontified t) 3671 3677 (face font-lock-keyword-face fontified t) 3677 3678 (fontified t) 3678 3684 (face font-lock-keyword-face fontified t) 3684 3685 (fontified t) 3685 3688 (face font-lock-type-face fontified t) 3688 3689 (face font-lock-type-face c-type c-decl-id-start fontified t) 3689 3690 (fontified t) 3690 3699 (face font-lock-function-name-face fontified t) 3699 3700 (c-type c-decl-arg-start fontified t) 3700 3705 (face font-lock-keyword-face fontified t) 3705 3706 (fontified t) 3706 3710 (face font-lock-type-face fontified t) 3710 3712 (fontified t) 3712 3715 (face font-lock-variable-name-face fontified t) 3715 3716 (c-type c-decl-arg-start fontified t) 3716 3720 (face font-lock-type-face fontified t) 3720 3721 (fontified t) 3721 3727 (face font-lock-variable-name-face fontified t) 3727 3733 (fontified t) 3733 3735 (face font-lock-keyword-face fontified t) 3735 3755 (fontified t) 3755 3758 (fontified t c-is-sws t c-in-sws t) 3758 3759 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3759 3761 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3761 3779 (face font-lock-comment-face fontified t c-in-sws t) 3779 3783 (fontified t c-in-sws t c-is-sws t) 3783 3784 (face font-lock-keyword-face fontified t c-is-sws t) 3784 3789 (face font-lock-keyword-face fontified t) 3789 3797 (fontified t) 3797 3800 (face font-lock-type-face fontified t) 3800 3801 (face font-lock-type-face c-type c-decl-id-start fontified t) 3801 3802 (fontified t) 3802 3805 (face font-lock-variable-name-face fontified t) 3805 3812 (fontified t) 3812 3814 (face font-lock-keyword-face fontified t) 3814 3824 (fontified t) 3824 3827 (face font-lock-string-face fontified t) 3827 3828 (fontified t) 3828 3832 (fontified t c-is-sws t c-in-sws t) 3832 3833 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3833 3835 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3835 3861 (face font-lock-comment-face fontified t c-in-sws t) 3861 3863 (fontified t c-in-sws t c-is-sws t) 3863 3864 (fontified t c-is-sws t) 3864 3892 (fontified t) 3892 3896 (face font-lock-keyword-face fontified t) 3896 3897 (fontified t) 3897 3899 (face font-lock-keyword-face fontified t) 3899 3909 (fontified t) 3909 3912 (face font-lock-string-face fontified t) 3912 3956 (fontified t) 3956 3961 (face font-lock-keyword-face fontified t) 3961 3971 (fontified t) 3971 3974 (face font-lock-string-face fontified t) 3974 4018 (fontified t) 4018 4020 (face font-lock-keyword-face fontified t) 4020 4045 (fontified t) 4045 4051 (face font-lock-keyword-face fontified t) 4051 4060 (fontified t) 4060 4063 (face font-lock-type-face fontified t) 4063 4064 (face font-lock-type-face c-type c-decl-id-start fontified t) 4064 4065 (fontified t) 4065 4072 (face font-lock-variable-name-face fontified t) 4072 4073 (c-type c-decl-id-start fontified t) 4073 4079 (face font-lock-variable-name-face fontified t) 4079 4081 (fontified t) 4081 4083 (fontified t) 4083 4088 (face font-lock-keyword-face fontified t) 4088 4089 (fontified t) 4089 4092 (face font-lock-type-face fontified t) 4092 4093 (face font-lock-type-face c-type c-decl-id-start fontified t) 4093 4095 (fontified t) 4095 4098 (face font-lock-variable-name-face fontified t) 4098 4102 (fontified t) 4102 4104 (face font-lock-keyword-face fontified t) 4104 4119 (fontified t) 4119 4121 (face font-lock-keyword-face fontified t) 4121 4197 (fontified t) 4197 4201 (fontified t c-is-sws t c-in-sws t) 4201 4202 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4202 4204 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4204 4226 (face font-lock-comment-face fontified t c-in-sws t) 4226 4232 (fontified t c-in-sws t c-is-sws t) 4232 4233 (fontified t c-is-sws t) 4233 4252 (fontified t) 4252 4255 (face font-lock-comment-delimiter-face fontified t) 4255 4277 (face font-lock-comment-face fontified t) 4277 4287 (fontified t) 4287 4291 (face font-lock-keyword-face fontified t) 4291 4292 (fontified t) 4292 4294 (face font-lock-keyword-face fontified t) 4294 4332 (fontified t) 4332 4338 (face font-lock-keyword-face fontified t) 4338 4353 (fontified t) 4353 4357 (face font-lock-keyword-face fontified t) 4357 4358 (fontified t) 4358 4360 (face font-lock-keyword-face fontified t) 4360 4398 (fontified t) 4398 4404 (face font-lock-keyword-face fontified t) 4404 4422 (fontified t) 4422 4426 (face font-lock-keyword-face fontified t) 4426 4489 (fontified t) 4489 4493 (fontified t c-is-sws t c-in-sws t) 4493 4494 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4494 4496 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4496 4522 (face font-lock-comment-face fontified t c-in-sws t) 4522 4528 (fontified t c-in-sws t c-is-sws t) 4528 4529 (fontified t c-is-sws t) 4529 4560 (fontified t) 4560 4564 (face font-lock-keyword-face fontified t) 4564 4573 (fontified t) 4573 4575 (face font-lock-keyword-face fontified t) 4575 4597 (fontified t) 4597 4676 (fontified t) 4676 4680 (face font-lock-keyword-face fontified t) 4680 4681 (fontified t) 4681 4683 (face font-lock-keyword-face fontified t) 4683 4714 (fontified t) 4714 4720 (face font-lock-keyword-face fontified t) 4720 4735 (fontified t) 4735 4739 (face font-lock-keyword-face fontified t) 4739 4740 (fontified t) 4740 4742 (face font-lock-keyword-face fontified t) 4742 4779 (fontified t) 4779 4781 (face font-lock-keyword-face fontified t) 4781 4823 (fontified t) 4823 4829 (face font-lock-keyword-face fontified t) 4829 4941 (fontified t) 4941 4945 (face font-lock-keyword-face fontified t) 4945 5041 (fontified t) 5041 5046 (face font-lock-keyword-face fontified t) 5046 5078 (fontified t) 5078 5084 (face font-lock-keyword-face fontified t) 5084 5087 (fontified t) 5087 5092 (face font-lock-type-face fontified t) 5092 5106 (fontified t) 5106 5111 (face font-lock-type-face fontified t) 5111 5142 (fontified t) 5142 5146 (fontified t) 5146 5147 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 5147 5149 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 5149 5672 (face font-lock-comment-face fontified t c-in-sws t) 5672 5674 (face font-lock-comment-face fontified t c-in-sws t) 5674 5675 (fontified t c-in-sws t) 5675 5676 (face font-lock-type-face fontified t c-is-sws t) 5676 5678 (face font-lock-type-face fontified t) 5678 5679 (face font-lock-type-face c-type c-decl-id-start fontified t) 5679 5680 (fontified t) 5680 5695 (face font-lock-function-name-face fontified t) 5695 5696 (c-type c-decl-arg-start fontified t) 5696 5712 (face font-lock-type-face fontified t) 5712 5714 (fontified t) 5714 5717 (face font-lock-variable-name-face fontified t) 5717 5718 (c-type c-decl-arg-start fontified t) 5718 5719 (fontified t) 5719 5722 (face font-lock-type-face fontified t) 5722 5723 (fontified t) 5723 5753 (face font-lock-variable-name-face fontified t) 5753 5764 (fontified t) 5764 5768 (face font-lock-type-face fontified t) 5768 5769 (face font-lock-type-face c-type c-decl-id-start fontified t) 5769 5770 (fontified t) 5770 5771 (face font-lock-variable-name-face fontified t) 5771 5775 (fontified t) 5775 5780 (face font-lock-keyword-face fontified t) 5780 5782 (fontified t) 5782 5783 (face font-lock-negation-char-face fontified t) 5783 5826 (fontified t) 5826 5828 (face font-lock-keyword-face fontified t) 5828 5878 (fontified t) 5878 5880 (face font-lock-keyword-face fontified t) 5880 5888 (fontified t) 5888 5891 (face font-lock-string-face fontified t) 5891 5914 (fontified t) 5914 5917 (face font-lock-string-face fontified t) 5917 5950 (fontified t) 5950 5951 (fontified t c-is-sws t c-in-sws t) 5951 5952 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 5952 5954 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 5954 5969 (face font-lock-comment-face fontified t c-in-sws t) 5969 5970 (fontified t c-in-sws t) 5970 5978 (fontified t c-in-sws t c-is-sws t) 5978 5979 (fontified t c-is-sws t) 5979 6042 (fontified t) 6042 6050 (face font-lock-keyword-face fontified t) 6050 6071 (fontified t) 6071 6073 (face font-lock-keyword-face fontified t) 6073 6080 (fontified t) 6080 6083 (face font-lock-string-face fontified t) 6083 6097 (fontified t) 6097 6099 (face font-lock-keyword-face fontified t) 6099 6118 (fontified t) 6118 6121 (face font-lock-string-face fontified t) 6121 6153 (fontified t) 6153 6154 (c-is-sws t c-in-sws t fontified t) 6154 6155 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 6155 6157 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 6157 6169 (c-in-sws t face font-lock-comment-face fontified t) 6169 6170 (c-in-sws t fontified t) 6170 6178 (c-in-sws t c-is-sws t fontified t) 6178 6179 (c-is-sws t face font-lock-keyword-face fontified t) 6179 6184 (face font-lock-keyword-face fontified t) 6184 6192 (fontified t) 6192 6211 (fontified t) 6211 6213 (face font-lock-keyword-face fontified t) 6213 6220 (fontified t) 6220 6224 (face font-lock-string-face fontified t) 6224 6256 (fontified t) 6256 6262 (face font-lock-keyword-face fontified t) 6262 6273 (fontified t) 6273 6274 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 6274 6275 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 6275 6614 (face font-lock-comment-face fontified t c-in-sws t) 6614 6616 (fontified t c-in-sws t) 6616 6617 (face font-lock-type-face fontified t c-is-sws t) 6617 6618 (face font-lock-type-face fontified t) 6618 6619 (face font-lock-type-face c-type c-decl-id-start fontified t) 6619 6620 (fontified t) 6620 6628 (face font-lock-function-name-face fontified t) 6628 6629 (c-type c-decl-arg-start fontified t) 6629 6636 (face font-lock-type-face fontified t) 6636 6638 (fontified t) 6638 6644 (face font-lock-variable-name-face fontified t) 6644 6645 (c-type c-decl-arg-start fontified t) 6645 6646 (fontified t) 6646 6649 (face font-lock-type-face fontified t) 6649 6651 (fontified t) 6651 6654 (face font-lock-variable-name-face fontified t) 6654 6660 (fontified t) 6660 6675 (face font-lock-type-face fontified t) 6675 6676 (face font-lock-type-face c-type c-decl-id-start fontified t) 6676 6678 (fontified t) 6678 6681 (face font-lock-variable-name-face fontified t) 6681 6713 (fontified t) 6713 6715 (fontified t) 6715 6717 (face font-lock-type-face fontified t) 6717 6718 (face font-lock-type-face c-type c-decl-id-start fontified t) 6718 6719 (fontified t) 6719 6724 (face font-lock-variable-name-face fontified t) 6724 6729 (fontified t) 6729 6731 (face font-lock-keyword-face fontified t) 6731 6764 (fontified t) 6764 6768 (fontified t c-is-sws t c-in-sws t) 6768 6769 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 6769 6770 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 6770 6846 (face font-lock-comment-face fontified t c-in-sws t) 6846 6847 (fontified t c-in-sws t) 6847 6851 (fontified t c-in-sws t c-is-sws t) 6851 6852 (fontified t c-is-sws t) 6852 6976 (fontified t) 6976 6980 (face font-lock-constant-face fontified t) 6980 7028 (fontified t) 7028 7034 (face font-lock-keyword-face fontified t) 7034 7087 (fontified t) 7087 7093 (face font-lock-keyword-face fontified t) 7093 7105 (fontified t) 7105 7109 (face font-lock-keyword-face fontified t) 7109 7114 (fontified t) 7114 7115 (c-type c-decl-end fontified t) 7115 7116 (fontified t) 7116 7120 (fontified t c-is-sws t c-in-sws t) 7120 7121 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 7121 7122 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 7122 7230 (face font-lock-comment-face fontified t c-in-sws t) 7230 7390 (face font-lock-comment-face fontified t c-in-sws t) 7390 7391 (c-is-sws t fontified t) 7391 7395 (fontified t c-in-sws t c-is-sws t) 7395 7396 (fontified t c-is-sws t) 7396 7434 (fontified t) 7434 7440 (face font-lock-keyword-face fontified t) 7440 7454 (fontified t) 7454 7458 (face font-lock-keyword-face fontified t) 7458 7467 (fontified t) 7467 7468 (c-type c-decl-end fontified t) 7468 7527 (fontified t) 7527 7533 (face font-lock-keyword-face fontified t) 7533 7553 (fontified t) 7553 7557 (face font-lock-keyword-face fontified t) 7557 7568 (fontified t) 7568 7569 (c-type c-decl-end fontified t) 7569 7630 (fontified t) 7630 7636 (face font-lock-keyword-face fontified t) 7636 7658 (fontified t) 7658 7665 (face font-lock-keyword-face fontified t) 7665 7666 (c-type c-decl-end fontified t) 7666 7667 (fontified t) 7667 7673 (fontified t c-is-sws t c-in-sws t) 7673 7674 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 7674 7675 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 7675 7724 (face font-lock-comment-face fontified t c-in-sws t) 7724 7725 (fontified t c-in-sws t) 7725 7731 (fontified t c-in-sws t c-is-sws t) 7731 7732 (fontified t c-is-sws t) 7732 7767 (fontified t) 7767 7786 (fontified t) 7786 7790 (face font-lock-constant-face fontified t) 7790 7876 (fontified t) 7876 7882 (face font-lock-keyword-face fontified t) 7882 7899 (fontified t) 7899 7904 (face font-lock-keyword-face fontified t) 7904 7908 (fontified t) 7908 7915 (face font-lock-keyword-face fontified t) 7915 7916 (c-type c-decl-end fontified t) 7916 7921 (fontified t) 7921 7926 (face font-lock-keyword-face fontified t) 7926 7975 (fontified t) 7975 7981 (face font-lock-keyword-face fontified t) 7981 7992 (fontified t) 7992 7998 (face font-lock-keyword-face fontified t) 7998 7999 (fontified t) 7999 8001 (face font-lock-type-face fontified t) 8001 8002 (face font-lock-type-face c-type c-decl-id-start fontified t) 8002 8003 (fontified t) 8003 8016 (face font-lock-function-name-face fontified t) 8016 8017 (c-type c-decl-arg-start fontified t) 8017 8024 (face font-lock-type-face fontified t) 8024 8026 (fontified t) 8026 8032 (face font-lock-variable-name-face fontified t) 8032 8033 (c-type c-decl-arg-start fontified t) 8033 8034 (fontified t) 8034 8037 (face font-lock-type-face fontified t) 8037 8039 (fontified t) 8039 8042 (face font-lock-variable-name-face fontified t) 8042 8053 (fontified t) 8053 8057 (face font-lock-type-face fontified t) 8057 8058 (face font-lock-type-face c-type c-decl-id-start fontified t) 8058 8059 (fontified t) 8059 8069 (face font-lock-variable-name-face fontified t) 8069 8070 (c-type c-decl-arg-start fontified t) 8070 8076 (fontified t) 8076 8079 (face font-lock-type-face fontified t) 8079 8080 (face font-lock-type-face c-type c-decl-id-start fontified t) 8080 8081 (fontified t) 8081 8095 (face font-lock-variable-name-face fontified t) 8095 8099 (fontified t) 8099 8101 (face font-lock-type-face fontified t) 8101 8102 (face font-lock-type-face c-type c-decl-id-start fontified t) 8102 8103 (fontified t) 8103 8109 (face font-lock-variable-name-face fontified t) 8109 8110 (c-type c-decl-id-start fontified t) 8110 8111 (fontified t) 8111 8123 (face font-lock-variable-name-face fontified t) 8123 8127 (fontified t) 8127 8130 (face font-lock-type-face fontified t) 8130 8131 (face font-lock-type-face c-type c-decl-id-start fontified t) 8131 8132 (fontified t) 8132 8138 (face font-lock-variable-name-face fontified t) 8138 8142 (fontified t) 8142 8146 (face font-lock-keyword-face fontified t) 8146 8147 (fontified t) 8147 8159 (face font-lock-type-face fontified t) 8159 8160 (face font-lock-type-face c-type c-decl-id-start fontified t) 8160 8161 (fontified t) 8161 8166 (face font-lock-variable-name-face fontified t) 8166 8170 (fontified t) 8170 8185 (face font-lock-type-face fontified t) 8185 8186 (face font-lock-type-face c-type c-decl-id-start fontified t) 8186 8188 (fontified t) 8188 8191 (face font-lock-variable-name-face fontified t) 8191 8225 (fontified t) 8225 8227 (face font-lock-type-face fontified t) 8227 8228 (face font-lock-type-face c-type c-decl-id-start fontified t) 8228 8230 (fontified t) 8230 8233 (face font-lock-variable-name-face fontified t) 8233 8247 (fontified t) 8247 8258 (face font-lock-type-face fontified t) 8258 8259 (face font-lock-type-face c-type c-decl-id-start fontified t) 8259 8261 (fontified t) 8261 8266 (face font-lock-keyword-face fontified t) 8266 8267 (fontified t) 8267 8269 (face font-lock-variable-name-face fontified t) 8269 8287 (fontified t) 8287 8289 (fontified t) 8289 8294 (face font-lock-keyword-face fontified t) 8294 8295 (fontified t) 8295 8299 (face font-lock-type-face fontified t) 8299 8300 (face font-lock-type-face c-type c-decl-id-start fontified t) 8300 8302 (fontified t) 8302 8307 (face font-lock-keyword-face fontified t) 8307 8308 (fontified t) 8308 8317 (face font-lock-variable-name-face fontified t) 8317 8336 (fontified t) 8336 8341 (face font-lock-keyword-face fontified t) 8341 8342 (fontified t) 8342 8346 (face font-lock-type-face fontified t) 8346 8347 (face font-lock-type-face c-type c-decl-id-start fontified t) 8347 8349 (fontified t) 8349 8354 (face font-lock-keyword-face fontified t) 8354 8355 (fontified t) 8355 8364 (face font-lock-variable-name-face fontified t) 8364 8403 (fontified t) 8403 8406 (fontified t c-is-sws t c-in-sws t) 8406 8407 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 8407 8409 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8409 8426 (face font-lock-comment-face fontified t c-in-sws t) 8426 8427 (fontified t c-in-sws t) 8427 8429 (fontified t c-in-sws t c-is-sws t) 8429 8430 (fontified t c-is-sws t) 8430 8520 (fontified t) 8520 8523 (face font-lock-keyword-face fontified t) 8523 8537 (fontified t) 8537 8543 (face font-lock-keyword-face fontified t) 8543 8558 (fontified t) 8558 8562 (face font-lock-keyword-face fontified t) 8562 8587 (fontified t) 8587 8588 (c-type c-decl-end fontified t) 8588 8589 (fontified t c-is-sws t c-in-sws t) 8589 8590 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 8590 8592 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8592 8620 (face font-lock-comment-face fontified t c-in-sws t) 8620 8624 (fontified t c-in-sws t c-is-sws t) 8624 8625 (face font-lock-keyword-face fontified t c-is-sws t) 8625 8628 (face font-lock-keyword-face fontified t) 8628 8641 (fontified t) 8641 8642 (c-type c-decl-end fontified t) 8642 8645 (fontified t c-is-sws t c-in-sws t) 8645 8646 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 8646 8648 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8648 8663 (face font-lock-comment-face fontified t c-in-sws t) 8663 8664 (c-in-sws t fontified t) 8664 8669 (fontified t c-in-sws t) 8669 8672 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8672 8697 (face font-lock-comment-face fontified t c-in-sws t) 8697 8703 (fontified t c-in-sws t c-is-sws t) 8703 8704 (face font-lock-keyword-face fontified t c-is-sws t) 8704 8708 (face font-lock-keyword-face fontified t) 8708 8762 (fontified t) 8762 8764 (face font-lock-keyword-face fontified t) 8764 8771 (fontified t) 8771 8775 (face font-lock-string-face fontified t) 8775 8797 (fontified t) 8797 8830 (fontified t) 8830 8836 (fontified t c-is-sws t c-in-sws t) 8836 8837 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 8837 8839 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8839 8861 (face font-lock-comment-face fontified t c-in-sws t) 8861 8862 (fontified t c-in-sws t) 8862 8868 (fontified t c-in-sws t c-is-sws t) 8868 8869 (fontified t c-is-sws t) 8869 8927 (fontified t) 8927 8931 (face font-lock-keyword-face fontified t) 8931 8932 (fontified t) 8932 8945 (face font-lock-type-face fontified t) 8945 8967 (fontified t) 8967 8972 (face font-lock-keyword-face fontified t) 8972 8978 (fontified t) 8978 8982 (face font-lock-keyword-face fontified t) 8982 8996 (fontified t) 8996 8997 (c-type c-decl-end fontified t) 8997 9004 (fontified t) 9004 9006 (face font-lock-keyword-face fontified t) 9006 9024 (fontified t) 9024 9027 (face font-lock-string-face fontified t) 9027 9036 (fontified t) 9036 9041 (fontified t c-is-sws t c-in-sws t) 9041 9042 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 9042 9044 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 9044 9074 (face font-lock-comment-face fontified t c-in-sws t) 9074 9075 (fontified t c-in-sws t c-is-sws t) 9075 9076 (fontified t c-is-sws t) 9076 9096 (fontified t) 9096 9100 (face font-lock-type-face fontified t) 9100 9103 (fontified t) 9103 9108 (face font-lock-string-face fontified t) 9108 9138 (fontified t) 9138 9144 (face font-lock-keyword-face fontified t) 9144 9169 (fontified t) 9169 9172 (face font-lock-comment-delimiter-face fontified t) 9172 9187 (face font-lock-comment-face fontified t) 9187 9192 (fontified t) 9192 9196 (face font-lock-keyword-face fontified t) 9196 9208 (fontified t) 9208 9209 (c-type c-decl-end fontified t) 9209 9212 (fontified t) 9212 9215 (face font-lock-comment-delimiter-face fontified t) 9215 9244 (face font-lock-comment-face fontified t) 9244 9248 (fontified t) 9248 9252 (face font-lock-keyword-face fontified t) 9252 9264 (fontified t) 9264 9265 (c-type c-decl-end fontified t) 9265 9268 (c-is-sws t c-in-sws t fontified t) 9268 9269 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 9269 9271 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 9271 9294 (c-in-sws t face font-lock-comment-face fontified t) 9294 9300 (c-in-sws t c-is-sws t fontified t) 9300 9301 (c-is-sws t face font-lock-keyword-face fontified t) 9301 9302 (face font-lock-keyword-face fontified t) 9302 9309 (fontified t) 9309 9312 (face font-lock-string-face fontified t) 9312 9314 (fontified t) 9314 9346 (fontified t) 9346 9349 (face font-lock-comment-delimiter-face fontified t) 9349 9370 (face font-lock-comment-face fontified t) 9370 9376 (fontified t) 9376 9382 (face font-lock-keyword-face fontified t) 9382 9384 (fontified t) 9384 9387 (face font-lock-type-face fontified t) 9387 9398 (fontified t) 9398 9402 (face font-lock-keyword-face fontified t) 9402 9426 (fontified t) 9426 9427 (c-type c-decl-end fontified t) 9427 9434 (fontified t) 9434 9436 (face font-lock-keyword-face fontified t) 9436 9455 (fontified t) 9455 9458 (face font-lock-string-face fontified t) 9458 9597 (fontified t) 9597 9602 (face font-lock-keyword-face fontified t) 9602 9649 (fontified t) 9649 9652 (face font-lock-comment-delimiter-face fontified t) 9652 9673 (face font-lock-comment-face fontified t) 9673 9679 (fontified t) 9679 9685 (face font-lock-keyword-face fontified t) 9685 9687 (fontified t) 9687 9690 (face font-lock-type-face fontified t) 9690 9701 (fontified t) 9701 9705 (face font-lock-keyword-face fontified t) 9705 9724 (fontified t) 9724 9725 (c-type c-decl-end fontified t) 9725 9726 (fontified t) 9726 9732 (fontified t c-is-sws t c-in-sws t) 9732 9733 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 9733 9734 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 9734 9879 (face font-lock-comment-face fontified t c-in-sws t) 9879 9983 (face font-lock-comment-face fontified t c-in-sws t) 9983 9984 (c-is-sws t fontified t) 9984 9990 (fontified t c-in-sws t c-is-sws t) 9990 9991 (fontified t c-is-sws t) 9991 10021 (fontified t) 10021 10024 (face font-lock-comment-delimiter-face fontified t) 10024 10045 (face font-lock-comment-face fontified t) 10045 10051 (fontified t) 10051 10053 (face font-lock-keyword-face fontified t) 10053 10081 (fontified t) 10081 10082 (face font-lock-negation-char-face fontified t) 10082 10093 (fontified t) 10093 10098 (face font-lock-type-face fontified t) 10098 10124 (fontified t) 10124 10130 (face font-lock-keyword-face fontified t) 10130 10152 (fontified t) 10152 10158 (face font-lock-keyword-face fontified t) 10158 10160 (fontified t) 10160 10163 (face font-lock-type-face fontified t) 10163 10174 (fontified t) 10174 10178 (face font-lock-keyword-face fontified t) 10178 10191 (fontified t) 10191 10192 (c-type c-decl-end fontified t) 10192 10229 (fontified t) 10229 10230 (fontified t c-is-sws t c-in-sws t) 10230 10231 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 10231 10233 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 10233 10254 (face font-lock-comment-face fontified t c-in-sws t) 10254 10260 (fontified t c-in-sws t) 10260 10261 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 10261 10262 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 10262 10386 (face font-lock-comment-face fontified t c-in-sws t) 10386 10621 (face font-lock-comment-face fontified t c-in-sws t) 10621 10622 (fontified t c-in-sws t) 10622 10628 (fontified t c-in-sws t c-is-sws t) 10628 10629 (fontified t c-is-sws t) 10629 10656 (fontified t) 10656 10662 (face font-lock-keyword-face fontified t) 10662 10664 (fontified t) 10664 10667 (face font-lock-type-face fontified t) 10667 10678 (fontified t) 10678 10682 (face font-lock-keyword-face fontified t) 10682 10704 (fontified t) 10704 10705 (c-type c-decl-end fontified t) 10705 10718 (fontified t) 10718 10721 (face font-lock-type-face fontified t) 10721 10722 (face font-lock-type-face c-type c-decl-id-start fontified t) 10722 10723 (fontified t) 10723 10726 (face font-lock-variable-name-face fontified t) 10726 10734 (fontified t) 10734 10736 (face font-lock-keyword-face fontified t) 10736 10755 (fontified t) 10755 10759 (face font-lock-string-face fontified t) 10759 10792 (fontified t) 10792 10797 (face font-lock-keyword-face fontified t) 10797 10807 (fontified t) 10807 10813 (fontified t c-is-sws t c-in-sws t) 10813 10814 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 10814 10816 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 10816 10834 (face font-lock-comment-face fontified t c-in-sws t) 10834 10835 (fontified t c-in-sws t) 10835 10841 (fontified t c-in-sws t c-is-sws t) 10841 10842 (fontified t c-is-sws t) 10842 10855 (fontified t) 10855 10880 (fontified t c-is-sws t c-in-sws t) 10880 10881 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 10881 10883 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 10883 10890 (face font-lock-comment-face fontified t c-in-sws t) 10890 10896 (fontified t c-in-sws t c-is-sws t) 10896 10897 (face font-lock-keyword-face fontified t c-is-sws t) 10897 10898 (face font-lock-keyword-face fontified t) 10898 11005 (fontified t) 11005 11008 (face font-lock-comment-delimiter-face fontified t) 11008 11026 (face font-lock-comment-face fontified t) 11026 11027 (fontified t) 11027 11032 (face font-lock-keyword-face fontified t) 11032 11346 (fontified t) 11346 11352 (face font-lock-keyword-face fontified t) 11352 11378 (fontified t) 11378 11382 (face font-lock-keyword-face fontified t) 11382 11402 (fontified t) 11402 11403 (fontified t) 11403 11404 (fontified t) 11404 11410 (fontified t) 11410 11412 (face font-lock-keyword-face fontified t) 11412 11431 (fontified t) 11431 11435 (face font-lock-string-face fontified t) 11435 11444 (fontified t) 11444 11449 (fontified t c-is-sws t c-in-sws t) 11449 11450 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 11450 11452 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 11452 11472 (face font-lock-comment-face fontified t c-in-sws t) 11472 11473 (fontified t c-in-sws t c-is-sws t) 11473 11474 (fontified t c-is-sws t) 11474 11500 (fontified t) 11500 11505 (face font-lock-keyword-face fontified t) 11505 11519 (fontified t) 11519 11523 (face font-lock-keyword-face fontified t) 11523 11543 (fontified t) 11543 11544 (c-type c-decl-end fontified t) 11544 11551 (fontified t) 11551 11553 (face font-lock-keyword-face fontified t) 11553 11572 (fontified t) 11572 11576 (face font-lock-string-face fontified t) 11576 11585 (fontified t) 11585 11618 (fontified t c-is-sws t c-in-sws t) 11618 11619 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 11619 11621 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 11621 11641 (face font-lock-comment-face fontified t c-in-sws t) 11641 11649 (fontified t c-in-sws t c-is-sws t) 11649 11650 (fontified t c-is-sws t) 11650 11683 (fontified t) 11683 11688 (face font-lock-keyword-face fontified t) 11688 11702 (fontified t) 11702 11706 (face font-lock-keyword-face fontified t) 11706 11719 (fontified t) 11719 11720 (c-type c-decl-end fontified t) 11720 11727 (fontified t) 11727 11732 (face font-lock-keyword-face fontified t) 11732 11733 (fontified t) 11733 11736 (face font-lock-type-face fontified t) 11736 11737 (face font-lock-type-face c-type c-decl-id-start fontified t) 11737 11739 (fontified t) 11739 11744 (face font-lock-variable-name-face fontified t) 11744 11746 (fontified t) 11746 11747 (category c-cpp-delimiter face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 11747 11749 (face font-lock-preprocessor-face fontified t c-in-sws t) 11749 11750 (fontified t c-in-sws t) 11750 11757 (face font-lock-preprocessor-face fontified t c-in-sws t) 11757 11769 (fontified t c-in-sws t) 11769 11776 (face font-lock-preprocessor-face fontified t c-in-sws t) 11776 11790 (fontified t c-in-sws t) 11790 11791 (category c-cpp-delimiter fontified t c-in-sws t) 11791 11797 (fontified t c-is-sws t c-in-sws t) 11797 11798 (face font-lock-keyword-face fontified t c-is-sws t) 11798 11799 (face font-lock-keyword-face fontified t) 11799 11858 (fontified t) 11858 11860 (face font-lock-keyword-face fontified t) 11860 11912 (fontified t) 11912 11922 (fontified t) 11922 11924 (face font-lock-type-face fontified t) 11924 11925 (face font-lock-type-face c-type c-decl-id-start fontified t) 11925 11926 (fontified t) 11926 11927 (face font-lock-variable-name-face fontified t) 11927 12061 (fontified t) 12061 12063 (face font-lock-keyword-face fontified t) 12063 12120 (fontified t) 12120 12128 (face font-lock-keyword-face fontified t) 12128 12195 (fontified t) 12195 12200 (face font-lock-keyword-face fontified t) 12200 12249 (fontified t) 12249 12251 (face font-lock-keyword-face fontified t) 12251 12302 (fontified t) 12302 12304 (face font-lock-type-face fontified t) 12304 12305 (face font-lock-type-face c-type c-decl-id-start fontified t) 12305 12306 (fontified t) 12306 12307 (face font-lock-variable-name-face fontified t) 12307 12321 (fontified t) 12321 12323 (face font-lock-keyword-face fontified t) 12323 12463 (fontified t) 12463 12477 (fontified t) 12477 12482 (face font-lock-keyword-face fontified t) 12482 12555 (fontified t) 12555 12559 (face font-lock-keyword-face fontified t) 12559 12560 (fontified t) 12560 12561 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 12561 12566 (face font-lock-preprocessor-face fontified t c-in-sws t) 12566 12567 (fontified t c-in-sws t) 12567 12573 (fontified t c-is-sws t c-in-sws t) 12573 12574 (fontified t c-is-sws t) 12574 12583 (fontified t) 12583 12586 (face font-lock-keyword-face fontified t) 12586 12629 (fontified t) 12629 12634 (face font-lock-type-face fontified t) 12634 12699 (fontified t) 12699 12707 (fontified t c-is-sws t c-in-sws t) 12707 12708 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 12708 12710 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 12710 12774 (face font-lock-comment-face fontified t c-in-sws t) 12774 12775 (fontified t c-in-sws t) 12775 12783 (fontified t c-in-sws t c-is-sws t) 12783 12784 (fontified t c-is-sws t) 12784 12915 (fontified t) 12915 12917 (face font-lock-keyword-face fontified t) 12917 12954 (fontified t) 12954 12956 (face font-lock-comment-delimiter-face fontified t) 12956 13035 (face font-lock-comment-face fontified t) 13035 13092 (face font-lock-comment-face fontified t) 13092 13101 (fontified t) 13101 13104 (face font-lock-keyword-face fontified t) 13104 13119 (fontified t) 13119 13124 (face font-lock-type-face fontified t) 13124 13189 (fontified t) 13189 13191 (face font-lock-keyword-face fontified t) 13191 13225 (fontified t) 13225 13228 (face font-lock-string-face fontified t) 13228 13253 (fontified t) 13253 13258 (face font-lock-type-face fontified t) 13258 13317 (fontified t) 13317 13321 (face font-lock-keyword-face fontified t) 13321 13329 (fontified t) 13329 13334 (fontified t c-is-sws t c-in-sws t) 13334 13335 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 13335 13337 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 13337 13374 (face font-lock-comment-face fontified t c-in-sws t) 13374 13382 (fontified t c-in-sws t c-is-sws t) 13382 13383 (fontified t c-is-sws t) 13383 13399 (fontified t) 13399 13401 (face font-lock-keyword-face fontified t) 13401 13444 (fontified t) 13444 13447 (face font-lock-string-face fontified t) 13447 13487 (fontified t) 13487 13488 (c-is-sws t c-in-sws t fontified t) 13488 13489 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 13489 13491 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 13491 13512 (c-in-sws t face font-lock-comment-face fontified t) 13512 13515 (c-in-sws t c-is-sws t fontified t) 13515 13516 (c-is-sws t face font-lock-keyword-face fontified t) 13516 13521 (face font-lock-keyword-face fontified t) 13521 13530 (fontified t) 13530 13532 (c-is-sws t c-in-sws t fontified t) 13532 13533 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 13533 13535 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 13535 13547 (c-in-sws t face font-lock-comment-face fontified t) 13547 13548 (c-is-sws t fontified t) 13548 13590 (fontified t) 13590 13593 (face font-lock-comment-delimiter-face fontified t) 13593 13617 (face font-lock-comment-face fontified t) 13617 13675 (fontified t) 13675 13681 (fontified t c-is-sws t c-in-sws t) 13681 13682 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 13682 13683 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 13683 13911 (face font-lock-comment-face fontified t c-in-sws t) 13911 13913 (fontified t c-in-sws t) 13913 13919 (fontified t c-in-sws t c-is-sws t) 13919 13920 (face font-lock-keyword-face fontified t c-is-sws t) 13920 13921 (face font-lock-keyword-face fontified t) 13921 13949 (fontified t) 13949 13952 (face font-lock-string-face fontified t) 13952 13970 (fontified t) 13970 13981 (face font-lock-type-face fontified t) 13981 13982 (face font-lock-type-face c-type c-decl-id-start fontified t) 13982 13984 (fontified t) 13984 13986 (face font-lock-variable-name-face fontified t) 13986 14107 (fontified t) 14107 14115 (fontified t) 14115 14117 (face font-lock-keyword-face fontified t) 14117 14334 (fontified t) 14334 14340 (face font-lock-keyword-face fontified t) 14340 14520 (fontified t) 14520 14526 (face font-lock-keyword-face fontified t) 14526 14541 (fontified t) 14541 14544 (fontified t c-is-sws t c-in-sws t) 14544 14545 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 14545 14547 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 14547 14569 (face font-lock-comment-face fontified t c-in-sws t) 14569 14570 (fontified t c-in-sws t) 14570 14574 (fontified t c-in-sws t c-is-sws t) 14574 14575 (face font-lock-keyword-face fontified t c-is-sws t) 14575 14578 (face font-lock-keyword-face fontified t) 14578 14595 (fontified t) 14595 14596 (fontified t) 14596 14614 (fontified t c-is-sws t c-in-sws t) 14614 14615 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 14615 14617 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 14617 14641 (face font-lock-comment-face fontified t c-in-sws t) 14641 14647 (fontified t c-in-sws t c-is-sws t) 14647 14648 (fontified t c-is-sws t) 14648 14669 (fontified t) 14669 14673 (face font-lock-type-face fontified t) 14673 14747 (fontified t) 14747 14773 (fontified t c-is-sws t c-in-sws t) 14773 14774 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 14774 14776 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 14776 14790 (face font-lock-comment-face fontified t c-in-sws t) 14790 14796 (fontified t c-in-sws t c-is-sws t) 14796 14797 (fontified t c-is-sws t) 14797 14838 (fontified t) 14838 14841 (face font-lock-comment-delimiter-face fontified t) 14841 14869 (face font-lock-comment-face fontified t) 14869 14875 (fontified t) 14875 14877 (face font-lock-keyword-face fontified t) 14877 14879 (fontified t) 14879 14880 (face font-lock-negation-char-face fontified t) 14880 14891 (fontified t) 14891 14896 (face font-lock-type-face fontified t) 14896 14913 (fontified t) 14913 14917 (fontified t c-is-sws t c-in-sws t) 14917 14918 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 14918 14920 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 14920 14936 (face font-lock-comment-face fontified t c-in-sws t) 14936 14937 (fontified t c-in-sws t c-is-sws t) 14937 14938 (fontified t c-is-sws t) 14938 14974 (fontified t) 14974 14980 (face font-lock-keyword-face fontified t) 14980 14982 (fontified t) 14982 14985 (face font-lock-type-face fontified t) 14985 14996 (fontified t) 14996 15000 (face font-lock-keyword-face fontified t) 15000 15020 (fontified t) 15020 15021 (c-type c-decl-end fontified t) 15021 15023 (c-is-sws t c-in-sws t fontified t) 15023 15024 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 15024 15026 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 15026 15058 (c-in-sws t face font-lock-comment-face fontified t) 15058 15064 (c-in-sws t c-is-sws t fontified t) 15064 15065 (c-is-sws t face font-lock-keyword-face fontified t) 15065 15066 (face font-lock-keyword-face fontified t) 15066 15088 (fontified t) 15088 15091 (face font-lock-string-face fontified t) 15091 15134 (fontified t) 15134 15136 (face font-lock-keyword-face fontified t) 15136 15143 (fontified t) 15143 15146 (face font-lock-string-face fontified t) 15146 15148 (fontified t) 15148 15168 (fontified t) 15168 15173 (face font-lock-keyword-face fontified t) 15173 15223 (fontified t) 15223 15225 (face font-lock-keyword-face fontified t) 15225 15253 (fontified t) 15253 15254 (face font-lock-negation-char-face fontified t) 15254 15280 (fontified t) 15280 15292 (fontified t c-is-sws t c-in-sws t) 15292 15293 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 15293 15295 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 15295 15307 (face font-lock-comment-face fontified t c-in-sws t) 15307 15308 (fontified t c-in-sws t) 15308 15320 (fontified t c-in-sws t c-is-sws t) 15320 15321 (fontified t c-is-sws t) 15321 15386 (fontified t) 15386 15392 (face font-lock-keyword-face fontified t) 15392 15489 (fontified t) 15489 15494 (face font-lock-keyword-face fontified t) 15494 15514 (fontified t) 15514 15518 (face font-lock-keyword-face fontified t) 15518 15519 (fontified t) 15519 15521 (face font-lock-keyword-face fontified t) 15521 15528 (fontified t) 15528 15531 (face font-lock-string-face fontified t) 15531 15553 (fontified t) 15553 15558 (face font-lock-keyword-face fontified t) 15558 15581 (fontified t) 15581 15584 (face font-lock-string-face fontified t) 15584 15593 (fontified t) 15593 15596 (face font-lock-string-face fontified t) 15596 15622 (fontified t) 15622 15624 (face font-lock-keyword-face fontified t) 15624 15652 (fontified t) 15652 15653 (face font-lock-negation-char-face fontified t) 15653 15667 (fontified t) 15667 15679 (fontified t) 15679 15691 (fontified t c-is-sws t c-in-sws t) 15691 15692 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 15692 15694 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 15694 15706 (face font-lock-comment-face fontified t c-in-sws t) 15706 15707 (fontified t c-in-sws t) 15707 15719 (fontified t c-in-sws t c-is-sws t) 15719 15720 (fontified t c-is-sws t) 15720 15786 (fontified t) 15786 15792 (face font-lock-keyword-face fontified t) 15792 15889 (fontified t) 15889 15894 (face font-lock-keyword-face fontified t) 15894 15945 (fontified t) 15945 15950 (face font-lock-keyword-face fontified t) 15950 15996 (fontified t) 15996 15998 (face font-lock-keyword-face fontified t) 15998 16000 (fontified t) 16000 16001 (face font-lock-negation-char-face fontified t) 16001 16022 (fontified t) 16022 16027 (fontified t c-is-sws t c-in-sws t) 16027 16028 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 16028 16030 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 16030 16050 (face font-lock-comment-face fontified t c-in-sws t) 16050 16051 (fontified t c-in-sws t c-is-sws t) 16051 16052 (fontified t c-is-sws t) 16052 16078 (fontified t) 16078 16083 (face font-lock-keyword-face fontified t) 16083 16099 (fontified t) 16099 16101 (face font-lock-keyword-face fontified t) 16101 16108 (fontified t) 16108 16111 (face font-lock-string-face fontified t) 16111 16120 (fontified t) 16120 16123 (face font-lock-string-face fontified t) 16123 16133 (fontified t) 16133 16134 (fontified t c-is-sws t c-in-sws t) 16134 16135 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 16135 16137 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 16137 16205 (face font-lock-comment-face fontified t c-in-sws t) 16205 16213 (fontified t c-in-sws t c-is-sws t) 16213 16214 (face font-lock-keyword-face fontified t c-is-sws t) 16214 16215 (face font-lock-keyword-face fontified t) 16215 16283 (fontified t) 16283 16286 (face font-lock-string-face fontified t) 16286 16295 (fontified t) 16295 16298 (face font-lock-string-face fontified t) 16298 16306 (fontified t) 16306 16309 (face font-lock-comment-delimiter-face fontified t) 16309 16321 (face font-lock-comment-face fontified t) 16321 16331 (fontified t) 16331 16333 (face font-lock-keyword-face fontified t) 16333 16364 (fontified t) 16364 16369 (fontified t c-is-sws t c-in-sws t) 16369 16370 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 16370 16372 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 16372 16406 (face font-lock-comment-face fontified t c-in-sws t) 16406 16409 (fontified t c-in-sws t c-is-sws t) 16409 16410 (fontified t c-is-sws t) 16410 16450 (fontified t) 16450 16455 (face font-lock-keyword-face fontified t) 16455 16557 (fontified t) 16557 16563 (face font-lock-keyword-face fontified t) 16563 16616 (fontified t) 16616 16622 (fontified t c-is-sws t c-in-sws t) 16622 16623 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 16623 16625 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 16625 16638 (face font-lock-comment-face fontified t c-in-sws t) 16638 16642 (fontified t c-in-sws t c-is-sws t) 16642 16643 (face font-lock-keyword-face fontified t c-is-sws t) 16643 16646 (face font-lock-keyword-face fontified t) 16646 16665 (fontified t) 16665 16666 (c-type c-decl-end fontified t) 16666 16669 (fontified t c-is-sws t c-in-sws t) 16669 16670 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 16670 16672 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 16672 16695 (face font-lock-comment-face fontified t c-in-sws t) 16695 16701 (fontified t c-in-sws t c-is-sws t) 16701 16702 (fontified t c-is-sws t) 16702 16722 (fontified t) 16722 16723 (category c-cpp-delimiter face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 16723 16725 (face font-lock-preprocessor-face fontified t c-in-sws t) 16725 16726 (fontified t c-in-sws t) 16726 16733 (face font-lock-preprocessor-face fontified t c-in-sws t) 16733 16745 (fontified t c-in-sws t) 16745 16752 (face font-lock-preprocessor-face fontified t c-in-sws t) 16752 16766 (fontified t c-in-sws t) 16766 16767 (category c-cpp-delimiter fontified t c-in-sws t) 16767 16773 (fontified t c-is-sws t c-in-sws t) 16773 16774 (face font-lock-keyword-face fontified t c-is-sws t) 16774 16775 (face font-lock-keyword-face fontified t) 16775 16834 (fontified t) 16834 16839 (face font-lock-keyword-face fontified t) 16839 16888 (fontified t) 16888 16890 (face font-lock-keyword-face fontified t) 16890 16941 (fontified t) 16941 16943 (face font-lock-type-face fontified t) 16943 16944 (face font-lock-type-face c-type c-decl-id-start fontified t) 16944 16945 (fontified t) 16945 16946 (face font-lock-variable-name-face fontified t) 16946 16960 (fontified t) 16960 16962 (face font-lock-keyword-face fontified t) 16962 17116 (fontified t) 17116 17121 (face font-lock-keyword-face fontified t) 17121 17194 (fontified t) 17194 17198 (face font-lock-keyword-face fontified t) 17198 17199 (fontified t) 17199 17200 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 17200 17205 (face font-lock-preprocessor-face fontified t c-in-sws t) 17205 17206 (fontified t c-in-sws t) 17206 17212 (fontified t c-is-sws t c-in-sws t) 17212 17213 (fontified t c-is-sws t) 17213 17222 (fontified t) 17222 17225 (face font-lock-keyword-face fontified t) 17225 17289 (fontified t) 17289 17301 (fontified t) 17301 17309 (fontified t c-is-sws t c-in-sws t) 17309 17310 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 17310 17312 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 17312 17376 (face font-lock-comment-face fontified t c-in-sws t) 17376 17377 (fontified t c-in-sws t) 17377 17385 (fontified t c-in-sws t c-is-sws t) 17385 17386 (fontified t c-is-sws t) 17386 17457 (fontified t) 17457 17459 (face font-lock-keyword-face fontified t) 17459 17466 (fontified t) 17466 17469 (face font-lock-string-face fontified t) 17469 17484 (fontified t) 17484 17489 (face font-lock-type-face fontified t) 17489 17541 (fontified t) 17541 17542 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 17542 17544 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 17544 17556 (face font-lock-comment-face fontified t c-in-sws t) 17556 17557 (fontified t c-in-sws t) 17557 17563 (fontified t c-in-sws t c-is-sws t) 17563 17564 (fontified t c-is-sws t) 17564 17756 (fontified t) 17756 17762 (face font-lock-keyword-face fontified t) 17762 17783 (fontified t) 17783 17787 (face font-lock-keyword-face fontified t) 17787 17818 (fontified t) 17818 17819 (fontified t) 17819 17820 (fontified t c-is-sws t c-in-sws t) 17820 17821 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 17821 17823 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 17823 17840 (face font-lock-comment-face fontified t c-in-sws t) 17840 17844 (fontified t c-in-sws t c-is-sws t) 17844 17845 (fontified t c-is-sws t) 17845 17852 (fontified t) 17852 17855 (face font-lock-type-face fontified t) 17855 17856 (face font-lock-type-face c-type c-decl-id-start fontified t) 17856 17857 (fontified t) 17857 17870 (face font-lock-variable-name-face fontified t) 17870 17881 (fontified t) 17881 17884 (face font-lock-type-face fontified t) 17884 17885 (face font-lock-type-face c-type c-decl-id-start fontified t) 17885 17886 (fontified t) 17886 17896 (face font-lock-variable-name-face fontified t) 17896 17900 (fontified t) 17900 17923 (c-is-sws t c-in-sws t fontified t) 17923 17924 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 17924 17926 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 17926 17936 (c-in-sws t face font-lock-comment-face fontified t) 17936 17942 (c-in-sws t c-is-sws t fontified t) 17942 17943 (c-is-sws t face font-lock-keyword-face fontified t) 17943 17947 (face font-lock-keyword-face fontified t) 17947 17976 (fontified t) 17976 17978 (face font-lock-type-face fontified t) 17978 17979 (face font-lock-type-face c-type c-decl-id-start fontified t) 17979 17980 (fontified t) 17980 17990 (face font-lock-variable-name-face fontified t) 17990 17993 (fontified t) 17993 17995 (face font-lock-keyword-face fontified t) 17995 18043 (fontified t) 18043 18045 (face font-lock-keyword-face fontified t) 18045 18081 (fontified t) 18081 18083 (face font-lock-keyword-face fontified t) 18083 18121 (fontified t) 18121 18126 (face font-lock-keyword-face fontified t) 18126 18183 (fontified t) 18183 18191 (face font-lock-keyword-face fontified t) 18191 18201 (fontified t) 18201 18202 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 18202 18207 (face font-lock-preprocessor-face fontified t c-in-sws t) 18207 18215 (fontified t c-in-sws t) 18215 18223 (fontified t c-is-sws t c-in-sws t) 18223 18224 (face font-lock-keyword-face fontified t c-is-sws t) 18224 18227 (face font-lock-keyword-face fontified t) 18227 18228 (fontified t) 18228 18230 (face font-lock-keyword-face fontified t) 18230 18264 (fontified t) 18264 18266 (face font-lock-keyword-face fontified t) 18266 18383 (fontified t) 18383 18437 (fontified t) 18437 18438 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 18438 18443 (face font-lock-preprocessor-face fontified t c-in-sws t) 18443 18444 (fontified t c-in-sws t) 18444 18450 (fontified t c-is-sws t c-in-sws t) 18450 18451 (fontified t c-is-sws t) 18451 18458 (fontified t) 18458 18460 (face font-lock-keyword-face fontified t) 18460 18621 (fontified t) 18621 18625 (face font-lock-keyword-face fontified t) 18625 18695 (fontified t) 18695 18697 (face font-lock-keyword-face fontified t) 18697 18738 (fontified t) 18738 18756 (fontified t c-is-sws t c-in-sws t) 18756 18757 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 18757 18759 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 18759 18770 (face font-lock-comment-face fontified t c-in-sws t) 18770 18776 (fontified t c-in-sws t c-is-sws t) 18776 18777 (fontified t c-is-sws t) 18777 18940 (fontified t) 18940 18947 (fontified t) 18947 18953 (face font-lock-keyword-face fontified t) 18953 18979 (fontified t) 18979 18983 (face font-lock-keyword-face fontified t) 18983 19002 (fontified t) 19002 19003 (c-type c-decl-end fontified t) 19003 19005 (fontified t) 19005 19008 (face font-lock-comment-delimiter-face fontified t) 19008 19040 (face font-lock-comment-face fontified t) 19040 19046 (fontified t) 19046 19048 (face font-lock-keyword-face fontified t) 19048 19055 (fontified t) 19055 19058 (face font-lock-string-face fontified t) 19058 19067 (fontified t) 19067 19072 (fontified t c-is-sws t c-in-sws t) 19072 19073 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 19073 19075 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 19075 19106 (face font-lock-comment-face fontified t c-in-sws t) 19106 19114 (fontified t c-in-sws t c-is-sws t) 19114 19115 (fontified t c-is-sws t) 19115 19167 (fontified t) 19167 19173 (face font-lock-keyword-face fontified t) 19173 19206 (fontified t) 19206 19210 (face font-lock-type-face fontified t) 19210 19251 (fontified t) 19251 19254 (face font-lock-comment-delimiter-face fontified t) 19254 19267 (face font-lock-comment-face fontified t) 19267 19271 (fontified t) 19271 19275 (face font-lock-keyword-face fontified t) 19275 19287 (fontified t) 19287 19288 (c-type c-decl-end fontified t) 19288 19291 (fontified t) 19291 19294 (face font-lock-comment-delimiter-face fontified t) 19294 19317 (face font-lock-comment-face fontified t) 19317 19323 (fontified t) 19323 19328 (face font-lock-keyword-face fontified t) 19328 19372 (fontified t) 19372 19374 (face font-lock-keyword-face fontified t) 19374 19381 (fontified t) 19381 19384 (face font-lock-string-face fontified t) 19384 19393 (fontified t) 19393 19396 (face font-lock-string-face fontified t) 19396 19433 (fontified t) 19433 19435 (face font-lock-keyword-face fontified t) 19435 19442 (fontified t) 19442 19445 (face font-lock-string-face fontified t) 19445 19454 (fontified t) 19454 19457 (face font-lock-string-face fontified t) 19457 19459 (fontified t) 19459 19486 (fontified t) 19486 19507 (fontified t c-is-sws t c-in-sws t) 19507 19508 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 19508 19510 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 19510 19520 (face font-lock-comment-face fontified t c-in-sws t) 19520 19521 (fontified t c-in-sws t c-is-sws t) 19521 19522 (face font-lock-keyword-face fontified t c-is-sws t) 19522 19523 (face font-lock-keyword-face fontified t) 19523 19525 (fontified t) 19525 19526 (face font-lock-negation-char-face fontified t) 19526 19546 (fontified t) 19546 19550 (fontified t c-is-sws t c-in-sws t) 19550 19551 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 19551 19553 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 19553 19573 (face font-lock-comment-face fontified t c-in-sws t) 19573 19576 (fontified t c-in-sws t c-is-sws t) 19576 19577 (fontified t c-is-sws t) 19577 19599 (fontified t) 19599 19604 (face font-lock-keyword-face fontified t) 19604 19617 (fontified t) 19617 19622 (face font-lock-keyword-face fontified t) 19622 19716 (fontified t) 19716 19722 (face font-lock-keyword-face fontified t) 19722 19807 (fontified t) 19807 19813 (face font-lock-keyword-face fontified t) 19813 19833 (fontified t) 19833 19837 (face font-lock-keyword-face fontified t) 19837 19855 (fontified t) 19855 19856 (c-type c-decl-end fontified t) 19856 19858 (fontified t c-is-sws t c-in-sws t) 19858 19859 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 19859 19861 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 19861 19880 (face font-lock-comment-face fontified t c-in-sws t) 19880 19886 (fontified t c-in-sws t c-is-sws t) 19886 19887 (fontified t c-is-sws t) 19887 19900 (fontified t) 19900 19920 (c-is-sws t c-in-sws t fontified t) 19920 19921 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 19921 19923 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 19923 19940 (c-in-sws t face font-lock-comment-face fontified t) 19940 19946 (c-in-sws t c-is-sws t fontified t) 19946 19947 (c-is-sws t face font-lock-keyword-face fontified t) 19947 19951 (face font-lock-keyword-face fontified t) 19951 19991 (fontified t) 19991 19997 (fontified t) 19997 19999 (face font-lock-keyword-face fontified t) 19999 20006 (fontified t) 20006 20010 (face font-lock-string-face fontified t) 20010 20020 (fontified t) 20020 20026 (face font-lock-keyword-face fontified t) 20026 20038 (fontified t) 20038 20052 (fontified t c-is-sws t c-in-sws t) 20052 20053 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20053 20055 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20055 20076 (face font-lock-comment-face fontified t c-in-sws t) 20076 20082 (fontified t c-in-sws t c-is-sws t) 20082 20083 (fontified t c-is-sws t) 20083 20096 (fontified t) 20096 20116 (fontified t c-is-sws t c-in-sws t) 20116 20117 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20117 20119 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20119 20136 (face font-lock-comment-face fontified t c-in-sws t) 20136 20142 (fontified t c-in-sws t c-is-sws t) 20142 20143 (fontified t c-is-sws t) 20143 20166 (fontified t) 20166 20176 (fontified t c-is-sws t c-in-sws t) 20176 20177 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20177 20179 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20179 20198 (face font-lock-comment-face fontified t c-in-sws t) 20198 20204 (fontified t c-in-sws t c-is-sws t) 20204 20205 (face font-lock-keyword-face fontified t c-is-sws t) 20205 20206 (face font-lock-keyword-face fontified t) 20206 20235 (fontified t) 20235 20241 (face font-lock-keyword-face fontified t) 20241 20253 (fontified t) 20253 20267 (fontified t c-is-sws t c-in-sws t) 20267 20268 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20268 20270 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20270 20295 (face font-lock-comment-face fontified t c-in-sws t) 20295 20301 (fontified t c-in-sws t c-is-sws t) 20301 20302 (fontified t c-is-sws t) 20302 20366 (fontified t) 20366 20376 (fontified t c-is-sws t c-in-sws t) 20376 20377 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20377 20379 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20379 20387 (face font-lock-comment-face fontified t c-in-sws t) 20387 20419 (fontified t c-in-sws t c-is-sws t) 20419 20420 (fontified t c-is-sws t) 20420 20431 (fontified t) 20431 20434 (face font-lock-comment-delimiter-face fontified t) 20434 20460 (face font-lock-comment-face fontified t) 20460 20466 (fontified t) 20466 20472 (face font-lock-keyword-face fontified t) 20472 20490 (fontified t) 20490 20494 (face font-lock-keyword-face fontified t) 20494 20512 (fontified t) 20512 20513 (fontified t) 20513 20524 (fontified t c-is-sws t c-in-sws t) 20524 20525 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20525 20527 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20527 20547 (face font-lock-comment-face fontified t c-in-sws t) 20547 20553 (fontified t c-in-sws t c-is-sws t) 20553 20554 (fontified t c-is-sws t) 20554 20585 (fontified t) 20585 20588 (face font-lock-comment-delimiter-face fontified t) 20588 20605 (face font-lock-comment-face fontified t) 20605 20611 (fontified t) 20611 20616 (face font-lock-keyword-face fontified t) 20616 20639 (fontified t) 20639 20642 (face font-lock-string-face fontified t) 20642 20651 (fontified t) 20651 20654 (face font-lock-string-face fontified t) 20654 20672 (fontified t) 20672 20674 (face font-lock-keyword-face fontified t) 20674 20681 (fontified t) 20681 20685 (face font-lock-string-face fontified t) 20685 20695 (fontified t) 20695 20701 (face font-lock-keyword-face fontified t) 20701 20713 (fontified t) 20713 20725 (fontified t c-is-sws t c-in-sws t) 20725 20726 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20726 20728 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20728 20749 (face font-lock-comment-face fontified t c-in-sws t) 20749 20755 (fontified t c-in-sws t c-is-sws t) 20755 20756 (fontified t c-is-sws t) 20756 20769 (fontified t) 20769 20787 (fontified t c-is-sws t c-in-sws t) 20787 20788 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20788 20790 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20790 20807 (face font-lock-comment-face fontified t c-in-sws t) 20807 20813 (fontified t c-in-sws t c-is-sws t) 20813 20814 (fontified t c-is-sws t) 20814 20837 (fontified t) 20837 20845 (fontified t c-is-sws t c-in-sws t) 20845 20846 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20846 20848 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20848 20870 (face font-lock-comment-face fontified t c-in-sws t) 20870 20876 (fontified t c-in-sws t c-is-sws t) 20876 20877 (fontified t c-is-sws t) 20877 20943 (fontified t) 20943 20952 (fontified t c-is-sws t c-in-sws t) 20952 20953 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 20953 20955 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 20955 20963 (face font-lock-comment-face fontified t c-in-sws t) 20963 20996 (fontified t c-in-sws t c-is-sws t) 20996 20997 (fontified t c-is-sws t) 20997 21006 (fontified t) 21006 21007 (c-is-sws t c-in-sws t fontified t) 21007 21008 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 21008 21010 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 21010 21036 (c-in-sws t face font-lock-comment-face fontified t) 21036 21042 (c-in-sws t c-is-sws t fontified t) 21042 21043 (c-is-sws t face font-lock-keyword-face fontified t) 21043 21048 (face font-lock-keyword-face fontified t) 21048 21060 (fontified t) 21060 21065 (fontified t) 21065 21069 (face font-lock-keyword-face fontified t) 21069 21083 (fontified t) 21083 21084 (c-type c-decl-end fontified t) 21084 21087 (fontified t) 21087 21090 (face font-lock-comment-delimiter-face fontified t) 21090 21121 (face font-lock-comment-face fontified t) 21121 21127 (fontified t) 21127 21129 (face font-lock-keyword-face fontified t) 21129 21142 (fontified t) 21142 21147 (face font-lock-type-face fontified t) 21147 21205 (fontified t) 21205 21210 (face font-lock-type-face fontified t) 21210 21279 (fontified t) 21279 21281 (face font-lock-keyword-face fontified t) 21281 21377 (fontified t) 21377 21380 (face font-lock-comment-delimiter-face fontified t) 21380 21401 (face font-lock-comment-face fontified t) 21401 21402 (fontified t) 21402 21408 (face font-lock-keyword-face fontified t) 21408 21454 (fontified t) 21454 21457 (face font-lock-comment-delimiter-face fontified t) 21457 21479 (face font-lock-comment-face fontified t) 21479 21485 (fontified t) 21485 21490 (face font-lock-keyword-face fontified t) 21490 21497 (fontified t) 21497 21501 (face font-lock-keyword-face fontified t) 21501 21520 (fontified t) 21520 21521 (fontified t) 21521 21523 (c-is-sws t c-in-sws t fontified t) 21523 21524 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 21524 21526 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 21526 21557 (c-in-sws t face font-lock-comment-face fontified t) 21557 21563 (c-in-sws t c-is-sws t fontified t) 21563 21564 (face font-lock-keyword-face c-is-sws t fontified t) 21564 21565 (face font-lock-keyword-face fontified t) 21565 21578 (fontified t) 21578 21583 (face font-lock-type-face fontified t) 21583 21620 (fontified t) 21620 21641 (fontified t) 21641 21646 (face font-lock-type-face fontified t) 21646 21725 (fontified t) 21725 21727 (face font-lock-keyword-face fontified t) 21727 21740 (fontified t) 21740 21745 (face font-lock-type-face fontified t) 21745 21819 (fontified t) 21819 21821 (face font-lock-keyword-face fontified t) 21821 21917 (fontified t) 21917 21920 (face font-lock-comment-delimiter-face fontified t) 21920 21934 (face font-lock-comment-face fontified t) 21934 21935 (fontified t) 21935 21941 (face font-lock-keyword-face fontified t) 21941 21987 (fontified t) 21987 21990 (face font-lock-comment-delimiter-face fontified t) 21990 22012 (face font-lock-comment-face fontified t) 22012 22018 (fontified t) 22018 22023 (face font-lock-keyword-face fontified t) 22023 22030 (fontified t) 22030 22034 (face font-lock-keyword-face fontified t) 22034 22046 (fontified t) 22046 22047 (c-type c-decl-end fontified t) 22047 22054 (fontified t) 22054 22056 (face font-lock-keyword-face fontified t) 22056 22107 (fontified t) 22107 22112 (face font-lock-keyword-face fontified t) 22112 22122 (fontified t) 22122 22180 (fontified t) 22180 22181 (fontified t c-is-sws t c-in-sws t) 22181 22182 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 22182 22184 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 22184 22203 (face font-lock-comment-face fontified t c-in-sws t) 22203 22209 (fontified t c-in-sws t c-is-sws t) 22209 22210 (fontified t c-is-sws t) 22210 22240 (fontified t) 22240 22243 (face font-lock-comment-delimiter-face fontified t) 22243 22264 (face font-lock-comment-face fontified t) 22264 22270 (fontified t) 22270 22276 (face font-lock-keyword-face fontified t) 22276 22291 (fontified t) 22291 22295 (face font-lock-keyword-face fontified t) 22295 22322 (fontified t) 22322 22323 (c-type c-decl-end fontified t) 22323 22330 (fontified t) 22330 22332 (face font-lock-keyword-face fontified t) 22332 22427 (fontified t) 22427 22432 (face font-lock-keyword-face fontified t) 22432 22442 (fontified t) 22442 22448 (c-is-sws t c-in-sws t fontified t) 22448 22449 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 22449 22451 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 22451 22472 (c-in-sws t face font-lock-comment-face fontified t) 22472 22473 (c-in-sws t fontified t) 22473 22477 (c-in-sws t c-is-sws t fontified t) 22477 22478 (c-is-sws t face font-lock-keyword-face fontified t) 22478 22481 (face font-lock-keyword-face fontified t) 22481 22495 (fontified t) 22495 22496 (c-type c-decl-end fontified t) 22496 22499 (fontified t c-is-sws t c-in-sws t) 22499 22500 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 22500 22502 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 22502 22525 (face font-lock-comment-face fontified t c-in-sws t) 22525 22529 (fontified t c-in-sws t c-is-sws t) 22529 22530 (fontified t c-is-sws t) 22530 22537 (fontified t) 22537 22540 (face font-lock-type-face fontified t) 22540 22541 (face font-lock-type-face c-type c-decl-id-start fontified t) 22541 22542 (fontified t) 22542 22545 (face font-lock-variable-name-face fontified t) 22545 22553 (fontified t) 22553 22555 (face font-lock-keyword-face fontified t) 22555 22629 (fontified t) 22629 22651 (fontified t) 22651 22654 (face font-lock-comment-delimiter-face fontified t) 22654 22672 (face font-lock-comment-face fontified t) 22672 22673 (fontified t) 22673 22678 (face font-lock-keyword-face fontified t) 22678 22694 (fontified t) 22694 22705 (face font-lock-type-face fontified t) 22705 22706 (face font-lock-type-face c-type c-decl-id-start fontified t) 22706 22708 (fontified t) 22708 22713 (face font-lock-variable-name-face fontified t) 22713 22973 (fontified t) 22973 22977 (face font-lock-constant-face fontified t) 22977 23052 (fontified t) 23052 23058 (face font-lock-keyword-face fontified t) 23058 23083 (fontified t) 23083 23087 (face font-lock-keyword-face fontified t) 23087 23102 (fontified t) 23102 23103 (c-type c-decl-end fontified t) 23103 23106 (fontified t c-is-sws t c-in-sws t) 23106 23107 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 23107 23110 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 23110 23118 (face font-lock-comment-face fontified t c-in-sws t) 23118 23124 (fontified t c-in-sws t c-is-sws t) 23124 23125 (fontified t c-is-sws t) 23125 23172 (fontified t) 23172 23178 (fontified t) 23178 23183 (face font-lock-keyword-face fontified t) 23183 23207 (fontified t) 23207 23211 (face font-lock-string-face fontified t) 23211 23241 (fontified t) 23241 23260 (fontified t c-is-sws t c-in-sws t) 23260 23261 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 23261 23263 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 23263 23282 (face font-lock-comment-face fontified t c-in-sws t) 23282 23288 (fontified t c-in-sws t c-is-sws t) 23288 23289 (fontified t c-is-sws t) 23289 23311 (fontified t) 23311 23314 (face font-lock-comment-delimiter-face fontified t) 23314 23324 (face font-lock-comment-face fontified t) 23324 23330 (fontified t) 23330 23335 (face font-lock-keyword-face fontified t) 23335 23341 (fontified t) 23341 23345 (face font-lock-keyword-face fontified t) 23345 23365 (fontified t) 23365 23366 (c-type c-decl-end fontified t) 23366 23368 (fontified t c-is-sws t c-in-sws t) 23368 23369 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 23369 23371 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 23371 23389 (face font-lock-comment-face fontified t c-in-sws t) 23389 23390 (fontified t c-in-sws t) 23390 23396 (fontified t c-in-sws t c-is-sws t) 23396 23397 (face font-lock-keyword-face fontified t c-is-sws t) 23397 23398 (face font-lock-keyword-face fontified t) 23398 23417 (fontified t) 23417 23420 (face font-lock-string-face fontified t) 23420 23451 (fontified t) 23451 23454 (face font-lock-comment-delimiter-face fontified t) 23454 23472 (face font-lock-comment-face fontified t) 23472 23473 (fontified t) 23473 23478 (face font-lock-keyword-face fontified t) 23478 23542 (fontified t) 23542 23548 (fontified t c-is-sws t c-in-sws t) 23548 23549 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 23549 23551 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 23551 23610 (face font-lock-comment-face fontified t c-in-sws t) 23610 23611 (fontified t c-in-sws t) 23611 23617 (fontified t c-in-sws t c-is-sws t) 23617 23618 (fontified t c-is-sws t) 23618 23677 (fontified t) 23677 23679 (face font-lock-keyword-face fontified t) 23679 23700 (fontified t) 23700 23703 (face font-lock-string-face fontified t) 23703 23707 (fontified t) 23707 23737 (fontified t) 23737 23740 (face font-lock-string-face fontified t) 23740 23763 (fontified t) 23763 23766 (face font-lock-string-face fontified t) 23766 23785 (fontified t) 23785 23788 (face font-lock-type-face fontified t) 23788 23789 (face font-lock-type-face c-type c-decl-id-start fontified t) 23789 23790 (fontified t) 23790 23810 (face font-lock-variable-name-face fontified t) 23810 23831 (fontified t) 23831 23834 (face font-lock-string-face fontified t) 23834 23878 (fontified t) 23878 23886 (fontified t c-is-sws t c-in-sws t) 23886 23887 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 23887 23889 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 23889 23940 (face font-lock-comment-face fontified t c-in-sws t) 23940 23941 (fontified t c-in-sws t) 23941 23949 (fontified t c-in-sws t c-is-sws t) 23949 23950 (fontified t c-is-sws t) 23950 24024 (fontified t) 24024 24032 (c-is-sws t c-in-sws t fontified t) 24032 24033 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 24033 24034 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 24034 24220 (c-in-sws t face font-lock-comment-face fontified t) 24220 24339 (c-in-sws t face font-lock-comment-face fontified t) 24339 24340 (c-in-sws t fontified t) 24340 24348 (c-in-sws t c-is-sws t fontified t) 24348 24349 (c-is-sws t face font-lock-keyword-face fontified t) 24349 24350 (face font-lock-keyword-face fontified t) 24350 24603 (fontified t) 24603 24607 (face font-lock-type-face fontified t) 24607 24608 (face font-lock-type-face c-type c-decl-id-start fontified t) 24608 24609 (fontified t) 24609 24616 (face font-lock-variable-name-face fontified t) 24616 24628 (fontified t) 24628 24631 (face font-lock-type-face fontified t) 24631 24632 (face font-lock-type-face c-type c-decl-id-start fontified t) 24632 24633 (fontified t) 24633 24639 (face font-lock-variable-name-face fontified t) 24639 24654 (fontified t) 24654 24657 (face font-lock-type-face fontified t) 24657 24658 (face font-lock-type-face c-type c-decl-id-start fontified t) 24658 24660 (fontified t) 24660 24667 (face font-lock-variable-name-face fontified t) 24667 24670 (fontified t) 24670 24674 (face font-lock-type-face fontified t) 24674 24710 (fontified t) 24710 24712 (face font-lock-type-face fontified t) 24712 24713 (face font-lock-type-face c-type c-decl-id-start fontified t) 24713 24714 (fontified t) 24714 24719 (face font-lock-variable-name-face fontified t) 24719 24721 (fontified t) 24721 24731 (fontified t) 24731 24733 (face font-lock-keyword-face fontified t) 24733 24802 (fontified t) 24802 24828 (fontified t c-is-sws t c-in-sws t) 24828 24829 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 24829 24831 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 24831 24846 (face font-lock-comment-face fontified t c-in-sws t) 24846 24858 (fontified t c-in-sws t c-is-sws t) 24858 24859 (fontified t c-is-sws t) 24859 24901 (fontified t) 24901 24906 (face font-lock-type-face fontified t) 24906 24967 (fontified t) 24967 24969 (face font-lock-comment-delimiter-face fontified t) 24969 25258 (face font-lock-comment-face fontified t) 25258 25270 (face font-lock-comment-face fontified t) 25270 25282 (fontified t) 25282 25284 (face font-lock-keyword-face fontified t) 25284 25405 (fontified t) 25405 25417 (fontified t c-is-sws t c-in-sws t) 25417 25418 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 25418 25420 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 25420 25449 (face font-lock-comment-face fontified t c-in-sws t) 25449 25450 (fontified t c-in-sws t) 25450 25462 (fontified t c-in-sws t c-is-sws t) 25462 25463 (fontified t c-is-sws t) 25463 25484 (fontified t) 25484 25496 (fontified t c-is-sws t c-in-sws t) 25496 25497 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 25497 25499 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 25499 25556 (face font-lock-comment-face fontified t c-in-sws t) 25556 25557 (fontified t c-in-sws t) 25557 25569 (fontified t c-in-sws t c-is-sws t) 25569 25570 (fontified t c-is-sws t) 25570 25634 (fontified t) 25634 25639 (face font-lock-keyword-face fontified t) 25639 25642 (fontified t) 25642 25645 (face font-lock-comment-delimiter-face fontified t) 25645 25684 (face font-lock-comment-face fontified t) 25684 25707 (fontified t) 25707 25711 (face font-lock-keyword-face fontified t) 25711 25724 (fontified t) 25724 25725 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 25725 25730 (face font-lock-preprocessor-face fontified t c-in-sws t) 25730 25742 (fontified t c-in-sws t) 25742 25747 (fontified t c-is-sws t c-in-sws t) 25747 25748 (face font-lock-keyword-face fontified t c-is-sws t) 25748 25749 (face font-lock-keyword-face fontified t) 25749 25822 (fontified t) 25822 25848 (fontified t) 25848 25871 (face font-lock-string-face fontified t) 25871 26039 (fontified t) 26039 26044 (face font-lock-keyword-face fontified t) 26044 26047 (fontified t) 26047 26050 (face font-lock-comment-delimiter-face fontified t) 26050 26089 (face font-lock-comment-face fontified t) 26089 26097 (fontified t) 26097 26098 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 26098 26103 (face font-lock-preprocessor-face fontified t c-in-sws t) 26103 26104 (fontified t c-in-sws t) 26104 26107 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26107 26120 (face font-lock-comment-face fontified t c-in-sws t) 26120 26121 (fontified t c-in-sws t) 26121 26133 (fontified t c-is-sws t c-in-sws t) 26133 26134 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 26134 26135 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26135 26275 (face font-lock-comment-face fontified t c-in-sws t) 26275 26288 (fontified t c-in-sws t) 26288 26289 (face font-lock-type-face fontified t c-is-sws t) 26289 26291 (face font-lock-type-face fontified t) 26291 26292 (face font-lock-type-face c-type c-decl-id-start fontified t) 26292 26294 (fontified t) 26294 26298 (face font-lock-variable-name-face fontified t) 26298 26313 (fontified t) 26313 26316 (face font-lock-string-face fontified t) 26316 26347 (fontified t) 26347 26348 (face font-lock-negation-char-face fontified t) 26348 26374 (fontified t) 26374 26386 (fontified t) 26386 26388 (face font-lock-keyword-face fontified t) 26388 26390 (fontified t) 26390 26391 (face font-lock-negation-char-face fontified t) 26391 26443 (fontified t) 26443 26446 (face font-lock-string-face fontified t) 26446 26474 (fontified t) 26474 26477 (face font-lock-comment-delimiter-face fontified t) 26477 26532 (face font-lock-comment-face fontified t) 26532 26563 (fontified t) 26563 26567 (face font-lock-keyword-face fontified t) 26567 26578 (fontified t) 26578 26588 (fontified t c-is-sws t c-in-sws t) 26588 26589 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 26589 26591 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26591 26616 (face font-lock-comment-face fontified t c-in-sws t) 26616 26617 (fontified t c-in-sws t) 26617 26627 (fontified t c-in-sws t c-is-sws t) 26627 26628 (fontified t c-is-sws t) 26628 26688 (fontified t) 26688 26693 (face font-lock-keyword-face fontified t) 26693 26719 (fontified t) 26719 26723 (face font-lock-keyword-face fontified t) 26723 26797 (fontified t) 26797 26815 (fontified t c-is-sws t c-in-sws t) 26815 26816 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 26816 26818 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26818 26827 (face font-lock-comment-face fontified t c-in-sws t) 26827 26835 (fontified t c-in-sws t c-is-sws t) 26835 26836 (fontified t c-is-sws t) 26836 26849 (fontified t) 26849 26867 (fontified t c-is-sws t c-in-sws t) 26867 26868 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 26868 26870 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26870 26879 (face font-lock-comment-face fontified t c-in-sws t) 26879 26887 (fontified t c-in-sws t c-is-sws t) 26887 26888 (fontified t c-is-sws t) 26888 26903 (fontified t) 26903 26904 (face font-lock-negation-char-face fontified t) 26904 26938 (fontified t) 26938 26941 (face font-lock-comment-delimiter-face fontified t) 26941 26991 (face font-lock-comment-face fontified t) 26991 27000 (fontified t) 27000 27006 (fontified t c-is-sws t c-in-sws t) 27006 27007 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 27007 27008 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 27008 27423 (face font-lock-comment-face fontified t c-in-sws t) 27423 27509 (face font-lock-comment-face fontified t c-in-sws t) 27509 27517 (fontified t c-in-sws t) 27517 27520 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 27520 27584 (face font-lock-comment-face fontified t c-in-sws t) 27584 27585 (fontified t c-in-sws t) 27585 27591 (fontified t c-in-sws t c-is-sws t) 27591 27592 (face font-lock-keyword-face fontified t c-is-sws t) 27592 27593 (face font-lock-keyword-face fontified t) 27593 27595 (fontified t) 27595 27596 (face font-lock-negation-char-face fontified t) 27596 27621 (fontified t) 27621 27627 (face font-lock-keyword-face fontified t) 27627 27668 (fontified t) 27668 27681 (fontified t c-is-sws t c-in-sws t) 27681 27682 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 27682 27684 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 27684 27694 (face font-lock-comment-face fontified t c-in-sws t) 27694 27700 (fontified t c-in-sws t c-is-sws t) 27700 27701 (fontified t c-is-sws t) 27701 27739 (fontified t) 27739 27744 (face font-lock-keyword-face fontified t) 27744 27750 (fontified t) 27750 27754 (face font-lock-keyword-face fontified t) 27754 27778 (fontified t) 27778 27779 (c-type c-decl-end fontified t) 27779 27786 (fontified t) 27786 27788 (face font-lock-keyword-face fontified t) 27788 27842 (fontified t) 27842 27845 (face font-lock-string-face fontified t) 27845 27855 (fontified t) 27855 27863 (fontified t c-is-sws t c-in-sws t) 27863 27864 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 27864 27866 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 27866 27883 (face font-lock-comment-face fontified t c-in-sws t) 27883 27884 (fontified t c-in-sws t) 27884 27892 (fontified t c-in-sws t c-is-sws t) 27892 27893 (fontified t c-is-sws t) 27893 27908 (fontified t) 27908 27916 (fontified t c-is-sws t c-in-sws t) 27916 27917 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 27917 27919 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 27919 27958 (face font-lock-comment-face fontified t c-in-sws t) 27958 27959 (fontified t c-in-sws t) 27959 27967 (fontified t c-in-sws t c-is-sws t) 27967 27968 (fontified t c-is-sws t) 27968 28044 (fontified t) 28044 28052 (fontified t c-is-sws t c-in-sws t) 28052 28053 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 28053 28055 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 28055 28094 (face font-lock-comment-face fontified t c-in-sws t) 28094 28095 (fontified t c-in-sws t) 28095 28103 (fontified t c-in-sws t c-is-sws t) 28103 28104 (fontified t c-is-sws t) 28104 28202 (fontified t) 28202 28206 (face font-lock-keyword-face fontified t) 28206 28228 (fontified t) 28228 28231 (face font-lock-comment-delimiter-face fontified t) 28231 28242 (face font-lock-comment-face fontified t) 28242 28248 (fontified t) 28248 28253 (face font-lock-keyword-face fontified t) 28253 28259 (fontified t) 28259 28263 (face font-lock-keyword-face fontified t) 28263 28278 (fontified t) 28278 28279 (c-type c-decl-end fontified t) 28279 28281 (fontified t c-is-sws t c-in-sws t) 28281 28282 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 28282 28284 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 28284 28298 (face font-lock-comment-face fontified t c-in-sws t) 28298 28304 (fontified t c-in-sws t c-is-sws t) 28304 28305 (face font-lock-keyword-face fontified t c-is-sws t) 28305 28306 (face font-lock-keyword-face fontified t) 28306 28325 (fontified t) 28325 28328 (face font-lock-string-face fontified t) 28328 28359 (fontified t) 28359 28362 (face font-lock-comment-delimiter-face fontified t) 28362 28373 (face font-lock-comment-face fontified t) 28373 28374 (fontified t) 28374 28379 (face font-lock-keyword-face fontified t) 28379 28416 (fontified t) 28416 28422 (face font-lock-keyword-face fontified t) 28422 28438 (fontified t) 28438 28442 (face font-lock-keyword-face fontified t) 28442 28459 (fontified t) 28459 28460 (fontified t) 28460 28463 (fontified t c-is-sws t c-in-sws t) 28463 28464 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 28464 28466 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 28466 28491 (face font-lock-comment-face fontified t c-in-sws t) 28491 28497 (fontified t c-in-sws t c-is-sws t) 28497 28498 (fontified t c-is-sws t) 28498 28531 (fontified t) 28531 28534 (face font-lock-comment-delimiter-face fontified t) 28534 28545 (face font-lock-comment-face fontified t) 28545 28551 (fontified t) 28551 28556 (face font-lock-keyword-face fontified t) 28556 28562 (fontified t) 28562 28566 (face font-lock-keyword-face fontified t) 28566 28577 (fontified t) 28577 28578 (c-type c-decl-end fontified t) 28578 28585 (fontified t) 28585 28587 (face font-lock-keyword-face fontified t) 28587 28632 (fontified t) 28632 28649 (fontified t c-is-sws t c-in-sws t) 28649 28650 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 28650 28652 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 28652 28673 (face font-lock-comment-face fontified t c-in-sws t) 28673 28681 (fontified t c-in-sws t c-is-sws t) 28681 28682 (fontified t c-is-sws t) 28682 28755 (fontified t) 28755 28763 (fontified t c-is-sws t c-in-sws t) 28763 28764 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 28764 28766 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 28766 28830 (face font-lock-comment-face fontified t c-in-sws t) 28830 28831 (fontified t c-in-sws t) 28831 28839 (fontified t c-in-sws t c-is-sws t) 28839 28840 (face font-lock-keyword-face fontified t c-is-sws t) 28840 28841 (face font-lock-keyword-face fontified t) 28841 28884 (fontified t) 28884 28890 (face font-lock-keyword-face fontified t) 28890 28939 (fontified t) 28939 28944 (c-is-sws t c-in-sws t fontified t) 28944 28945 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 28945 28947 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 28947 28966 (c-in-sws t face font-lock-comment-face fontified t) 28966 28974 (c-in-sws t c-is-sws t fontified t) 28974 28975 (c-is-sws t face font-lock-keyword-face fontified t) 28975 28980 (face font-lock-keyword-face fontified t) 28980 28996 (fontified t) 28996 29035 (fontified t) 29035 29040 (face font-lock-keyword-face fontified t) 29040 29046 (fontified t) 29046 29050 (face font-lock-keyword-face fontified t) 29050 29061 (fontified t) 29061 29062 (c-type c-decl-end fontified t) 29062 29103 (fontified t) 29103 29109 (face font-lock-keyword-face fontified t) 29109 29116 (fontified t) 29116 29119 (face font-lock-comment-delimiter-face fontified t) 29119 29151 (face font-lock-comment-face fontified t) 29151 29158 (fontified t) 29158 29161 (face font-lock-comment-delimiter-face fontified t) 29161 29222 (face font-lock-comment-face fontified t) 29222 29227 (fontified t) 29227 29231 (face font-lock-keyword-face fontified t) 29231 29252 (fontified t) 29252 29253 (c-type c-decl-end fontified t) 29253 29260 (fontified t) 29260 29262 (face font-lock-keyword-face fontified t) 29262 29317 (fontified t) 29317 29320 (face font-lock-comment-delimiter-face fontified t) 29320 29325 (face font-lock-comment-face fontified t) 29325 29331 (fontified t) 29331 29335 (face font-lock-keyword-face fontified t) 29335 29369 (fontified t) 29369 29370 (fontified t c-is-sws t c-in-sws t) 29370 29371 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 29371 29373 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 29373 29384 (face font-lock-comment-face fontified t c-in-sws t) 29384 29392 (fontified t c-in-sws t c-is-sws t) 29392 29393 (fontified t c-is-sws t) 29393 29424 (fontified t) 29424 29427 (face font-lock-comment-delimiter-face fontified t) 29427 29440 (face font-lock-comment-face fontified t) 29440 29454 (fontified t) 29454 29459 (face font-lock-keyword-face fontified t) 29459 29465 (fontified t) 29465 29469 (face font-lock-keyword-face fontified t) 29469 29485 (fontified t) 29485 29486 (fontified t) 29486 29488 (fontified t c-is-sws t c-in-sws t) 29488 29489 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 29489 29491 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 29491 29516 (face font-lock-comment-face fontified t c-in-sws t) 29516 29522 (fontified t c-in-sws t c-is-sws t) 29522 29523 (face font-lock-keyword-face fontified t c-is-sws t) 29523 29528 (face font-lock-keyword-face fontified t) 29528 29541 (fontified t) 29541 29546 (face font-lock-type-face fontified t) 29546 29572 (fontified t) 29572 29576 (face font-lock-keyword-face fontified t) 29576 29590 (fontified t) 29590 29591 (c-type c-decl-end fontified t) 29591 29598 (fontified t) 29598 29602 (face font-lock-keyword-face fontified t) 29602 29633 (fontified t) 29633 29634 (c-type c-decl-end fontified t) 29634 29641 (fontified t) 29641 29645 (face font-lock-keyword-face fontified t) 29645 29672 (fontified t) 29672 29673 (c-type c-decl-end fontified t) 29673 29675 (fontified t) 29675 29680 (face font-lock-keyword-face fontified t) 29680 29688 (fontified t) 29688 29692 (face font-lock-keyword-face fontified t) 29692 29708 (fontified t) 29708 29709 (c-type c-decl-end fontified t) 29709 29747 (fontified t) 29747 29752 (face font-lock-keyword-face fontified t) 29752 29760 (fontified t) 29760 29767 (face font-lock-keyword-face fontified t) 29767 29768 (c-type c-decl-end fontified t) 29768 29804 (fontified t) 29804 29809 (face font-lock-keyword-face fontified t) 29809 29846 (fontified t) 29846 29850 (face font-lock-type-face fontified t) 29850 29907 (fontified t) 29907 29913 (face font-lock-keyword-face fontified t) 29913 29915 (fontified t) 29915 29918 (face font-lock-type-face fontified t) 29918 29920 (fontified t) 29920 29923 (face font-lock-string-face fontified t) 29923 29930 (fontified t) 29930 29934 (face font-lock-keyword-face fontified t) 29934 29950 (fontified t) 29950 29951 (c-type c-decl-end fontified t) 29951 29953 (fontified t c-is-sws t c-in-sws t) 29953 29954 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 29954 29956 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 29956 29981 (face font-lock-comment-face fontified t c-in-sws t) 29981 29987 (fontified t c-in-sws t c-is-sws t) 29987 29988 (face font-lock-keyword-face fontified t c-is-sws t) 29988 29990 (face font-lock-keyword-face fontified t) 29990 30038 (fontified t) 30038 30041 (face font-lock-string-face fontified t) 30041 30050 (fontified t) 30050 30053 (face font-lock-string-face fontified t) 30053 30063 (fontified t) 30063 30066 (face font-lock-string-face fontified t) 30066 30068 (fontified t) 30068 30162 (fontified t) 30162 30168 (face font-lock-keyword-face fontified t) 30168 30188 (fontified t) 30188 30192 (face font-lock-keyword-face fontified t) 30192 30210 (fontified t) 30210 30211 (c-type c-decl-end fontified t) 30211 30239 (fontified t) 30239 30243 (face font-lock-type-face fontified t) 30243 30314 (fontified t) 30314 30350 (fontified t c-is-sws t c-in-sws t) 30350 30351 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 30351 30353 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 30353 30362 (face font-lock-comment-face fontified t c-in-sws t) 30362 30368 (fontified t c-in-sws t c-is-sws t) 30368 30369 (fontified t c-is-sws t) 30369 30397 (fontified t) 30397 30402 (face font-lock-type-face fontified t) 30402 30523 (fontified t) 30523 30529 (face font-lock-keyword-face fontified t) 30529 30531 (fontified t) 30531 30534 (face font-lock-type-face fontified t) 30534 30536 (fontified t) 30536 30539 (face font-lock-string-face fontified t) 30539 30546 (fontified t) 30546 30550 (face font-lock-keyword-face fontified t) 30550 30574 (fontified t) 30574 30575 (fontified t) 30575 30576 (fontified t) 30576 30582 (fontified t c-is-sws t c-in-sws t) 30582 30583 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 30583 30584 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 30584 30723 (face font-lock-comment-face fontified t c-in-sws t) 30723 30724 (fontified t c-in-sws t) 30724 30725 (fontified t c-is-sws t) 30725 30731 (fontified t c-in-sws t c-is-sws t) 30731 30732 (face font-lock-keyword-face fontified t c-is-sws t) 30732 30734 (face font-lock-keyword-face fontified t) 30734 30809 (fontified t) 30809 30815 (fontified t c-is-sws t c-in-sws t) 30815 30816 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 30816 30818 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 30818 30882 (face font-lock-comment-face fontified t c-in-sws t) 30882 30883 (fontified t c-in-sws t) 30883 30889 (fontified t c-in-sws t c-is-sws t) 30889 30890 (fontified t c-is-sws t) 30890 30954 (fontified t) 30954 30956 (face font-lock-keyword-face fontified t) 30956 30963 (fontified t) 30963 30966 (face font-lock-string-face fontified t) 30966 31040 (fontified t) 31040 31042 (face font-lock-keyword-face fontified t) 31042 31065 (fontified t) 31065 31071 (face font-lock-keyword-face fontified t) 31071 31083 (fontified t) 31083 31097 (fontified t c-is-sws t c-in-sws t) 31097 31098 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 31098 31100 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 31100 31124 (face font-lock-comment-face fontified t c-in-sws t) 31124 31130 (fontified t c-in-sws t c-is-sws t) 31130 31131 (face font-lock-keyword-face fontified t c-is-sws t) 31131 31132 (face font-lock-keyword-face fontified t) 31132 31229 (fontified t) 31229 31232 (face font-lock-comment-delimiter-face fontified t) 31232 31245 (face font-lock-comment-face fontified t) 31245 31246 (fontified t) 31246 31252 (face font-lock-keyword-face fontified t) 31252 31265 (fontified t) 31265 31268 (face font-lock-comment-delimiter-face fontified t) 31268 31280 (face font-lock-comment-face fontified t) 31280 31477 (fontified t) 31477 31483 (face font-lock-keyword-face fontified t) 31483 31513 (fontified t) 31513 31516 (face font-lock-type-face fontified t) 31516 31517 (face font-lock-type-face c-type c-decl-id-start fontified t) 31517 31518 (fontified t) 31518 31533 (face font-lock-function-name-face fontified t) 31533 31534 (c-type c-decl-arg-start fontified t) 31534 31546 (face font-lock-type-face fontified t) 31546 31548 (fontified t) 31548 31550 (face font-lock-variable-name-face fontified t) 31550 31551 (c-type c-decl-arg-start fontified t) 31551 31552 (fontified t) 31552 31562 (face font-lock-type-face fontified t) 31562 31564 (fontified t) 31564 31567 (face font-lock-variable-name-face fontified t) 31567 31573 (fontified t) 31573 31575 (face font-lock-comment-delimiter-face fontified t) 31575 31580 (face font-lock-comment-face fontified t) 31580 31584 (face fic-face fontified t) 31584 31649 (face font-lock-comment-face fontified t) 31649 31693 (face font-lock-comment-face fontified t) 31693 31697 (fontified t) 31697 31702 (face font-lock-keyword-face fontified t) 31702 31804 (fontified t) 31804 31806 (face font-lock-comment-delimiter-face fontified t) 31806 31811 (face font-lock-comment-face fontified t) 31811 31816 (face fic-face fontified t) 31816 31889 (face font-lock-comment-face fontified t) 31889 31892 (fontified t) 31892 31897 (face font-lock-keyword-face fontified t) 31897 31995 (fontified t) 31995 31996 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 31996 31997 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 31997 32043 (face font-lock-comment-face fontified t c-in-sws t) 32043 32045 (fontified t c-in-sws t) 32045 32046 (face font-lock-type-face fontified t c-is-sws t) 32046 32048 (face font-lock-type-face fontified t) 32048 32049 (face font-lock-type-face c-type c-decl-id-start fontified t) 32049 32050 (fontified t) 32050 32068 (face font-lock-constant-face fontified t) 32068 32070 (fontified t) 32070 32080 (face font-lock-function-name-face fontified t) 32080 32164 (fontified t) 32164 32214 (fontified t) 32214 32217 (face font-lock-type-face fontified t) 32217 32218 (face font-lock-type-face c-type c-decl-id-start fontified t) 32218 32219 (fontified t) 32219 32237 (face font-lock-constant-face fontified t) 32237 32239 (fontified t) 32239 32250 (face font-lock-function-name-face fontified t) 32250 32258 (fontified t) 32258 32261 (face font-lock-type-face fontified t) 32261 32262 (face font-lock-type-face c-type c-decl-id-start fontified t) 32262 32263 (fontified t) 32263 32281 (face font-lock-constant-face fontified t) 32281 32283 (fontified t) 32283 32293 (face font-lock-function-name-face fontified t) 32293 32300 (fontified t) 32300 32318 (face font-lock-constant-face fontified t) 32318 32685 (fontified t) 32685 32702 (fontified t) 32702 32705 (face font-lock-type-face fontified t) 32705 32706 (face font-lock-type-face c-type c-decl-id-start fontified t) 32706 32707 (fontified t) 32707 32720 (face font-lock-constant-face fontified t) 32720 32722 (fontified t) 32722 32732 (face font-lock-function-name-face fontified t) 32732 32739 (fontified t) 32739 32757 (face font-lock-constant-face fontified t) 32757 33069 (fontified t) 33069 33073 (face font-lock-keyword-face fontified t) 33073 33093 (fontified t) 33093 33095 (fontified t c-is-sws t c-in-sws t) 33095 33096 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 33096 33097 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 33097 33210 (face font-lock-comment-face fontified t c-in-sws t) 33210 33214 (face font-lock-comment-face fontified t c-in-sws t) 33214 33218 (face fic-face fontified t c-in-sws t) 33218 33464 (face font-lock-comment-face fontified t c-in-sws t) 33464 33465 (fontified t c-in-sws t) 33465 33467 (fontified t c-in-sws t c-is-sws t) 33467 33468 (fontified t c-is-sws t) 33468 33728 (fontified t) 33728 34120 (fontified t) 34120 34124 (face font-lock-type-face fontified t) 34124 34151 (fontified t) 34151 34157 (face font-lock-keyword-face fontified t) 34157 34208 (fontified t) 34208 34213 (face font-lock-constant-face fontified t) 34213 34234 (fontified t) 34234 34239 (face font-lock-constant-face fontified t) 34239 34241 (fontified t) 34241 34244 (fontified t) 34244 34247 (face font-lock-type-face fontified t) 34247 34248 (face font-lock-type-face c-type c-decl-id-start fontified t) 34248 34249 (fontified t) 34249 34262 (face font-lock-constant-face fontified t) 34262 34264 (fontified t) 34264 34275 (face font-lock-function-name-face fontified t) 34275 34282 (fontified t) 34282 34300 (face font-lock-constant-face fontified t) 34300 34386 (fontified t) 34386 34388 (face font-lock-keyword-face fontified t) 34388 34762 (fontified t) 34762 34800 (fontified t) 34800 34802 (fontified t c-is-sws t c-in-sws t) 34802 34803 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 34803 34805 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 34805 34846 (face font-lock-comment-face fontified t c-in-sws t) 34846 34847 (fontified t c-in-sws t) 34847 34849 (fontified t c-in-sws t c-is-sws t) 34849 34850 (fontified t c-is-sws t) 34850 34865 (fontified t) 34865 34871 (fontified t c-is-sws t c-in-sws t) 34871 34872 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 34872 34874 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 34874 34917 (face font-lock-comment-face fontified t c-in-sws t) 34917 34918 (fontified t c-in-sws t) 34918 34920 (fontified t c-in-sws t c-is-sws t) 34920 34921 (fontified t c-is-sws t) 34921 34936 (fontified t) 34936 34942 (fontified t c-is-sws t c-in-sws t) 34942 34943 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 34943 34945 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 34945 34978 (face font-lock-comment-face fontified t c-in-sws t) 34978 34979 (fontified t c-in-sws t) 34979 34981 (fontified t c-in-sws t c-is-sws t) 34981 34982 (fontified t c-is-sws t) 34982 35084 (fontified t) 35084 35088 (face font-lock-constant-face fontified t) 35088 35191 (fontified t) 35191 35196 (face font-lock-constant-face fontified t) 35196 35217 (fontified t) 35217 35222 (face font-lock-constant-face fontified t) 35222 35263 (fontified t) 35263 35264 (fontified t) 35264 35265 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 35265 35266 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 35266 35304 (face font-lock-comment-face fontified t c-in-sws t) 35304 35306 (fontified t c-in-sws t) 35306 35309 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 35309 35333 (face font-lock-comment-face fontified t c-in-sws t) 35333 35334 (fontified t c-in-sws t) 35334 35335 (face font-lock-type-face fontified t c-is-sws t) 35335 35337 (face font-lock-type-face fontified t) 35337 35338 (face font-lock-type-face c-type c-decl-id-start fontified t) 35338 35339 (fontified t) 35339 35357 (face font-lock-constant-face fontified t) 35357 35359 (fontified t) 35359 35371 (face font-lock-function-name-face fontified t) 35371 35372 (c-type c-decl-arg-start fontified t) 35372 35390 (face font-lock-type-face fontified t) 35390 35392 (fontified t) 35392 35397 (face font-lock-variable-name-face fontified t) 35397 35403 (fontified t) 35403 35405 (face font-lock-keyword-face fontified t) 35405 35491 (fontified t) 35491 35495 (face font-lock-keyword-face fontified t) 35495 35530 (fontified t) 35530 35533 (face font-lock-type-face fontified t) 35533 35534 (face font-lock-type-face c-type c-decl-id-start fontified t) 35534 35535 (fontified t) 35535 35553 (face font-lock-constant-face fontified t) 35553 35555 (fontified t) 35555 35564 (face font-lock-function-name-face fontified t) 35564 35565 (c-type c-decl-arg-start fontified t) 35565 35583 (face font-lock-type-face fontified t) 35583 35585 (fontified t) 35585 35594 (face font-lock-variable-name-face fontified t) 35594 35600 (fontified t) 35600 35603 (face font-lock-keyword-face fontified t) 35603 35638 (fontified t) 35638 35640 (face font-lock-keyword-face fontified t) 35640 35668 (fontified t) 35668 35674 (face font-lock-keyword-face fontified t) 35674 35679 (fontified t) 35679 35681 (face font-lock-keyword-face fontified t) 35681 35698 (fontified t) 35698 35715 (face font-lock-type-face fontified t) 35715 35716 (face font-lock-type-face c-type c-decl-id-start fontified t) 35716 35718 (fontified t) 35718 35733 (face font-lock-variable-name-face fontified t) 35733 35753 (fontified t) 35753 35757 (fontified t c-is-sws t c-in-sws t) 35757 35758 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 35758 35760 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 35760 35808 (face font-lock-comment-face fontified t c-in-sws t) 35808 35809 (fontified t c-in-sws t) 35809 35813 (fontified t c-in-sws t c-is-sws t) 35813 35814 (fontified t c-is-sws t) 35814 35850 (fontified t) 35850 35854 (fontified t c-is-sws t c-in-sws t) 35854 35855 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 35855 35857 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 35857 35916 (face font-lock-comment-face fontified t c-in-sws t) 35916 35917 (fontified t c-in-sws t) 35917 35921 (fontified t c-in-sws t c-is-sws t) 35921 35922 (fontified t c-is-sws t) 35922 35956 (fontified t) 35956 35960 (fontified t c-is-sws t c-in-sws t) 35960 35961 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 35961 35963 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 35963 36014 (face font-lock-comment-face fontified t c-in-sws t) 36014 36015 (fontified t c-in-sws t) 36015 36019 (fontified t c-in-sws t c-is-sws t) 36019 36020 (fontified t c-is-sws t) 36020 36052 (fontified t) 36052 36056 (face font-lock-keyword-face fontified t) 36056 36065 (fontified t) 36065 36069 (face font-lock-keyword-face fontified t) 36069 36119 (fontified t) 36119 36123 (face font-lock-keyword-face fontified t) 36123 36133 (fontified t) 36133 36134 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 36134 36135 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 36135 36354 (face font-lock-comment-face fontified t c-in-sws t) 36354 36356 (face font-lock-comment-face fontified t c-in-sws t) 36356 36357 (fontified t c-in-sws t) 36357 36358 (face font-lock-type-face fontified t c-is-sws t) 36358 36360 (face font-lock-type-face fontified t) 36360 36361 (face font-lock-type-face c-type c-decl-id-start fontified t) 36361 36362 (fontified t) 36362 36380 (face font-lock-constant-face fontified t) 36380 36382 (fontified t) 36382 36400 (face font-lock-function-name-face fontified t) 36400 36401 (c-type c-decl-arg-start fontified t) 36401 36419 (face font-lock-type-face fontified t) 36419 36421 (fontified t) 36421 36426 (face font-lock-variable-name-face fontified t) 36426 36427 (c-type c-decl-arg-start fontified t) 36427 36437 (fontified t) 36437 36455 (face font-lock-type-face fontified t) 36455 36458 (fontified t) 36458 36461 (face font-lock-variable-name-face fontified t) 36461 36521 (fontified t) 36521 36522 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 36522 36524 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 36524 36560 (face font-lock-comment-face fontified t c-in-sws t) 36560 36561 (fontified t c-in-sws t) 36561 36562 (face font-lock-type-face fontified t c-is-sws t) 36562 36564 (face font-lock-type-face fontified t) 36564 36565 (face font-lock-type-face c-type c-decl-id-start fontified t) 36565 36566 (fontified t) 36566 36584 (face font-lock-constant-face fontified t) 36584 36586 (fontified t) 36586 36603 (face font-lock-function-name-face fontified t) 36603 36604 (c-type c-decl-arg-start fontified t) 36604 36622 (face font-lock-type-face fontified t) 36622 36624 (fontified t) 36624 36630 (face font-lock-variable-name-face fontified t) 36630 36636 (fontified t) 36636 36638 (face font-lock-keyword-face fontified t) 36638 36724 (fontified t) 36724 36728 (face font-lock-keyword-face fontified t) 36728 36771 (fontified t) 36771 36772 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 36772 36774 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 36774 36812 (face font-lock-comment-face fontified t c-in-sws t) 36812 36813 (fontified t c-in-sws t) 36813 36814 (face font-lock-type-face fontified t c-is-sws t) 36814 36816 (face font-lock-type-face fontified t) 36816 36817 (face font-lock-type-face c-type c-decl-id-start fontified t) 36817 36818 (fontified t) 36818 36836 (face font-lock-constant-face fontified t) 36836 36838 (fontified t) 36838 36852 (face font-lock-function-name-face fontified t) 36852 36853 (c-type c-decl-arg-start fontified t) 36853 36871 (face font-lock-type-face fontified t) 36871 36874 (fontified t) 36874 36879 (face font-lock-variable-name-face fontified t) 36879 36881 (fontified t) 36881 36885 (fontified t) 36885 36887 (face font-lock-keyword-face fontified t) 36887 36978 (fontified t) 36978 36982 (face font-lock-keyword-face fontified t) 36982 36987 (fontified t) 36987 36988 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 36988 36989 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 36989 37036 (face font-lock-comment-face fontified t c-in-sws t) 37036 37037 (face font-lock-type-face fontified t c-is-sws t) 37037 37039 (face font-lock-type-face fontified t) 37039 37040 (face font-lock-type-face c-type c-decl-id-start fontified t) 37040 37041 (fontified t) 37041 37059 (face font-lock-constant-face fontified t) 37059 37061 (fontified t) 37061 37073 (face font-lock-function-name-face fontified t) 37073 37080 (fontified t) 37080 37082 (face font-lock-keyword-face fontified t) 37082 37103 (fontified t) 37103 37105 (face font-lock-keyword-face fontified t) 37105 37177 (fontified t) 37177 37180 (face font-lock-comment-delimiter-face fontified t) 37180 37203 (face font-lock-comment-face fontified t) 37203 37205 (fontified t) 37205 37208 (face font-lock-keyword-face fontified t) 37208 37273 (fontified t) 37273 37274 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 37274 37275 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 37275 37368 (face font-lock-comment-face fontified t c-in-sws t) 37368 37370 (fontified t c-in-sws t) 37370 37371 (face font-lock-type-face fontified t c-is-sws t) 37371 37373 (face font-lock-type-face fontified t) 37373 37374 (face font-lock-type-face c-type c-decl-id-start fontified t) 37374 37375 (fontified t) 37375 37393 (face font-lock-constant-face fontified t) 37393 37395 (fontified t) 37395 37412 (face font-lock-function-name-face fontified t) 37412 37415 (fontified t) 37415 37419 (fontified t) 37419 37421 (face font-lock-keyword-face fontified t) 37421 37464 (fontified t) 37464 37465 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 37465 37466 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 37466 37582 (face font-lock-comment-face fontified t c-in-sws t) 37582 37583 (fontified t c-in-sws t) 37583 37584 (face font-lock-type-face fontified t c-is-sws t) 37584 37586 (face font-lock-type-face fontified t) 37586 37587 (face font-lock-type-face c-type c-decl-id-start fontified t) 37587 37588 (fontified t) 37588 37606 (face font-lock-constant-face fontified t) 37606 37608 (fontified t) 37608 37615 (face font-lock-function-name-face fontified t) 37615 37620 (fontified t) 37620 37622 (fontified t c-is-sws t c-in-sws t) 37622 37623 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 37623 37625 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 37625 37652 (face font-lock-comment-face fontified t c-in-sws t) 37652 37653 (fontified t c-in-sws t) 37653 37655 (fontified t c-in-sws t c-is-sws t) 37655 37656 (fontified t c-is-sws t) 37656 37671 (fontified t) 37671 37673 (fontified t c-is-sws t c-in-sws t) 37673 37674 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 37674 37676 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 37676 37708 (face font-lock-comment-face fontified t c-in-sws t) 37708 37709 (fontified t c-in-sws t) 37709 37711 (fontified t c-in-sws t c-is-sws t) 37711 37712 (fontified t c-is-sws t) 37712 37732 (fontified t) 37732 37734 (c-is-sws t c-in-sws t fontified t) 37734 37735 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 37735 37737 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 37737 37916 (c-in-sws t face font-lock-comment-face fontified t) 37916 37917 (c-in-sws t fontified t) 37917 37918 (c-is-sws t fontified t) 37918 37921 (fontified t) 37921 37922 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 37922 37923 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 37923 38118 (face font-lock-comment-face fontified t c-in-sws t) 38118 38119 (fontified t c-in-sws t) 38119 38120 (face font-lock-type-face fontified t c-is-sws t) 38120 38122 (face font-lock-type-face fontified t) 38122 38123 (face font-lock-type-face c-type c-decl-id-start fontified t) 38123 38124 (fontified t) 38124 38142 (face font-lock-constant-face fontified t) 38142 38144 (fontified t) 38144 38157 (face font-lock-function-name-face fontified t) 38157 38164 (fontified t) 38164 38178 (face font-lock-type-face fontified t) 38178 38179 (face font-lock-type-face c-type c-decl-id-start fontified t) 38179 38181 (fontified t) 38181 38186 (face font-lock-variable-name-face fontified t) 38186 38189 (fontified t) 38189 38190 (c-type c-decl-id-start fontified t) 38190 38193 (fontified t) 38193 38203 (face font-lock-variable-name-face fontified t) 38203 38215 (fontified t) 38215 38218 (face font-lock-keyword-face fontified t) 38218 38220 (fontified t) 38220 38229 (face font-lock-type-face fontified t) 38229 38230 (face font-lock-type-face c-type c-decl-id-start fontified t) 38230 38232 (fontified t) 38232 38234 (face font-lock-variable-name-face fontified t) 38234 38283 (fontified t) 38283 38287 (c-is-sws t c-in-sws t fontified t) 38287 38288 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 38288 38290 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 38290 38336 (c-in-sws t face font-lock-comment-face fontified t) 38336 38340 (c-in-sws t c-is-sws t fontified t) 38340 38341 (c-is-sws t face font-lock-keyword-face fontified t) 38341 38342 (face font-lock-keyword-face fontified t) 38342 38441 (fontified t) 38441 38442 (fontified t) 38442 38446 (fontified t c-is-sws t c-in-sws t) 38446 38447 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 38447 38449 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 38449 38474 (face font-lock-comment-face fontified t c-in-sws t) 38474 38478 (fontified t c-in-sws t c-is-sws t) 38478 38479 (face font-lock-type-face fontified t c-is-sws t) 38479 38492 (face font-lock-type-face fontified t) 38492 38493 (face font-lock-type-face c-type c-decl-id-start fontified t) 38493 38496 (fontified t) 38496 38500 (face font-lock-variable-name-face fontified t) 38500 38509 (fontified t) 38509 38512 (face font-lock-keyword-face fontified t) 38512 38514 (fontified t) 38514 38528 (face font-lock-type-face fontified t) 38528 38529 (face font-lock-type-face c-type c-decl-id-start fontified t) 38529 38531 (fontified t) 38531 38532 (face font-lock-variable-name-face fontified t) 38532 38624 (fontified t) 38624 38639 (face font-lock-type-face fontified t) 38639 38664 (fontified t) 38664 38666 (face font-lock-keyword-face fontified t) 38666 38761 (fontified t) 38761 38763 (face font-lock-keyword-face fontified t) 38763 38780 (fontified t) 38780 38783 (face font-lock-comment-delimiter-face fontified t) 38783 38829 (face font-lock-comment-face fontified t) 38829 38869 (fontified t) 38869 38884 (face font-lock-type-face fontified t) 38884 38896 (fontified t) 38896 38898 (face font-lock-keyword-face fontified t) 38898 38925 (fontified t) 38925 38940 (face font-lock-type-face fontified t) 38940 38955 (fontified t) 38955 38984 (fontified t) 38984 38988 (face font-lock-keyword-face fontified t) 38988 38997 (fontified t) 38997 39000 (face font-lock-comment-delimiter-face fontified t) 39000 39040 (face font-lock-comment-face fontified t) 39040 39063 (fontified t) 39063 39065 (face font-lock-keyword-face fontified t) 39065 39105 (fontified t) 39105 39106 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 39106 39107 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 39107 39216 (face font-lock-comment-face fontified t c-in-sws t) 39216 39217 (fontified t c-in-sws t) 39217 39218 (face font-lock-type-face fontified t c-is-sws t) 39218 39220 (face font-lock-type-face fontified t) 39220 39221 (face font-lock-type-face c-type c-decl-id-start fontified t) 39221 39222 (fontified t) 39222 39240 (face font-lock-constant-face fontified t) 39240 39242 (fontified t) 39242 39254 (face font-lock-function-name-face fontified t) 39254 39261 (fontified t) 39261 39264 (face font-lock-keyword-face fontified t) 39264 39266 (fontified t) 39266 39275 (face font-lock-type-face fontified t) 39275 39276 (face font-lock-type-face c-type c-decl-id-start fontified t) 39276 39278 (fontified t) 39278 39280 (face font-lock-variable-name-face fontified t) 39280 39329 (fontified t) 39329 39333 (c-is-sws t c-in-sws t fontified t) 39333 39334 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 39334 39336 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 39336 39382 (c-in-sws t face font-lock-comment-face fontified t) 39382 39386 (c-in-sws t c-is-sws t fontified t) 39386 39387 (c-is-sws t face font-lock-keyword-face fontified t) 39387 39388 (face font-lock-keyword-face fontified t) 39388 39487 (fontified t) 39487 39492 (fontified t) 39492 39495 (face font-lock-comment-delimiter-face fontified t) 39495 39518 (face font-lock-comment-face fontified t) 39518 39522 (fontified t) 39522 39525 (face font-lock-keyword-face fontified t) 39525 39527 (fontified t) 39527 39541 (face font-lock-type-face fontified t) 39541 39542 (face font-lock-type-face c-type c-decl-id-start fontified t) 39542 39544 (fontified t) 39544 39545 (face font-lock-variable-name-face fontified t) 39545 39637 (fontified t) 39637 39640 (face font-lock-comment-delimiter-face fontified t) 39640 39680 (face font-lock-comment-face fontified t) 39680 39699 (fontified t) 39699 39701 (face font-lock-keyword-face fontified t) 39701 39735 (fontified t) 39735 39736 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 39736 39737 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 39737 40047 (face font-lock-comment-face fontified t c-in-sws t) 40047 40049 (face font-lock-comment-face fontified t c-in-sws t) 40049 40051 (fontified t c-in-sws t) 40051 40052 (face font-lock-type-face fontified t c-is-sws t) 40052 40054 (face font-lock-type-face fontified t) 40054 40055 (face font-lock-type-face c-type c-decl-id-start fontified t) 40055 40056 (fontified t) 40056 40069 (face font-lock-constant-face fontified t) 40069 40071 (fontified t) 40071 40088 (face font-lock-function-name-face fontified t) 40088 40089 (c-type c-decl-arg-start fontified t) 40089 40092 (face font-lock-type-face fontified t) 40092 40094 (fontified t) 40094 40097 (face font-lock-variable-name-face fontified t) 40097 40098 (c-type c-decl-arg-start fontified t) 40098 40099 (fontified t) 40099 40112 (face font-lock-type-face fontified t) 40112 40114 (fontified t) 40114 40118 (face font-lock-variable-name-face fontified t) 40118 40119 (c-type c-decl-arg-start fontified t) 40119 40158 (fontified t) 40158 40162 (face font-lock-type-face fontified t) 40162 40164 (fontified t) 40164 40174 (face font-lock-variable-name-face fontified t) 40174 40193 (fontified t) 40193 40197 (face font-lock-keyword-face fontified t) 40197 40209 (fontified t) 40209 40211 (fontified t c-is-sws t c-in-sws t) 40211 40212 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 40212 40213 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 40213 40344 (face font-lock-comment-face fontified t c-in-sws t) 40344 40345 (fontified t c-in-sws t) 40345 40347 (fontified t c-in-sws t c-is-sws t) 40347 40348 (face font-lock-type-face fontified t c-is-sws t) 40348 40356 (face font-lock-type-face fontified t) 40356 40357 (face font-lock-type-face c-type c-decl-id-start fontified t) 40357 40359 (fontified t) 40359 40360 (face font-lock-variable-name-face fontified t) 40360 40362 (fontified t) 40362 40366 (face font-lock-keyword-face fontified t) 40366 40370 (fontified t) 40370 40372 (face font-lock-keyword-face fontified t) 40372 40381 (fontified t) 40381 40383 (face font-lock-keyword-face fontified t) 40383 40385 (fontified t) 40385 40386 (face font-lock-negation-char-face fontified t) 40386 40444 (fontified t) 40444 40450 (fontified t c-is-sws t c-in-sws t) 40450 40451 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 40451 40453 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 40453 40489 (face font-lock-comment-face fontified t c-in-sws t) 40489 40495 (fontified t c-in-sws t c-is-sws t) 40495 40496 (fontified t c-is-sws t) 40496 40552 (fontified t) 40552 40614 (fontified t) 40614 40628 (face font-lock-type-face fontified t) 40628 40629 (face font-lock-type-face c-type c-decl-id-start fontified t) 40629 40631 (fontified t) 40631 40636 (face font-lock-variable-name-face fontified t) 40636 40789 (fontified t) 40789 40792 (face font-lock-keyword-face fontified t) 40792 40794 (fontified t) 40794 40803 (face font-lock-type-face fontified t) 40803 40804 (face font-lock-type-face c-type c-decl-id-start fontified t) 40804 40806 (fontified t) 40806 40808 (face font-lock-variable-name-face fontified t) 40808 40877 (fontified t) 40877 40879 (face font-lock-keyword-face fontified t) 40879 40904 (fontified t) 40904 40905 (face font-lock-negation-char-face fontified t) 40905 41062 (fontified t) 41062 41081 (fontified t) 41081 41094 (face font-lock-type-face fontified t) 41094 41095 (face font-lock-type-face c-type c-decl-id-start fontified t) 41095 41097 (fontified t) 41097 41110 (face font-lock-variable-name-face fontified t) 41110 41140 (fontified t) 41140 41142 (face font-lock-keyword-face fontified t) 41142 41283 (fontified t) 41283 41289 (face font-lock-keyword-face fontified t) 41289 41300 (fontified t) 41300 41305 (face font-lock-keyword-face fontified t) 41305 41375 (fontified t) 41375 41379 (face font-lock-keyword-face fontified t) 41379 41425 (fontified t) 41425 41431 (face font-lock-keyword-face fontified t) 41431 41442 (fontified t) 41442 41445 (face font-lock-type-face fontified t) 41445 41446 (face font-lock-type-face c-type c-decl-id-start fontified t) 41446 41447 (fontified t) 41447 41465 (face font-lock-constant-face fontified t) 41465 41467 (fontified t) 41467 41477 (face font-lock-function-name-face fontified t) 41477 41478 (c-type c-decl-arg-start fontified t) 41478 41482 (face font-lock-type-face fontified t) 41482 41483 (fontified t) 41483 41488 (face font-lock-variable-name-face fontified t) 41488 41497 (fontified t) 41497 41503 (face font-lock-keyword-face fontified t) 41503 41509 (fontified t) 41509 41512 (face font-lock-type-face fontified t) 41512 41513 (face font-lock-type-face c-type c-decl-id-start fontified t) 41513 41514 (fontified t) 41514 41532 (face font-lock-constant-face fontified t) 41532 41534 (fontified t) 41534 41549 (face font-lock-function-name-face fontified t) 41549 41564 (fontified t) 41564 41570 (face font-lock-keyword-face fontified t) 41570 41576 (fontified t) 41576 41579 (face font-lock-type-face fontified t) 41579 41580 (face font-lock-type-face c-type c-decl-id-start fontified t) 41580 41581 (fontified t) 41581 41599 (face font-lock-constant-face fontified t) 41599 41601 (fontified t) 41601 41616 (face font-lock-function-name-face fontified t) 41616 41631 (fontified t) 41631 41637 (face font-lock-keyword-face fontified t) 41637 41643 (fontified t) 41643 41652 (face font-lock-type-face fontified t) 41652 41653 (face font-lock-type-face c-type c-decl-id-start fontified t) 41653 41655 (fontified t) 41655 41673 (face font-lock-constant-face fontified t) 41673 41675 (fontified t) 41675 41689 (face font-lock-function-name-face fontified t) 41689 41698 (fontified t) 41698 41704 (face font-lock-keyword-face fontified t) 41704 41710 (fontified t) 41710 41714 (face font-lock-type-face fontified t) 41714 41715 (fontified t category c-<-as-paren-syntax) 41715 41719 (face font-lock-type-face fontified t) 41719 41720 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 41720 41722 (fontified t) 41722 41740 (face font-lock-constant-face fontified t) 41740 41742 (fontified t) 41742 41755 (face font-lock-function-name-face fontified t) 41755 41765 (fontified t) 41765 41771 (face font-lock-keyword-face fontified t) 41771 41777 (fontified t) 41777 41786 (face font-lock-type-face fontified t) 41786 41787 (face font-lock-type-face c-type c-decl-id-start fontified t) 41787 41789 (fontified t) 41789 41807 (face font-lock-constant-face fontified t) 41807 41809 (fontified t) 41809 41826 (face font-lock-function-name-face fontified t) 41826 41827 (c-type c-decl-arg-start fontified t) 41827 41830 (face font-lock-type-face fontified t) 41830 41832 (fontified t) 41832 41835 (face font-lock-variable-name-face fontified t) 41835 41836 (c-type c-decl-arg-start fontified t) 41836 41837 (fontified t) 41837 41848 (face font-lock-type-face fontified t) 41848 41850 (fontified t) 41850 41855 (face font-lock-variable-name-face fontified t) 41855 41856 (c-type c-decl-arg-start fontified t) 41856 41865 (fontified t) 41865 41875 (face font-lock-type-face fontified t) 41875 41877 (fontified t) 41877 41882 (face font-lock-variable-name-face fontified t) 41882 41883 (c-type c-decl-arg-start fontified t) 41883 41892 (fontified t) 41892 41897 (face font-lock-type-face fontified t) 41897 41898 (fontified t) 41898 41916 (face font-lock-variable-name-face fontified t) 41916 41917 (c-type c-decl-arg-start fontified t) 41917 41926 (fontified t) 41926 41939 (face font-lock-type-face fontified t) 41939 41940 (fontified t) 41940 41945 (face font-lock-variable-name-face fontified t) 41945 41946 (c-type c-decl-arg-start fontified t) 41946 41997 (fontified t) 41997 42010 (face font-lock-type-face fontified t) 42010 42011 (fontified t) 42011 42019 (face font-lock-variable-name-face fontified t) 42019 42020 (c-type c-decl-arg-start fontified t) 42020 42029 (fontified t) 42029 42033 (face font-lock-type-face fontified t) 42033 42034 (fontified t category c-<-as-paren-syntax) 42034 42044 (fontified t) 42044 42045 (fontified t category c->-as-paren-syntax) 42045 42047 (fontified t) 42047 42052 (face font-lock-variable-name-face fontified t) 42052 42053 (c-type c-decl-arg-start fontified t) 42053 42104 (fontified t) 42104 42108 (face font-lock-type-face fontified t) 42108 42109 (fontified t category c-<-as-paren-syntax) 42109 42115 (fontified t) 42115 42116 (fontified t category c->-as-paren-syntax) 42116 42118 (fontified t) 42118 42133 (face font-lock-variable-name-face fontified t) 42133 42134 (c-type c-decl-arg-start fontified t) 42134 42135 (fontified t) 42135 42185 (fontified t) 42185 42195 (face font-lock-type-face fontified t) 42195 42197 (fontified t) 42197 42203 (face font-lock-variable-name-face fontified t) 42203 42209 (fontified t) 42209 42215 (face font-lock-keyword-face fontified t) 42215 42221 (fontified t) 42221 42225 (face font-lock-type-face fontified t) 42225 42226 (face font-lock-type-face c-type c-decl-id-start fontified t) 42226 42227 (fontified t) 42227 42245 (face font-lock-constant-face fontified t) 42245 42247 (fontified t) 42247 42269 (face font-lock-function-name-face fontified t) 42269 42276 (fontified t) 42276 42282 (face font-lock-keyword-face fontified t) 42282 42289 (fontified t) 42289 42290 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 42290 42291 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 42291 42324 (face font-lock-comment-face fontified t c-in-sws t) 42324 42325 (fontified t c-in-sws t) 42325 42326 (face font-lock-type-face fontified t c-is-sws t) 42326 42328 (face font-lock-type-face fontified t) 42328 42329 (face font-lock-type-face c-type c-decl-id-start fontified t) 42329 42330 (fontified t) 42330 42343 (face font-lock-constant-face fontified t) 42343 42345 (fontified t) 42345 42355 (face font-lock-function-name-face fontified t) 42355 42362 (fontified t) 42362 42364 (face font-lock-keyword-face fontified t) 42364 42445 (fontified t) 42445 42479 (face font-lock-string-face fontified t) 42479 42486 (fontified t) 42486 42492 (face font-lock-keyword-face fontified t) 42492 42503 (fontified t) 42503 42509 (face font-lock-keyword-face fontified t) 42509 42519 (fontified t) 42519 42531 (face font-lock-type-face fontified t) 42531 42532 (face font-lock-type-face c-type c-decl-id-start fontified t) 42532 42534 (fontified t) 42534 42552 (face font-lock-constant-face fontified t) 42552 42554 (fontified t) 42554 42566 (face font-lock-function-name-face fontified t) 42566 42573 (fontified t) 42573 42579 (face font-lock-keyword-face fontified t) 42579 42581 (fontified t) 42581 42594 (face font-lock-type-face fontified t) 42594 42609 (fontified t) 42609 42615 (face font-lock-type-face fontified t) 42615 42616 (face font-lock-type-face c-type c-decl-id-start fontified t) 42616 42617 (fontified t) 42617 42630 (face font-lock-constant-face fontified t) 42630 42632 (fontified t) 42632 42642 (face font-lock-function-name-face fontified t) 42642 42645 (fontified t) 42645 42649 (fontified t) 42649 42657 (face font-lock-type-face fontified t) 42657 42658 (face font-lock-type-face c-type c-decl-id-start fontified t) 42658 42659 (fontified t) 42659 42662 (face font-lock-variable-name-face fontified t) 42662 42670 (fontified t) 42670 42672 (face font-lock-keyword-face fontified t) 42672 42692 (fontified t) 42692 42696 (fontified t c-is-sws t c-in-sws t) 42696 42697 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 42697 42699 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 42699 42742 (face font-lock-comment-face fontified t c-in-sws t) 42742 42746 (fontified t c-in-sws t c-is-sws t) 42746 42747 (face font-lock-type-face fontified t c-is-sws t) 42747 42749 (face font-lock-type-face fontified t) 42749 42750 (face font-lock-type-face c-type c-decl-id-start fontified t) 42750 42751 (fontified t) 42751 42772 (face font-lock-variable-name-face fontified t) 42772 42774 (fontified t) 42774 42778 (face font-lock-constant-face fontified t) 42778 42784 (fontified t) 42784 42786 (face font-lock-keyword-face fontified t) 42786 42788 (fontified t) 42788 42789 (face font-lock-negation-char-face fontified t) 42789 42845 (fontified t) 42845 42846 (face font-lock-negation-char-face fontified t) 42846 42946 (fontified t) 42946 42950 (face font-lock-constant-face fontified t) 42950 43083 (fontified t) 43083 43089 (face font-lock-keyword-face fontified t) 43089 43091 (fontified t) 43091 43098 (face font-lock-type-face fontified t) 43098 43108 (fontified t) 43108 43114 (face font-lock-type-face fontified t) 43114 43115 (face font-lock-type-face c-type c-decl-id-start fontified t) 43115 43116 (fontified t) 43116 43129 (face font-lock-constant-face fontified t) 43129 43131 (fontified t) 43131 43140 (face font-lock-function-name-face fontified t) 43140 43147 (fontified t) 43147 43155 (face font-lock-type-face fontified t) 43155 43156 (face font-lock-type-face c-type c-decl-id-start fontified t) 43156 43157 (fontified t) 43157 43160 (face font-lock-variable-name-face fontified t) 43160 43176 (fontified t) 43176 43179 (fontified t) 43179 43181 (face font-lock-keyword-face fontified t) 43181 43201 (fontified t) 43201 43205 (fontified t c-is-sws t c-in-sws t) 43205 43206 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 43206 43207 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 43207 43721 (face font-lock-comment-face fontified t c-in-sws t) 43721 44247 (face font-lock-comment-face fontified t c-in-sws t) 44247 44505 (face font-lock-comment-face fontified t c-in-sws t) 44505 44506 (fontified t c-in-sws t) 44506 44510 (fontified t c-in-sws t c-is-sws t) 44510 44511 (face font-lock-type-face fontified t c-is-sws t) 44511 44513 (face font-lock-type-face fontified t) 44513 44514 (face font-lock-type-face c-type c-decl-id-start fontified t) 44514 44515 (fontified t) 44515 44536 (face font-lock-variable-name-face fontified t) 44536 44538 (fontified t) 44538 44542 (face font-lock-constant-face fontified t) 44542 44548 (fontified t) 44548 44550 (face font-lock-keyword-face fontified t) 44550 44552 (fontified t) 44552 44553 (face font-lock-negation-char-face fontified t) 44553 44609 (fontified t) 44609 44610 (face font-lock-negation-char-face fontified t) 44610 44710 (fontified t) 44710 44714 (face font-lock-constant-face fontified t) 44714 44760 (fontified t) 44760 44847 (fontified t) 44847 44853 (face font-lock-keyword-face fontified t) 44853 44855 (fontified t) 44855 44862 (face font-lock-type-face fontified t) 44862 44872 (fontified t) 44872 44875 (face font-lock-type-face fontified t) 44875 44876 (face font-lock-type-face c-type c-decl-id-start fontified t) 44876 44877 (fontified t) 44877 44890 (face font-lock-constant-face fontified t) 44890 44892 (fontified t) 44892 44909 (face font-lock-function-name-face fontified t) 44909 44910 (c-type c-decl-arg-start fontified t) 44910 44913 (face font-lock-type-face fontified t) 44913 44915 (fontified t) 44915 44918 (face font-lock-variable-name-face fontified t) 44918 44919 (c-type c-decl-arg-start fontified t) 44919 44920 (fontified t) 44920 44924 (face font-lock-type-face fontified t) 44924 44926 (fontified t) 44926 44930 (face font-lock-variable-name-face fontified t) 44930 44931 (c-type c-decl-arg-start fontified t) 44931 44932 (fontified t) 44932 44936 (face font-lock-type-face fontified t) 44936 44937 (fontified t) 44937 44940 (face font-lock-variable-name-face fontified t) 44940 44946 (fontified t) 44946 44952 (face font-lock-keyword-face fontified t) 44952 44998 (fontified t) 44998 45001 (face font-lock-type-face fontified t) 45001 45002 (face font-lock-type-face c-type c-decl-id-start fontified t) 45002 45003 (fontified t) 45003 45016 (face font-lock-constant-face fontified t) 45016 45018 (fontified t) 45018 45036 (face font-lock-function-name-face fontified t) 45036 45037 (c-type c-decl-arg-start fontified t) 45037 45040 (face font-lock-type-face fontified t) 45040 45042 (fontified t) 45042 45045 (face font-lock-variable-name-face fontified t) 45045 45046 (c-type c-decl-arg-start fontified t) 45046 45047 (fontified t) 45047 45051 (face font-lock-type-face fontified t) 45051 45053 (fontified t) 45053 45057 (face font-lock-variable-name-face fontified t) 45057 45058 (c-type c-decl-arg-start fontified t) 45058 45059 (fontified t) 45059 45063 (face font-lock-type-face fontified t) 45063 45064 (fontified t) 45064 45067 (face font-lock-variable-name-face fontified t) 45067 45073 (fontified t) 45073 45079 (face font-lock-keyword-face fontified t) 45079 45126 (fontified t) 45126 45129 (face font-lock-type-face fontified t) 45129 45130 (face font-lock-type-face c-type c-decl-id-start fontified t) 45130 45131 (fontified t) 45131 45144 (face font-lock-constant-face fontified t) 45144 45146 (fontified t) 45146 45162 (face font-lock-function-name-face fontified t) 45162 45163 (c-type c-decl-arg-start fontified t) 45163 45166 (face font-lock-type-face fontified t) 45166 45168 (fontified t) 45168 45171 (face font-lock-variable-name-face fontified t) 45171 45172 (c-type c-decl-arg-start fontified t) 45172 45173 (fontified t) 45173 45177 (face font-lock-type-face fontified t) 45177 45179 (fontified t) 45179 45183 (face font-lock-variable-name-face fontified t) 45183 45200 (fontified t) 45200 45233 (face font-lock-string-face fontified t) 45233 45249 (fontified t) 45249 45255 (face font-lock-string-face fontified t) 45255 45258 (fontified t) 45258 45271 (face font-lock-string-face fontified t) 45271 45274 (fontified t) 45274 45278 (face font-lock-type-face fontified t) 45278 45288 (fontified t) 45288 45349 (fontified t) 45349 45352 (face font-lock-type-face fontified t) 45352 45353 (face font-lock-type-face c-type c-decl-id-start fontified t) 45353 45354 (fontified t) 45354 45367 (face font-lock-constant-face fontified t) 45367 45369 (fontified t) 45369 45386 (face font-lock-function-name-face fontified t) 45386 45387 (c-type c-decl-arg-start fontified t) 45387 45390 (face font-lock-type-face fontified t) 45390 45392 (fontified t) 45392 45395 (face font-lock-variable-name-face fontified t) 45395 45396 (c-type c-decl-arg-start fontified t) 45396 45397 (fontified t) 45397 45401 (face font-lock-type-face fontified t) 45401 45403 (fontified t) 45403 45407 (face font-lock-variable-name-face fontified t) 45407 45408 (c-type c-decl-arg-start fontified t) 45408 45409 (fontified t) 45409 45413 (face font-lock-type-face fontified t) 45413 45414 (fontified t) 45414 45417 (face font-lock-variable-name-face fontified t) 45417 45423 (fontified t) 45423 45429 (face font-lock-keyword-face fontified t) 45429 45475 (fontified t) 45475 45478 (face font-lock-type-face fontified t) 45478 45479 (face font-lock-type-face c-type c-decl-id-start fontified t) 45479 45480 (fontified t) 45480 45493 (face font-lock-constant-face fontified t) 45493 45495 (fontified t) 45495 45513 (face font-lock-function-name-face fontified t) 45513 45514 (c-type c-decl-arg-start fontified t) 45514 45517 (face font-lock-type-face fontified t) 45517 45519 (fontified t) 45519 45522 (face font-lock-variable-name-face fontified t) 45522 45523 (c-type c-decl-arg-start fontified t) 45523 45524 (fontified t) 45524 45539 (face font-lock-type-face fontified t) 45539 45541 (fontified t) 45541 45545 (face font-lock-variable-name-face fontified t) 45545 45551 (fontified t) 45551 45557 (face font-lock-keyword-face fontified t) 45557 45558 (fontified t) 45558 45559 (face font-lock-negation-char-face fontified t) 45559 45612 (fontified t) 45612 45615 (face font-lock-comment-delimiter-face fontified t) 45615 45630 (face font-lock-comment-face fontified t) 45630 45634 (fontified t) 45634 45646 (face font-lock-type-face fontified t) 45646 45647 (face font-lock-type-face c-type c-decl-id-start fontified t) 45647 45649 (fontified t) 45649 45662 (face font-lock-constant-face fontified t) 45662 45664 (fontified t) 45664 45676 (face font-lock-function-name-face fontified t) 45676 45683 (fontified t) 45683 45689 (face font-lock-keyword-face fontified t) 45689 45691 (fontified t) 45691 45704 (face font-lock-type-face fontified t) 45704 45733 (fontified t) 45733 45736 (face font-lock-type-face fontified t) 45736 45737 (face font-lock-type-face c-type c-decl-id-start fontified t) 45737 45738 (fontified t) 45738 45751 (face font-lock-constant-face fontified t) 45751 45753 (fontified t) 45753 45763 (face font-lock-function-name-face fontified t) 45763 45764 (c-type c-decl-arg-start fontified t) 45764 45768 (face font-lock-type-face fontified t) 45768 45769 (fontified t) 45769 45774 (face font-lock-variable-name-face fontified t) 45774 45795 (fontified t) 45795 45797 (fontified t) 45797 45803 (face font-lock-keyword-face fontified t) 45803 45812 (fontified t) 45812 45815 (face font-lock-type-face fontified t) 45815 45816 (face font-lock-type-face c-type c-decl-id-start fontified t) 45816 45817 (fontified t) 45817 45830 (face font-lock-constant-face fontified t) 45830 45832 (fontified t) 45832 45847 (face font-lock-function-name-face fontified t) 45847 45871 (fontified t) 45871 45877 (face font-lock-keyword-face fontified t) 45877 45885 (fontified t) 45885 45888 (face font-lock-type-face fontified t) 45888 45889 (face font-lock-type-face c-type c-decl-id-start fontified t) 45889 45890 (fontified t) 45890 45903 (face font-lock-constant-face fontified t) 45903 45905 (fontified t) 45905 45920 (face font-lock-function-name-face fontified t) 45920 45927 (fontified t) 45927 45933 (face font-lock-keyword-face fontified t) 45933 45951 (fontified t) 45951 45960 (face font-lock-type-face fontified t) 45960 45961 (face font-lock-type-face c-type c-decl-id-start fontified t) 45961 45963 (fontified t) 45963 45976 (face font-lock-constant-face fontified t) 45976 45978 (fontified t) 45978 45992 (face font-lock-function-name-face fontified t) 45992 45999 (fontified t) 45999 46005 (face font-lock-keyword-face fontified t) 46005 46027 (fontified t) 46027 46031 (face font-lock-type-face fontified t) 46031 46032 (fontified t category c-<-as-paren-syntax) 46032 46036 (face font-lock-type-face fontified t) 46036 46037 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 46037 46039 (fontified t) 46039 46052 (face font-lock-constant-face fontified t) 46052 46054 (fontified t) 46054 46067 (face font-lock-function-name-face fontified t) 46067 46074 (fontified t) 46074 46080 (face font-lock-keyword-face fontified t) 46080 46096 (fontified t) 46096 46100 (face font-lock-type-face fontified t) 46100 46101 (face font-lock-type-face c-type c-decl-id-start fontified t) 46101 46102 (fontified t) 46102 46115 (face font-lock-constant-face fontified t) 46115 46117 (fontified t) 46117 46139 (face font-lock-function-name-face fontified t) 46139 46146 (fontified t) 46146 46152 (face font-lock-keyword-face fontified t) 46152 46177 (fontified t) 46177 46180 (face font-lock-type-face fontified t) 46180 46181 (face font-lock-type-face c-type c-decl-id-start fontified t) 46181 46182 (fontified t) 46182 46195 (face font-lock-constant-face fontified t) 46195 46197 (fontified t) 46197 46212 (face font-lock-function-name-face fontified t) 46212 46213 (c-type c-decl-arg-start fontified t) 46213 46216 (face font-lock-type-face fontified t) 46216 46218 (fontified t) 46218 46221 (face font-lock-variable-name-face fontified t) 46221 46222 (c-type c-decl-arg-start fontified t) 46222 46223 (fontified t) 46223 46227 (face font-lock-type-face fontified t) 46227 46228 (fontified t) 46228 46243 (face font-lock-variable-name-face fontified t) 46243 46247 (fontified t) 46247 46249 (fontified t c-is-sws t c-in-sws t) 46249 46250 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 46250 46252 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 46252 46320 (face font-lock-comment-face fontified t c-in-sws t) 46320 46322 (fontified t c-in-sws t c-is-sws t) 46322 46323 (fontified t c-is-sws t) 46323 46344 (fontified t) 46344 46346 (fontified t c-is-sws t c-in-sws t) 46346 46347 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 46347 46348 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 46348 46444 (face font-lock-comment-face fontified t c-in-sws t) 46444 46445 (fontified t c-in-sws t) 46445 46447 (fontified t c-in-sws t c-is-sws t) 46447 46448 (face font-lock-type-face fontified t c-is-sws t) 46448 46457 (face font-lock-type-face fontified t) 46457 46458 (face font-lock-type-face c-type c-decl-id-start fontified t) 46458 46460 (fontified t) 46460 46465 (face font-lock-variable-name-face fontified t) 46465 46486 (fontified t) 46486 46491 (face font-lock-keyword-face fontified t) 46491 46492 (fontified t) 46492 46495 (face font-lock-type-face fontified t) 46495 46496 (face font-lock-type-face c-type c-decl-id-start fontified t) 46496 46497 (fontified t) 46497 46504 (face font-lock-variable-name-face fontified t) 46504 46792 (fontified t) 46792 46794 (face font-lock-keyword-face fontified t) 46794 46817 (fontified t) 46817 46821 (face font-lock-constant-face fontified t) 46821 46823 (fontified t) 46823 46831 (fontified t) 46831 46833 (face font-lock-comment-delimiter-face fontified t) 46833 47192 (face font-lock-comment-face fontified t) 47192 47197 (fontified t) 47197 47199 (face font-lock-keyword-face fontified t) 47199 47259 (fontified t) 47259 47265 (face font-lock-string-face fontified t) 47265 47268 (fontified t) 47268 47291 (face font-lock-string-face fontified t) 47291 47301 (fontified t) 47301 47307 (face font-lock-keyword-face fontified t) 47307 47308 (fontified t) 47308 47313 (face font-lock-constant-face fontified t) 47313 47325 (fontified t) 47325 47346 (fontified t) 47346 47357 (face font-lock-keyword-face fontified t) 47357 47379 (fontified t) 47379 47385 (face font-lock-keyword-face fontified t) 47385 47386 (fontified t) 47386 47390 (face font-lock-type-face fontified t) 47390 47408 (fontified t) 47408 47410 (face font-lock-keyword-face fontified t) 47410 47433 (fontified t) 47433 47437 (face font-lock-constant-face fontified t) 47437 47479 (fontified t) 47479 47485 (face font-lock-keyword-face fontified t) 47485 47507 (fontified t) 47507 47511 (face font-lock-constant-face fontified t) 47511 47517 (fontified t) 47517 47520 (face font-lock-type-face fontified t) 47520 47521 (face font-lock-type-face c-type c-decl-id-start fontified t) 47521 47522 (fontified t) 47522 47540 (face font-lock-constant-face fontified t) 47540 47542 (fontified t) 47542 47547 (face font-lock-function-name-face fontified t) 47547 47548 (c-type c-decl-arg-start fontified t) 47548 47554 (face font-lock-type-face fontified t) 47554 47556 (fontified t) 47556 47559 (face font-lock-variable-name-face fontified t) 47559 47560 (c-type c-decl-arg-start fontified t) 47560 47561 (fontified t) 47561 47576 (face font-lock-type-face fontified t) 47576 47577 (fontified t) 47577 47587 (face font-lock-variable-name-face fontified t) 47587 47593 (fontified t) 47593 47596 (face font-lock-type-face fontified t) 47596 47597 (face font-lock-type-face c-type c-decl-id-start fontified t) 47597 47598 (fontified t) 47598 47607 (face font-lock-variable-name-face fontified t) 47607 47609 (fontified t) 47609 47610 (face font-lock-negation-char-face fontified t) 47610 47628 (fontified t) 47628 47631 (face font-lock-keyword-face fontified t) 47631 47633 (fontified t) 47633 47642 (face font-lock-type-face fontified t) 47642 47643 (face font-lock-type-face c-type c-decl-id-start fontified t) 47643 47645 (fontified t) 47645 47647 (face font-lock-variable-name-face fontified t) 47647 47700 (fontified t) 47700 47702 (face font-lock-keyword-face fontified t) 47702 47766 (fontified t) 47766 47775 (face font-lock-string-face fontified t) 47775 47785 (fontified t) 47785 47787 (face font-lock-keyword-face fontified t) 47787 47829 (fontified t) 47829 47835 (face font-lock-string-face fontified t) 47835 47839 (fontified t) 47839 47845 (fontified t) 47845 47849 (face font-lock-keyword-face fontified t) 47849 47850 (fontified t) 47850 47852 (face font-lock-keyword-face fontified t) 47852 47911 (fontified t) 47911 47913 (face font-lock-keyword-face fontified t) 47913 47945 (fontified t) 47945 47948 (face font-lock-string-face fontified t) 47948 47992 (fontified t) 47992 47994 (face font-lock-keyword-face fontified t) 47994 48026 (fontified t) 48026 48029 (face font-lock-string-face fontified t) 48029 48038 (fontified t) 48038 48040 (face font-lock-keyword-face fontified t) 48040 48067 (fontified t) 48067 48069 (face font-lock-keyword-face fontified t) 48069 48149 (fontified t) 48149 48161 (face font-lock-string-face fontified t) 48161 48337 (fontified t) 48337 48341 (face font-lock-keyword-face fontified t) 48341 48342 (fontified t) 48342 48344 (face font-lock-keyword-face fontified t) 48344 48369 (fontified t) 48369 48435 (fontified t) 48435 48438 (face font-lock-type-face fontified t) 48438 48439 (face font-lock-type-face c-type c-decl-id-start fontified t) 48439 48440 (fontified t) 48440 48453 (face font-lock-constant-face fontified t) 48453 48455 (fontified t) 48455 48466 (face font-lock-function-name-face fontified t) 48466 48467 (c-type c-decl-arg-start fontified t) 48467 48473 (face font-lock-type-face fontified t) 48473 48475 (fontified t) 48475 48478 (face font-lock-variable-name-face fontified t) 48478 48479 (c-type c-decl-arg-start fontified t) 48479 48512 (fontified t) 48512 48517 (face font-lock-type-face fontified t) 48517 48519 (fontified t) 48519 48524 (face font-lock-variable-name-face fontified t) 48524 48525 (c-type c-decl-arg-start fontified t) 48525 48558 (fontified t) 48558 48573 (face font-lock-type-face fontified t) 48573 48574 (fontified t) 48574 48584 (face font-lock-variable-name-face fontified t) 48584 48590 (fontified t) 48590 48593 (face font-lock-keyword-face fontified t) 48593 48632 (fontified t) 48632 48634 (face font-lock-keyword-face fontified t) 48634 48669 (fontified t) 48669 48672 (face font-lock-type-face fontified t) 48672 48673 (face font-lock-type-face c-type c-decl-id-start fontified t) 48673 48674 (fontified t) 48674 48680 (face font-lock-variable-name-face fontified t) 48680 48692 (fontified t) 48692 48697 (face font-lock-type-face fontified t) 48697 48698 (face font-lock-type-face c-type c-decl-id-start fontified t) 48698 48699 (fontified t) 48699 48705 (face font-lock-variable-name-face fontified t) 48705 48731 (fontified t) 48731 48735 (face font-lock-string-face fontified t) 48735 48781 (fontified t) 48781 48785 (face font-lock-type-face fontified t) 48785 48806 (fontified t) 48806 48810 (face font-lock-keyword-face fontified t) 48810 48817 (fontified t) 48817 48823 (c-is-sws t c-in-sws t fontified t) 48823 48824 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 48824 48826 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 48826 48889 (c-in-sws t face font-lock-comment-face fontified t) 48889 48890 (c-in-sws t fontified t) 48890 48891 (c-is-sws t fontified t) 48891 48896 (fontified t) 48896 48898 (face font-lock-keyword-face fontified t) 48898 48926 (fontified t) 48926 48930 (face font-lock-constant-face fontified t) 48930 48998 (fontified t) 48998 49006 (fontified t c-is-sws t c-in-sws t) 49006 49007 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 49007 49009 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 49009 49058 (face font-lock-comment-face fontified t c-in-sws t) 49058 49059 (fontified t c-in-sws t) 49059 49067 (fontified t c-in-sws t c-is-sws t) 49067 49068 (fontified t c-is-sws t) 49068 49095 (fontified t) 49095 49099 (face font-lock-string-face fontified t) 49099 49117 (fontified t) 49117 49121 (face font-lock-keyword-face fontified t) 49121 49180 (fontified t) 49180 49182 (face font-lock-keyword-face fontified t) 49182 49184 (fontified t) 49184 49185 (face font-lock-negation-char-face fontified t) 49185 49231 (fontified t) 49231 49238 (face font-lock-string-face fontified t) 49238 49246 (fontified t) 49246 49248 (face font-lock-keyword-face fontified t) 49248 49281 (fontified t) 49281 49284 (face font-lock-string-face fontified t) 49284 49296 (fontified t) 49296 49299 (face font-lock-type-face fontified t) 49299 49300 (face font-lock-type-face c-type c-decl-id-start fontified t) 49300 49301 (fontified t) 49301 49314 (face font-lock-constant-face fontified t) 49314 49316 (fontified t) 49316 49327 (face font-lock-function-name-face fontified t) 49327 49328 (c-type c-decl-arg-start fontified t) 49328 49331 (face font-lock-type-face fontified t) 49331 49333 (fontified t) 49333 49336 (face font-lock-variable-name-face fontified t) 49336 49337 (c-type c-decl-arg-start fontified t) 49337 49370 (fontified t) 49370 49376 (face font-lock-type-face fontified t) 49376 49378 (fontified t) 49378 49381 (face font-lock-variable-name-face fontified t) 49381 49382 (c-type c-decl-arg-start fontified t) 49382 49415 (fontified t) 49415 49430 (face font-lock-type-face fontified t) 49430 49431 (fontified t) 49431 49441 (face font-lock-variable-name-face fontified t) 49441 49443 (fontified t) 49443 49447 (fontified t) 49447 49461 (face font-lock-type-face fontified t) 49461 49462 (face font-lock-type-face c-type c-decl-id-start fontified t) 49462 49464 (fontified t) 49464 49468 (face font-lock-variable-name-face fontified t) 49468 49487 (fontified t) 49487 49500 (face font-lock-type-face fontified t) 49500 49501 (face font-lock-type-face c-type c-decl-id-start fontified t) 49501 49503 (fontified t) 49503 49507 (face font-lock-variable-name-face fontified t) 49507 49524 (fontified t) 49524 49526 (face font-lock-keyword-face fontified t) 49526 49565 (fontified t) 49565 49569 (face font-lock-keyword-face fontified t) 49569 49579 (fontified t) 49579 49593 (face font-lock-constant-face fontified t) 49593 49595 (fontified t) 49595 49603 (face font-lock-type-face fontified t) 49603 49604 (face font-lock-type-face c-type c-decl-id-start fontified t) 49604 49605 (fontified t) 49605 49614 (face font-lock-variable-name-face fontified t) 49614 49638 (fontified t) 49638 49640 (face font-lock-keyword-face fontified t) 49640 49655 (fontified t) 49655 49669 (face font-lock-constant-face fontified t) 49669 49707 (fontified t) 49707 49721 (face font-lock-constant-face fontified t) 49721 49755 (fontified t) 49755 49769 (face font-lock-constant-face fontified t) 49769 49793 (fontified t) 49793 49799 (face font-lock-keyword-face fontified t) 49799 49813 (fontified t) 49813 49815 (face font-lock-keyword-face fontified t) 49815 49869 (fontified t) 49869 49878 (face font-lock-string-face fontified t) 49878 49886 (fontified t) 49886 49888 (face font-lock-keyword-face fontified t) 49888 49954 (fontified t) 49954 49972 (fontified t) 49972 49975 (face font-lock-string-face fontified t) 49975 50034 (fontified t) 50034 50035 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 50035 50037 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 50037 50487 (face font-lock-comment-face fontified t c-in-sws t) 50487 50518 (face font-lock-comment-face fontified t c-in-sws t) 50518 50520 (fontified t c-in-sws t) 50520 50521 (face font-lock-type-face fontified t c-is-sws t) 50521 50523 (face font-lock-type-face fontified t) 50523 50524 (face font-lock-type-face c-type c-decl-id-start fontified t) 50524 50525 (fontified t) 50525 50528 (face font-lock-constant-face fontified t) 50528 50530 (fontified t) 50530 50559 (face font-lock-function-name-face fontified t) 50559 50560 (c-type c-decl-arg-start fontified t) 50560 50563 (face font-lock-type-face fontified t) 50563 50565 (fontified t) 50565 50568 (face font-lock-variable-name-face fontified t) 50568 50574 (fontified t) 50574 50576 (face font-lock-comment-delimiter-face fontified t) 50576 50900 (face font-lock-comment-face fontified t) 50900 50904 (face fic-face fontified t) 50904 51018 (face font-lock-comment-face fontified t) 51018 51063 (face font-lock-comment-face fontified t) 51063 51066 (fontified t) 51066 51068 (face font-lock-keyword-face fontified t) 51068 51145 (fontified t) 51145 51151 (face font-lock-keyword-face fontified t) 51151 51192 (fontified t) 51192 51196 (face font-lock-constant-face fontified t) 51196 51205 (fontified t) 51205 51206 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 51206 51207 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 51207 51563 (face font-lock-comment-face fontified t c-in-sws t) 51563 51888 (face font-lock-comment-face fontified t c-in-sws t) 51888 51890 (fontified t c-in-sws t) 51890 51891 (face font-lock-type-face fontified t c-is-sws t) 51891 51893 (face font-lock-type-face fontified t) 51893 51894 (face font-lock-type-face c-type c-decl-id-start fontified t) 51894 51895 (fontified t) 51895 51912 (face font-lock-constant-face fontified t) 51912 51914 (fontified t) 51914 51937 (face font-lock-function-name-face fontified t) 51937 51938 (c-type c-decl-arg-start fontified t) 51938 51942 (face font-lock-type-face fontified t) 51942 51943 (fontified t) 51943 51947 (face font-lock-variable-name-face fontified t) 51947 51980 (fontified t) 51980 51982 (face font-lock-keyword-face fontified t) 51982 51984 (fontified t) 51984 51985 (face font-lock-negation-char-face fontified t) 51985 52015 (fontified t) 52015 52024 (face font-lock-type-face fontified t) 52024 52025 (face font-lock-type-face c-type c-decl-id-start fontified t) 52025 52027 (fontified t) 52027 52032 (face font-lock-variable-name-face fontified t) 52032 52052 (fontified t) 52052 52055 (face font-lock-keyword-face fontified t) 52055 52067 (fontified t) 52067 52073 (fontified t) 52073 52079 (face font-lock-keyword-face fontified t) 52079 52099 (fontified t) 52099 52101 (face font-lock-keyword-face fontified t) 52101 52157 (fontified t) 52157 52158 (face font-lock-negation-char-face fontified t) 52158 52195 (fontified t) 52195 52200 (face font-lock-keyword-face fontified t) 52200 52297 (fontified t) 52297 52299 (face font-lock-keyword-face fontified t) 52299 52311 (fontified t) 52311 52315 (fontified t c-is-sws t c-in-sws t) 52315 52316 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 52316 52317 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 52317 52453 (face font-lock-comment-face fontified t c-in-sws t) 52453 52454 (fontified t c-in-sws t) 52454 52458 (fontified t c-in-sws t c-is-sws t) 52458 52459 (fontified t c-is-sws t) 52459 52491 (fontified t) 52491 52495 (face font-lock-keyword-face fontified t) 52495 52496 (fontified t) 52496 52498 (face font-lock-keyword-face fontified t) 52498 52523 (fontified t) 52523 52527 (fontified t c-is-sws t c-in-sws t) 52527 52528 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 52528 52530 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 52530 52592 (face font-lock-comment-face fontified t c-in-sws t) 52592 52593 (fontified t c-in-sws t) 52593 52597 (fontified t c-in-sws t c-is-sws t) 52597 52598 (fontified t c-is-sws t) 52598 52795 (fontified t) 52795 52796 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 52796 52797 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 52797 52918 (face font-lock-comment-face fontified t c-in-sws t) 52918 52920 (fontified t c-in-sws t) 52920 52921 (face font-lock-type-face fontified t c-is-sws t) 52921 52923 (face font-lock-type-face fontified t) 52923 52924 (face font-lock-type-face c-type c-decl-id-start fontified t) 52924 52925 (fontified t) 52925 52942 (face font-lock-constant-face fontified t) 52942 52944 (fontified t) 52944 52969 (face font-lock-function-name-face fontified t) 52969 53002 (fontified t) 53002 53003 (c-type c-decl-id-start fontified t) 53003 53006 (fontified t) 53006 53007 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 53007 53008 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 53008 53141 (face font-lock-comment-face fontified t c-in-sws t) 53141 53373 (face font-lock-comment-face fontified t c-in-sws t) 53373 53375 (fontified t c-in-sws t) 53375 53376 (face font-lock-constant-face fontified t c-is-sws t) 53376 53378 (face font-lock-constant-face fontified t) 53378 53380 (fontified t) 53380 53383 (face font-lock-function-name-face fontified t) 53383 53398 (fontified t) 53398 53402 (face font-lock-constant-face fontified t) 53402 53633 (fontified t) 53633 53639 (face font-lock-keyword-face fontified t) 53639 53676 (fontified t) 53676 53834 (fontified t) 53834 53835 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 53835 53836 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 53836 54245 (face font-lock-comment-face fontified t c-in-sws t) 54245 54383 (face font-lock-comment-face fontified t c-in-sws t) 54383 54385 (fontified t c-in-sws t) 54385 54386 (face font-lock-type-face fontified t c-is-sws t) 54386 54388 (face font-lock-type-face fontified t) 54388 54389 (face font-lock-type-face c-type c-decl-id-start fontified t) 54389 54390 (fontified t) 54390 54393 (face font-lock-constant-face fontified t) 54393 54395 (fontified t) 54395 54408 (face font-lock-function-name-face fontified t) 54408 54413 (fontified t) 54413 54415 (fontified t c-is-sws t c-in-sws t) 54415 54416 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 54416 54418 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 54418 54422 (face fic-face fontified t c-in-sws t) 54422 54492 (face font-lock-comment-face fontified t c-in-sws t) 54492 54495 (fontified t c-in-sws t) 54495 54498 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 54498 54532 (face font-lock-comment-face fontified t c-in-sws t) 54532 54533 (fontified t c-in-sws t) 54533 54535 (fontified t c-in-sws t c-is-sws t) 54535 54536 (face font-lock-type-face fontified t c-is-sws t) 54536 54538 (face font-lock-type-face fontified t) 54538 54539 (face font-lock-type-face c-type c-decl-id-start fontified t) 54539 54540 (fontified t) 54540 54559 (face font-lock-variable-name-face fontified t) 54559 54624 (fontified t) 54624 54625 (face font-lock-negation-char-face fontified t) 54625 54704 (fontified t) 54704 54706 (face font-lock-keyword-face fontified t) 54706 54737 (fontified t) 54737 54740 (face font-lock-keyword-face fontified t) 54740 54742 (fontified t) 54742 54756 (face font-lock-type-face fontified t) 54756 54757 (face font-lock-type-face c-type c-decl-id-start fontified t) 54757 54759 (fontified t) 54759 54767 (face font-lock-variable-name-face fontified t) 54767 54800 (fontified t) 54800 54873 (fontified t) 54873 54875 (face font-lock-keyword-face fontified t) 54875 54917 (fontified t) 54917 54921 (face font-lock-keyword-face fontified t) 54921 55160 (fontified t) 55160 55165 (face font-lock-keyword-face fontified t) 55165 55188 (fontified t) 55188 55194 (face font-lock-keyword-face fontified t) 55194 55333 (fontified t) 55333 55378 (fontified t) 55378 55379 (face font-lock-negation-char-face fontified t) 55379 55466 (fontified t) 55466 55467 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 55467 55468 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 55468 55870 (face font-lock-comment-face fontified t c-in-sws t) 55870 55872 (face font-lock-comment-face fontified t c-in-sws t) 55872 55874 (fontified t c-in-sws t) 55874 55875 (face font-lock-type-face fontified t c-is-sws t) 55875 55877 (face font-lock-type-face fontified t) 55877 55878 (face font-lock-type-face c-type c-decl-id-start fontified t) 55878 55879 (fontified t) 55879 55882 (face font-lock-constant-face fontified t) 55882 55884 (fontified t) 55884 55898 (face font-lock-function-name-face fontified t) 55898 55905 (fontified t) 55905 55911 (face font-lock-keyword-face fontified t) 55911 55932 (fontified t) 55932 55936 (face font-lock-keyword-face fontified t) 55936 55950 (fontified t) 55950 55951 (c-type c-decl-end fontified t) 55951 55954 (fontified t) 55954 55958 (face font-lock-keyword-face fontified t) 55958 55978 (fontified t) 55978 55979 (c-type c-decl-end fontified t) 55979 55982 (fontified t) 55982 55986 (face font-lock-keyword-face fontified t) 55986 56000 (fontified t) 56000 56001 (c-type c-decl-end fontified t) 56001 56004 (fontified t) 56004 56008 (face font-lock-keyword-face fontified t) 56008 56028 (fontified t) 56028 56029 (c-type c-decl-end fontified t) 56029 56032 (fontified t) 56032 56036 (face font-lock-keyword-face fontified t) 56036 56050 (fontified t) 56050 56051 (c-type c-decl-end fontified t) 56051 56054 (fontified t) 56054 56058 (face font-lock-keyword-face fontified t) 56058 56078 (fontified t) 56078 56079 (c-type c-decl-end fontified t) 56079 56082 (fontified t) 56082 56086 (face font-lock-keyword-face fontified t) 56086 56100 (fontified t) 56100 56101 (c-type c-decl-end fontified t) 56101 56104 (fontified t) 56104 56108 (face font-lock-keyword-face fontified t) 56108 56129 (fontified t) 56129 56130 (c-type c-decl-end fontified t) 56130 56133 (fontified t) 56133 56137 (face font-lock-keyword-face fontified t) 56137 56152 (fontified t) 56152 56153 (c-type c-decl-end fontified t) 56153 56156 (fontified t) 56156 56160 (face font-lock-keyword-face fontified t) 56160 56182 (fontified t) 56182 56183 (c-type c-decl-end fontified t) 56183 56186 (fontified t) 56186 56190 (face font-lock-keyword-face fontified t) 56190 56202 (fontified t) 56202 56203 (c-type c-decl-end fontified t) 56203 56208 (fontified t) 56208 56214 (face font-lock-keyword-face fontified t) 56214 56223 (fontified t) 56223 56230 (face font-lock-keyword-face fontified t) 56230 56231 (c-type c-decl-end fontified t) 56231 56236 (fontified t) 56236 56242 (face font-lock-keyword-face fontified t) 56242 56257 (fontified t) 56257 56258 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 56258 56259 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 56259 56382 (face font-lock-comment-face fontified t c-in-sws t) 56382 56615 (face font-lock-comment-face fontified t c-in-sws t) 56615 56617 (fontified t c-in-sws t) 56617 56618 (face font-lock-type-face fontified t c-is-sws t) 56618 56620 (face font-lock-type-face fontified t) 56620 56621 (face font-lock-type-face c-type c-decl-id-start fontified t) 56621 56622 (fontified t) 56622 56625 (face font-lock-constant-face fontified t) 56625 56627 (fontified t) 56627 56645 (face font-lock-function-name-face fontified t) 56645 56652 (fontified t) 56652 56658 (face font-lock-keyword-face fontified t) 56658 56679 (fontified t) 56679 56683 (face font-lock-keyword-face fontified t) 56683 56702 (fontified t) 56702 56703 (c-type c-decl-end fontified t) 56703 56706 (fontified t) 56706 56710 (face font-lock-keyword-face fontified t) 56710 56729 (fontified t) 56729 56730 (c-type c-decl-end fontified t) 56730 56731 (fontified t) 56731 56733 (c-is-sws t c-in-sws t fontified t) 56733 56734 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 56734 56735 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 56735 56883 (c-in-sws t face font-lock-comment-face fontified t) 56883 56887 (c-in-sws t face font-lock-comment-face fontified t) 56887 56888 (c-is-sws t fontified t) 56888 56890 (fontified t) 56890 56894 (face font-lock-keyword-face fontified t) 56894 56913 (fontified t) 56913 56914 (c-type c-decl-end fontified t) 56914 56919 (fontified t) 56919 56925 (face font-lock-keyword-face fontified t) 56925 56934 (fontified t) 56934 56941 (face font-lock-keyword-face fontified t) 56941 56942 (c-type c-decl-end fontified t) 56942 56947 (fontified t) 56947 56953 (face font-lock-keyword-face fontified t) 56953 56968 (fontified t) 56968 56969 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 56969 56970 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 56970 57150 (face font-lock-comment-face fontified t c-in-sws t) 57150 57152 (fontified t c-in-sws t) 57152 57153 (face font-lock-type-face fontified t c-is-sws t) 57153 57155 (face font-lock-type-face fontified t) 57155 57156 (face font-lock-type-face c-type c-decl-id-start fontified t) 57156 57157 (fontified t) 57157 57160 (face font-lock-constant-face fontified t) 57160 57162 (fontified t) 57162 57181 (face font-lock-function-name-face fontified t) 57181 57188 (fontified t) 57188 57194 (face font-lock-keyword-face fontified t) 57194 57213 (fontified t) 57213 57217 (face font-lock-keyword-face fontified t) 57217 57236 (fontified t) 57236 57237 (c-type c-decl-end fontified t) 57237 57240 (fontified t) 57240 57244 (face font-lock-keyword-face fontified t) 57244 57263 (fontified t) 57263 57264 (c-type c-decl-end fontified t) 57264 57267 (fontified t) 57267 57271 (face font-lock-keyword-face fontified t) 57271 57290 (fontified t) 57290 57291 (c-type c-decl-end fontified t) 57291 57294 (fontified t) 57294 57298 (face font-lock-keyword-face fontified t) 57298 57316 (fontified t) 57316 57317 (c-type c-decl-end fontified t) 57317 57320 (fontified t) 57320 57324 (face font-lock-keyword-face fontified t) 57324 57338 (fontified t) 57338 57339 (c-type c-decl-end fontified t) 57339 57342 (fontified t) 57342 57346 (face font-lock-keyword-face fontified t) 57346 57359 (fontified t) 57359 57360 (c-type c-decl-end fontified t) 57360 57363 (fontified t) 57363 57367 (face font-lock-keyword-face fontified t) 57367 57386 (fontified t) 57386 57387 (fontified t) 57387 57388 (fontified t) 57388 57392 (fontified t) 57392 57398 (face font-lock-keyword-face fontified t) 57398 57407 (fontified t) 57407 57414 (face font-lock-keyword-face fontified t) 57414 57415 (c-type c-decl-end fontified t) 57415 57420 (fontified t) 57420 57426 (face font-lock-keyword-face fontified t) 57426 57442 (fontified t) 57442 57443 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 57443 57444 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 57444 57600 (face font-lock-comment-face fontified t c-in-sws t) 57600 57603 (fontified t c-in-sws t) 57603 57604 (face font-lock-type-face fontified t c-is-sws t) 57604 57606 (face font-lock-type-face fontified t) 57606 57607 (face font-lock-type-face c-type c-decl-id-start fontified t) 57607 57608 (fontified t) 57608 57611 (face font-lock-constant-face fontified t) 57611 57613 (fontified t) 57613 57631 (face font-lock-function-name-face fontified t) 57631 57638 (fontified t) 57638 57644 (face font-lock-keyword-face fontified t) 57644 57664 (fontified t) 57664 57668 (face font-lock-keyword-face fontified t) 57668 57687 (fontified t) 57687 57688 (c-type c-decl-end fontified t) 57688 57691 (fontified t) 57691 57695 (face font-lock-keyword-face fontified t) 57695 57714 (fontified t) 57714 57715 (c-type c-decl-end fontified t) 57715 57718 (fontified t) 57718 57722 (face font-lock-keyword-face fontified t) 57722 57741 (fontified t) 57741 57742 (c-type c-decl-end fontified t) 57742 57747 (fontified t) 57747 57753 (face font-lock-keyword-face fontified t) 57753 57762 (fontified t) 57762 57769 (face font-lock-keyword-face fontified t) 57769 57770 (c-type c-decl-end fontified t) 57770 57775 (fontified t) 57775 57781 (face font-lock-keyword-face fontified t) 57781 57796 (fontified t) 57796 57797 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 57797 57798 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 57798 57894 (face font-lock-comment-face fontified t c-in-sws t) 57894 58169 (face font-lock-comment-face fontified t c-in-sws t) 58169 58171 (fontified t c-in-sws t) 58171 58172 (face font-lock-type-face fontified t c-is-sws t) 58172 58175 (face font-lock-type-face fontified t) 58175 58176 (face font-lock-type-face c-type c-decl-id-start fontified t) 58176 58177 (fontified t) 58177 58180 (face font-lock-constant-face fontified t) 58180 58182 (fontified t) 58182 58206 (face font-lock-function-name-face fontified t) 58206 58207 (c-type c-decl-arg-start fontified t) 58207 58217 (face font-lock-type-face fontified t) 58217 58219 (fontified t) 58219 58223 (face font-lock-variable-name-face fontified t) 58223 58229 (fontified t) 58229 58231 (face font-lock-keyword-face fontified t) 58231 58320 (fontified t) 58320 58326 (face font-lock-keyword-face fontified t) 58326 58328 (fontified t) 58328 58333 (face font-lock-type-face fontified t) 58333 58354 (fontified t) 58354 58360 (face font-lock-keyword-face fontified t) 58360 58382 (fontified t) 58382 58383 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 58383 58385 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 58385 58438 (face font-lock-comment-face fontified t c-in-sws t) 58438 58984 (face font-lock-comment-face fontified t c-in-sws t) 58984 59004 (face font-lock-comment-face fontified t c-in-sws t) 59004 59006 (fontified t c-in-sws t) 59006 59007 (face font-lock-type-face fontified t c-is-sws t) 59007 59009 (face font-lock-type-face fontified t) 59009 59010 (face font-lock-type-face c-type c-decl-id-start fontified t) 59010 59011 (fontified t) 59011 59014 (face font-lock-constant-face fontified t) 59014 59016 (fontified t) 59016 59026 (face font-lock-function-name-face fontified t) 59026 59027 (c-type c-decl-arg-start fontified t) 59027 59031 (face font-lock-type-face fontified t) 59031 59034 (fontified t) 59034 59038 (face font-lock-variable-name-face fontified t) 59038 59039 (c-type c-decl-arg-start fontified t) 59039 59040 (fontified t) 59040 59046 (face font-lock-type-face fontified t) 59046 59048 (fontified t) 59048 59059 (face font-lock-variable-name-face fontified t) 59059 59061 (fontified t) 59061 59065 (face font-lock-keyword-face fontified t) 59065 59066 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 59066 59071 (fontified t) 59071 59073 (face font-lock-keyword-face fontified t) 59073 59171 (fontified t) 59171 59173 (face font-lock-comment-delimiter-face fontified t) 59173 59299 (face font-lock-comment-face fontified t) 59299 59333 (fontified t) 59333 59335 (face font-lock-keyword-face fontified t) 59335 59395 (fontified t) 59395 59401 (face font-lock-keyword-face fontified t) 59401 59415 (fontified t) 59415 59421 (face font-lock-keyword-face fontified t) 59421 59461 (fontified t) 59461 59462 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 59462 59464 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) "2015-01-04" "" "" "您好!
感谢您联系AWS中国技术支持。

从后端系统来看instance都处在健康状态。请提供/var/log/messages和zabbix相关的图表（mem和CPU），有助于我们分析问题。从表面来看可能此次事件和OOM有关。

We value your feedback. Please rate my response using the link below.

您的反馈对于我们保障服务质量非常重要，欢迎您使用下面的评分对本次回复做出评价。" "nc -zv www.baidu.com 80
found 0 associations
found 1 connections:
     1:	flags=82<CONNECTED,PREFERRED>
	outif en0
	src 10.29.188.63 port 59547
	dst 220.181.112.244 port 80
	rank info not available
	TCP aux info available

Connection to www.baidu.com port 80 [tcp/http] succeeded!" #(" 将RSAAuthentication yes和PubkeyAuthentication yes两行均改为no （此设置用于实现禁用PEM Key登录方式" 0 77 (fontified t)) #("将RSAAuthentication yes和PubkeyAuthentication yes两行均改为no （此设置用于实现禁用PEM Key登录方式）" 0 77 (fontified t)) "再重启实例或者ssh服务" "您好!
感谢您联系AWS中国技术支持。
根据您在案例中提供的信息，分析如下：
问题描述：

需要实现下面两个需求，需要怎样做？

1. 需要对于某个或者某些特定用户限制只能通过ssh远程执行脚本而不可以登录OS
2. 将PEM Key方式登录改为通过用户名和密码进行ssh登录

解决方案：

1. 在/etc/passwd文件中将特定用户的最后一列设置成/usr/sbin/nologin，例如：

tom:x:130:130:tom:/bin:/usr/sbin/nologin

2. 在/etc/ssh/sshd_config中做如下更改：

2.1 将PasswordAuthentication no改为yes（此设置可以打开用户名密码方式登录）

2.2 将RSAAuthentication yes和PubkeyAuthentication yes两行均改为no （此设置用于实现禁用PEM Key登录方式）

期待您的回复，谢谢！" "[ec2-user@ip-10-0-0-94 ~]$ aws ec2 describe-regions --output text |awk '{print $3;}'
eu-west-1
ap-southeast-1
ap-southeast-2
eu-central-1
ap-northeast-2
ap-northeast-1
us-east-1
sa-east-1
us-west-1
us-west-2
" #("J.a3z@WA" 0 8 (fontified t)) "http://www.wsdot.wa.gov/ferries/schedule/ScheduleDetail.aspx?departingterm=8&arrivingterm=12&roundtrip=true" "aws emr create-cluster --applications Name=Ganglia Name=Hadoop Name=Hive Name=Hue Name=Mahout Name=Pig Name=Spark --ec2-attributes '{\"KeyName\":\"AccessKey\",\"InstanceProfile\":\"EMR_EC2_DefaultRole\",\"SubnetId\":\"subnet-e3bfa197\",\"EmrManagedSlaveSecurityGroup\":\"sg-81eaaee4\",\"EmrManagedMasterSecurityGroup\":\"sg-87eaaee2\"}' --service-role EMR_DefaultRole --enable-debugging --release-label emr-4.3.0 --log-uri 's3n://aws-logs-904156020878-cn-north-1/elasticmapreduce/' --name '我的集群' --instance-groups '[{\"InstanceCount\":1,\"InstanceGroupType\":\"MASTER\",\"InstanceType\":\"m3.xlarge\",\"Name\":\"Master Instance Group\"}]' --configurations '[{\"Classification\":\"spark\",\"Properties\":{\"maximizeResourceAllocation\":\"true\"},\"Configurations\":[]}]' --region cn-north-1" #("select * from test into outfile '/tmp/test.txt'" 0 33 (fontified t face font-lock-string-face) 33 46 (fontified t) 46 47 (fontified t face font-lock-string-face)) "select * from test into outfile '/home/user/test.txt' " "--delimiter=" #("mysqldump --tab=/tmp/2016-03-07.13-03-41 \\
    --host=mysqltest.cgc9hfzfoylh.rds.cn-north-1.amazonaws.com.cn
    --port=3306 \\
	--user=awsuser \\
	--password=liu770519 \\
	--fields-terminated-by=\"\\001\" \\
	--lines-terminated-by=\"\\002\" \\
	--default-character-set=utf8 \\
	--fields-enclosed-by=''\\
	mydb" 0 43 (fontified t face font-lock-string-face) 43 54 (fontified t face font-lock-string-face) 54 107 (fontified t face font-lock-string-face) 107 108 (fontified t rear-nonsticky t face font-lock-string-face) 108 109 (fontified t face font-lock-string-face) 109 127 (fontified t face font-lock-string-face) 127 145 (fontified t face font-lock-string-face) 145 169 (fontified t face font-lock-string-face) 169 202 (fontified t face font-lock-string-face) 202 234 (fontified t face font-lock-string-face) 234 266 (fontified t face font-lock-string-face) 266 289 (fontified t face font-lock-string-face) 289 292 (fontified t face font-lock-string-face) 292 297 (fontified t face font-lock-string-face)) "mysqltest.cgc9hfzfoylh.rds.cn-north-1.amazonaws.com.cn" "mysqldump --tab=/tmp/2016-03-07.13-03-41 \\
    --host=rds-host
    --port=6690 \\
	--user=db_dump_test \\
	--password=pass \\
	--fields-terminated-by=\"$d_value\" \\
	--lines-terminated-by=\"$new_line_value\" \\
	--default-character-set=utf8 \\
	--fields-enclosed-by=''\\
	db_dump_test" #("mkdir -p ${sslOutputRoot}" 0 11 (fontified t) 11 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t)) #("certs/" 0 6 (fontified t)) "您好，
经过和您在chat中的沟通，现对这个案例的总结如下：
问题描述：

您的问题是：ec2-describe-instance-attribute instance_id --sriov返回sriovNetSupport instance_id是否代表支持Enhanced Networking？

解决方案：

根据AWS文档相关章节：http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/WindowsGuide/enhanced-networking.html 中的描述如果返回值中没有simple之类的字眼表示不支持此功能。

我将暂时关闭此案例，如有后续问题您可以随时重新开启这个案例。
我们会不断提升服务质量和客户体验。再次感谢您对AWS的关注与支持！" "#!/bin/sh
#

# ssl 证书输出的根目录。
sslOutputRoot=\"/etc/apachae_ssl\"
if [ $# -eq 1 ]; then
	sslOutputRoot=$1
fi
if [ ! -d ${sslOutputRoot} ]; then
	mkdir -p ${sslOutputRoot}
fi

cd ${sslOutputRoot}

echo \"开始创建CA根证书...\"
#
# 创建CA根证书，稍后用来签署用于服务器的证书。如果是通过商业性CA如
# Verisign 或 Thawte 签署证书，则不需要自己来创建根证书，而是应该
# 把后面生成的服务器 csr 文件内容贴入一个web表格，支付签署费用并
# 等待签署的证书。关于商业性CA的更多信息请参见： 
# Verisign - http://digitalid.verisign.com/server/apacheNotice.htm 
# Thawte Consulting - http://www.thawte.com/certs/server/request.html 
# CertiSign Certificadora Digital Ltda. - http://www.certisign.com.br 
# IKS GmbH - http://www.iks-jena.de/produkte/ca / 
# Uptime Commerce Ltd. - http://www.uptimecommerce.com 
# BelSign NV/SA - http://www.belsign.be 
# 生成CA根证书私钥
openssl genrsa -des3 -out ca.key 1024 

# 生成CA根证书
# 根据提示填写各个字段, 但注意 Common Name 最好是有效根域名(如 zeali.net ),
# 并且不能和后来服务器证书签署请求文件中填写的 Common Name 完全一样，否则会
# 导致证书生成的时候出现 
# error 18 at 0 depth lookup:self signed certificate 错误
openssl req -new -x509 -days 365 -key ca.key -out ca.crt 
echo \"CA根证书创建完毕。\"

echo \"开始生成服务器证书签署文件及私钥 ...\"
#
# 生成服务器私钥
openssl genrsa -des3 -out server.key 1024 
# 生成服务器证书签署请求文件, Common Name 最好填写使用该证书的完整域名
# (比如: security.zeali.net )
openssl req -new -key server.key -out server.csr  
ls -altrh  ${sslOutputRoot}/server.*
echo \"服务器证书签署文件及私钥生成完毕。\"

echo \"开始使用CA根证书签署服务器证书签署文件 ...\"
#
# 签署服务器证书，生成server.crt文件
# 参见 http://www.faqs.org/docs/securing/chap24sec195.html
#  sign.sh START
#
#  Sign a SSL Certificate Request (CSR)
#  Copyright (c) 1998-1999 Ralf S. Engelschall, All Rights Reserved. 
#

CSR=server.csr

case $CSR in
*.csr ) CERT=\"`echo $CSR | sed -e 's/\\.csr/.crt/'`\" ;;
* ) CERT=\"$CSR.crt\" ;;
esac

#   make sure environment exists
if [ ! -d ca.db.certs ]; then
	mkdir ca.db.certs
fi
if [ ! -f ca.db.serial ]; then
	echo '01' >ca.db.serial
fi
if [ ! -f ca.db.index ]; then
	cp /dev/null ca.db.index
fi

#   create an own SSLeay config
# 如果需要修改证书的有效期限，请修改下面的 default_days 参数.
# 当前设置为10年.
cat >ca.config <<EOT
[ ca ]
default_ca	= CA_own
[ CA_own ]
dir	= .
certs	= ./certs
new_certs_dir	= ./ca.db.certs
database	= ./ca.db.index
serial	= ./ca.db.serial
RANDFILE	= ./ca.db.rand
certificate	= ./ca.crt
private_key	= ./ca.key
default_days	= 3650
default_crl_days	= 30
default_md	= md5
preserve	= no
policy	= policy_anything
[ policy_anything ]
countryName	= optional
stateOrProvinceName	= optional
localityName	= optional
organizationName	= optional
organizationalUnitName	= optional
commonName	= supplied
emailAddress	= optional
EOT

#  sign the certificate
echo \"CA signing: $CSR -> $CERT:\"
openssl ca -config ca.config -out $CERT -infiles $CSR
echo \"CA verifying: $CERT <-> CA cert\"
openssl verify -CAfile ./certs/ca.crt $CERT

#  cleanup after SSLeay 
rm -f ca.config
rm -f ca.db.serial.old
rm -f ca.db.index.old
#  sign.sh END
echo \"使用CA根证书签署服务器证书签署文件完毕。\"


# 使用了 ssl 之后，每次启动 apache 都要求输入 server.key 的口令，
# 你可以通过下面的方法去掉口令输入(如果不希望去掉请注释以下几行代码)：
echo \"去除 apache 启动时必须手工输入密钥密码的限制:\"
cp -f server.key server.key.org
openssl rsa -in server.key.org -out server.key
echo \"去除完毕。\"


# 修改 server.key 的权限，保证密钥安全
chmod 400 server.key

echo \"Now u can configure apache ssl with following:\"
echo -e \"\\tSSLCertificateFile ${sslOutputRoot}/server.crt\"
echo -e \"\\tSSLCertificateKeyFile ${sslOutputRoot}/server.key\"

#  die gracefully
exit 0
" ":(){ :|:& };:" "北京全聘致远科技有限公司 - 4764-2372-5395" "北京天润融通科技股份有限公司 - 147022339119

+8618618146110
   	
patchOffline
Arrow-right-blue patchOffline-c147022339119-i65587--c2-postgres 	2016-02-22 11:11 	7m 0s 	_SUCCEEDED 	
Done
  	
patchOffline
Arrow-right-blue patchOffline-c147022339119-i65587--c2-postgres 	2016-02-22 11:00 	10m 38s 	_SUCCEEDED 	
Done
  	


2016-02-22 11:18:16 	Finished applying off-line patches to DB instance 	FINISH_PATCH_OFFLINE 	INFO 	RDS/EDS 	User 


2016-02-22 11:10:33 	Multi-AZ instance failover completed 	FAILOVER_COMPLETED 	INFO 	EventProcessor 	User 


2016-02-22 11:09:05 	Multi-AZ failover to standby complete - DNS propag... 	HM_SECONDARY_PROMOTION_COMPLETE 	INFO 	HostManager 	
2016-02-22 11:09:05 	DB instance restarted 	DB_RESTART 	INFO 	HostManager 	User 


2016-02-22 11:08:58 	Multi-AZ instance failover started 	FAILOVER_STARTED 	INFO 	EventProcessor 	User 



2016-02-22 11:00:38 	Applying off-line patches to DB instance 	BEGIN_PATCH_OFFLINE 	INFO 	RDS/EDS 	User 
" "2016-02-22 11:00:38" "TaskType	IMPORTINSTANCE	TaskId	import-i-fh0gpfzs	ExpirationTime	2016-03-03T04:55:30Z	Status	active	StatusMessage	Pending	InstanceID	i-542a626c
DISKIMAGE	DiskImageFormat	VMDK	DiskImageSize	511013888	VolumeSize	4	AvailabilityZone	cn-north-1a	ImportManifestUrl	https://liupei.s3.cn-north-1.amazonaws.com.cn/cdaa562a-56c2-4f03-924f-61d503738930/s42700x8_7_0-disk1.vmdkmanifest.xml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20160225T045529Z&X-Amz-SignedHeaders=host&X-Amz-Expires=604799&X-Amz-Credential=AKIAP4BZDNZJ74YEKE3Q%2F20160225%2Fcn-north-1%2Fs3%2Faws4_request&X-Amz-Signature=23c6b3f79cb4ae64cca053d18b4b31a7cc6798c08efbeadc9caf06d994fc9a9a	ApproximateBytesConverted	0	Status	active	StatusMessage	Pending : Downloaded 0" "ec2-import-instance ./s42700x8_7_0-disk1.vmdk  -f VMDK -t m3.2xlarge -a x86_64 -b liupei --region cn-north-1 -o AKIAP4BZDNZJ74YEKE3Q -w /4fNWsm/8oBLoKdiPNuQXpBkJJ8QwW1qTa7Kq/8E -p linux --region cn-north-1 -O AKIAP4BZDNZJ74YEKE3Q -W /4fNWsm/8oBLoKdiPNuQXpBkJJ8QwW1qTa7Kq/8E" "aws s3 cp s3://liupei/s42700x8_7_0.ova ." #("ec2-describe-conversion-tasks import-i-fh0gpfzs --show-transfer-details --region cn-north-1 -O AKIAP4BZDNZJ74YEKE3Q -W /4fNWsm/8oBLoKdiPNuQXpBkJJ8QwW1qTa7Kq/8E" 0 30 (fontified t) 30 46 (fontified t) 46 47 (rear-nonsticky t fontified t) 47 158 (fontified t) 158 159 (rear-nonsticky t fontified t)) "import-i-fh0gpfzs" "ec2-describe-conversion-tasks import-i-fgepf0vv --show-transfer-details --region cn-north-1 -O AKIAP4BZDNZJ74YEKE3Q -W /4fNWsm/8oBLoKdiPNuQXpBkJJ8QwW1qTa7Kq/8E" #("aws ec2 import-image --cli-input-json \"{  \\\"Description\\\": \\\"Arch20160201\\\", \\\"DiskContainers\\\": [ { \\\"Description\\\": \\\"First CLI task\\\", \\\"UserBucket\\\": { \\\"S3Bucket\\\": \\\"liupei\\\", \\\"S3Key\\\" : \\\"Arch20160201.ova\\\" } } ]}\"" 0 1 (fontified t) 1 65 (fontified t) 65 73 (fontified t) 73 221 (fontified t) 221 222 (rear-nonsticky t fontified t)) "ws ec2 import-image --cli-input-json \"{  \\\"Description\\\": \\\"Windows 2008 OVA\\\", \\\"DiskContainers\\\": [ { \\\"Description\\\": \\\"First CLI task\\\", \\\"UserBucket\\\": { \\\"S3Bucket\\\": \\\"my-import-bucket\\\", \\\"S3Key\\\" : \\\"my-windows-2008-vm.ova\\\" } } ]}\"" "/*
 * GHOSTvulnerability check
 * http://www.antian365.com/lab/linux0day/ghost.c
 * Usage: gcc ghost.c-o ghost && ./ ghost
 */
 
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
 
#define CANARY \"in_the_coal_mine\"
 
struct {
  charbuffer[1024];
  charcanary[sizeof(CANARY)];
} temp = { \"buffer\", CANARY };
 
int main(void) {
  struct hostentresbuf;
  struct hostent*result;
  int herrno;
  int retval;
 
  /*** strlen(name) = size_needed - sizeof (*host_addr) - sizeof (*h_addr_ptrs) - 1; ***/
  size_t len =sizeof(temp.buffer) - 16*sizeof(unsigned char) - 2*sizeof(char *) - 1;
  charname[sizeof(temp.buffer)];
  memset(name,'0', len);
  name[len] ='\\0';
 
  retval =gethostbyname_r(name, &resbuf, temp.buffer, sizeof(temp.buffer),&result, &herrno);
 
  if(strcmp(temp.canary, CANARY) != 0) {
  puts(\"vulnerable\");
  exit(EXIT_SUCCESS);
  }
  if (retval ==ERANGE) {
  puts(\"not vulnerable\");
  exit(EXIT_SUCCESS);
  }
 puts(\"should not happen\");
 exit(EXIT_FAILURE);
}" "ghost.c" "/* Copyright 2016 Google Inc
*
* Licensed under the Apache License, Version 2.0 (the \"License\");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an \"AS IS\" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <err.h>
#include <stdio.h>
#include <string.h>

int
main(void)
{
	struct addrinfo hints, *res;
	int r;

	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_STREAM;

	if ((r = getaddrinfo(\"foo.bar.google.com\", \"22\",
	    &hints, &res)) != 0)
		errx(1, \"getaddrinfo: %s\", gai_strerror(r));

	return 0;
}" "#!/usr/bin/env python
# -*- coding: utf-8 -*-

import multiprocessing

# 管道消费者.
def consumer(lock,pipe):
    output_p, input_p = pipe
    input_p.close() # 关闭管道输入口
    while True:
    lock.acquire()           
    item = output_p.recv()
    lock.release()
    if item == None:   
            break
       
        # 处理部分
        lock.acquire()
        print(item)
        lock.release()

# 管道生产者
def producer(sequence, input_p):
    for item in sequence:
        # Put the item on the queue
        input_p.send(item)
       
if __name__ == '__main__':
   
    # 进程数、创建管道，锁等
    p_num = 2
    process = []   
    (output_p, input_p) = multiprocessing.Pipe()
    lock = multiprocessing.Lock()
   
    # 定义消费进程
    for i in range(p_num):
        t =multiprocessing.Process(target=consumer,args=(lock,(output_p, input_p),))     
        t.daemon=True
        process.append(t)   

    # 启动消费进程
    for i in range(p_num):
        process[i].start()
       
    # 关闭输出管道，以往管道填充数据
    output_p.close()
    sequence = range(100) + [None]*p_num  
    producer(sequence, input_p)   
    # 数据填充完毕，打开输入管道
    input_p.close()
   
    # 等待结束
    for i in range(p_num):
        process[i].join()" "(\"gnu\" . \"http://elpa.gnu.org/packages/\")" "(\"marmalade\" . \"http://marmalade-repo.org/packages/\")" "" "Intermediate RDS" #("2" 0 1 (fontified t)) #("1" 0 1 (fontified t)) #("v" 0 1 (fontified t)) #("h" 0 1 (fontified t)) ""))
